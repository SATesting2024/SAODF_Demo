<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.FW.PPL</name>
    </assembly>
    <members>
        <member name="T:ET.FW.PPL.DataModel.TestJobDefEditable">
            <summary>
            Contains some properties to allow easier access to the TestJobDef class from the editor
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefEditable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.DataModel.TestJobDefEditable"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.ClassName">
            <summary>Class name of the TestJob to create</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.Type">
            <summary>Gets the type of the test job.</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.IsBackground">
            <summary>Gets or sets a value indicating whether this job is a background job. Maps background to runtime args</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.InnerPlanDef">
            <summary>
            Internal test plan def, e.g. for Loops or to call other testPlans
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.InnerPlanDefName">
            <summary>
            Internal test plan name as string
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.ContinueFlags">
            <summary>
            ContinueFlags with handling for the CheckedEnumList
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.RequiredState">
            <summary>
            The state required for execution.<para></para>
            Returns null or an empty string, if no required state is defined.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.CheckedContinueFlags">
            <summary>
            the ContinueFlags as CheckedEnumList
            BOAE: gefÃ¤llt mir nicht, muss ander sein -> Listenadapter?
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefEditable.OnFlagsChanged(ET.FW.PPL.TestJobContinueFlags)">
            <summary>
            Called when test job continue flag changed? (Method nowhere referenced!?!)
            </summary>
            <param name="f">Bit coded test job continue flag</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefEditable.GetJobAttributes">
            <summary>
            Gets the job attributes.
            </summary>
            <returns>Required job attributes.</returns>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefEditable.InfoText">
            <summary>
            InfoText, only for prototype data binding and readonly!, remove later
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestJobDefDefining">
            <summary>
            Contains the test job defining members used in the old definition that was based on c# source code
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.ET#FW#PPL#Definition#IInternalDefiningTestJobDef#SetType(System.Type)">
            <summary>Set Type property without setting the ClassName: does not check if Type is public</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetName(System.String)">
            <summary>
            Sets the name of the job
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetClassName(System.String)">
            <summary>Sets the class name this job will be a instance of.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetClassName(System.Type)">
            <summary>Sets the name of the class.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetInnerPlanDef(ET.FW.PPL.Definition.IDefiningTestPlanDef)">
            <summary>Sets the inner plan def.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetInnerPlanDef(System.String)">
            <summary>Sets the inner plan def.</summary>
            <param name="innerPlanDefName">The Full Name of the PlanDef class</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetInnerPlanReadOnlyDef(ET.FW.PPL.Definition.IReadOnlyTestPlanDef)">
            <summary>
            Sets the inner plan def.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetAfter(System.String[])">
            <summary>
            Sets the after property: What jobs start after this job ended
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetRequiredState(System.String)">
            <summary>
            Sets the state required by this TestJob for execution
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.Validating">
            <summary>check if the values in the job def are valid</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetRunType(ET.FW.PPL.TestJobRunType)">
            <summary>
            Sets the type of the run.
            </summary>
            <param name="testJobRunType">Type of the test job run.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetTimeout(System.UInt32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefDefining.SetContinueFlags(ET.FW.PPL.TestJobContinueFlags)">
            <summary>
            Sets the continue flags, overwrite the defaults
            </summary>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestJobDefReadonly">
            <summary>
            Contains properties accessed when showing test job class infos in a readonly mode 
            or when creating job instances during test plan pre-execution
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestJobDefData">
            <summary>
            Base class for test job definition, contains basic data and simple object mechanisms (property changed events, serialization, ...)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ET.FW.PPL.DataModel.TestJobDefData"/> class.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.Name">
            <summary>Name of this job in the test plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.ClassName">
            <summary>Class name of the TestJob to create</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.LocalTestPlanDef">
            <summary>Gets or sets the local test plan def. This test plan def has the job in its local names</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.RunType">
            <summary>
            Foreground / background m_testJobType of the TestJob
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ET.FW.PPL.DataModel.TestJobDefBase"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.ContinueFlags">
            <summary>
            Gets or sets the continue flags of the job def.
            </summary>
            <value>The continue flags.</value>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.InnerPlanDef">
            <summary>Internal test plan def, e.g. for Loops or to call other testPlans</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestJobDefData.After">
            <summary>Gets or sets the list of jobs this job runs after.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.Validating">
            <summary>Check the test plan def for valid data</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.Validate">
            <summary>Check the test plan def for valid data</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.AddTestJobSaveData(System.Collections.Generic.List{ET.FW.PPL.Definition.TestJobSaveData},ET.FW.PPL.Definition.IReadOnlyTestJobDef)">
            <summary>
            Returns the data of a test job def that must be written to a XML export file
            </summary>
            <param name="list">the list to add the TestJobSaveData</param>
            <param name="parentTestJobDef">parentTestJobDef</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestJobDefData.AsReadOnlyTestJobDef">
            <summary>Get this TestJobDef as instance of the IReadOnlyTestJobDef interface</summary>
        </member>
        <member name="E:ET.FW.PPL.DataModel.TestJobDefData.PropertyChanged">
            <summary>Represents the method that will handle the PropertyChanged event raised when a property is changed on a component.</summary>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestPlanDefData">
            <summary>
            Class contains all data and members for persistent storage of a test plan definition
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.Init(System.String,System.Boolean)">
            <summary>Initializes a new instance of the class. This testplan will be a master test plan.</summary>
            <param name="defName">The name shown during execution</param>
            <param name="isPublicName">true if the name can be used to load the testplan from the repository, e.g. from disk</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.Init(System.String,ET.FW.PPL.DataModel.TestPlanDefData)">
            <summary>Initializes a new instance of the class. This test plan will be sub test plan of another.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.Init(ET.FW.PPL.Definition.TestPlanDefSaveData)">
            <summary>Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestPlanDefBase"/> class from XML data.</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.ParamLinks">
            <summary>A list of the ParamLinks of the plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.ParamSets">
            <summary>A list of the ParamSets of the plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.ParamExportsAuto">
            <summary>A list of the ParamExportAuto of the plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.ParamExportsIgnore">
            <summary>A list of the ParamExportIgnore of the plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.ParamExports">
            <summary>A list of the ParamExports of the plan</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.MasterPlanDef">
            <summary>
            Returns the master plan definition if this plan is only a subplan (Loop content, but not a SubPlanTestJob.InnerTestPlan).
            Returns this test plan def if the testplan is the master plan by itself.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.LocalNames">
            <summary>
            Names of jobs in this (sub-)testplan.
            Jobs can only wait for other jobs within the same LocalTestPlan (jobnames stored here)
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.MasterNames">
            <summary>
            Names of job of this plan and all of its sub-testplans, only used if this plan is a master test plan (m_masterPlanDef == null);
            properties can be linked between jobs in masterNames
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.Name">
            <summary>
            Gets the name of the testPlanDef.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.PublicName">
            <summary>
            Gets a value indicating whether the TestPlanDef has a name that can be used to identify the testPlan
            </summary>
            <value><c>true</c> if [public name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.TestPlanDefSaveData">
            <summary>
            Builds up the TestPlanDefSaveData which can be used to
            save this instance
            </summary>
            <returns>The created TestPlanDefSaveData to save this instance</returns>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefData.StorageFileName">
            <summary>
            Gets or sets the name of the saved file or UnsavedTestSet.tset if not named
            </summary>
            <value>The name of the saved file.</value>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.SaveToFile(System.String)">
            <summary>
            Saves to file.
            </summary>
            <param name="fullname">The fullname.</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves the testplandefinition to a xml file.
            </summary>
            <param name="fullname">The filename.</param>
            <param name="setStorageName">TRUE to set the StorageName, FALSE otherwise. FALSE should be used if a tpdef-file is saved as attachment.</param>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.LoadFromFile(System.String)">
            <summary>
            Loads from file.
            </summary>
            <param name="fullname">The fullname.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.AsReadOnlyTestPlanDef">
            <summary>Returns an object that can be used to create executable test plans from this definition</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.AsDefiningTestPlanDef">
            <summary>Returns an object that can be used to set test plan properties</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.Validating">
            <summary>Check the test plan def for valid data</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefData.Validate">
            <summary>Check the test plan def for valid data</summary>
        </member>
        <member name="E:ET.FW.PPL.DataModel.TestPlanDefData.PropertyChanged">
            <summary>Represents the method that will handle the PropertyChanged event raised when a property is changed on a component.</summary>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestPlanDefDefining">
            <summary>Methods to define a test plan def</summary>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefDefining.IsHidden">
            <summary>
            Property used to hide the testplan from displaying in test plan list by overriding this property value to true 
            </summary>
            ETF- 5441 Provide an attribute which when set doesn't apper in the test plan list
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.FillTestPlanDef(ET.FW.PPL.TestPlanDef)">
            <summary>Static method that must be overridden to add test jobs to the test plan</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NewTestJobDef">
            <summary>Get an empty / new TestJobDef for this plan</summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NamedSubPlanDeff(System.String)">
            <summary>
            Get an existing testPlanDef from Cache by FullName
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NamedSubPlanDeff(System.Type)">
            <summary>
            Get an existing testPlanDef from Cache by Name, using a class (definition helper)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NewSubPlanDeff">
            <summary>
            Create and return a new TestPlanDef with this plan as master plan.
            So names within the loop are known in this plan to set parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NewSubPlanDeff(ET.FW.PPL.DataModel.TestPlanDefData)">
            <summary>
            Create and return a new TestPlanDef with this plan as master plan.
            So names within the loop are known in this plan to set parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NewSubPlanDef">
            <summary>
            Create and return a new TestPlanDef with this plan as master plan.
            So names within the loop are known in this plan to set parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.Add(System.String,ET.FW.PPL.Definition.IDefiningTestJobDef)">
            <summary>
            Add a new job to the m_testPlanDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.Add(ET.FW.PPL.Definition.IDefiningTestJobDef)">
            <summary>
            Add a new job to the m_testPlanDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamLink(System.String,System.String,System.String,System.String)">
            <summary>
            Define a parameter dependency between source and target properties
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamSet(System.String,System.String,System.Object)">
            <summary>
            Define a constant value for a parameter / target property
            </summary>
            <param name="targetObj">The target obj.</param>
            <param name="targetProp">The target prop.</param>
            <param name="value">The value, must be either a String or a class implementing IAttribStringValue.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamExport(System.String,System.String,System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Define a param name to be visible outside of the test plan and link it to exactly one (1) internal test job property
            </summary>
            <param name="propName">Name of the prop.</param>
            <param name="sourceObj">The source obj within the testplan.</param>
            <param name="sourceProp">The source prop within the testplan.</param>
            <param name="category">A Category to sort this parameter in the test set editor. If Category is as "001%Caption", 001 is used as order of the notebooks, % is the separator, Caption will be shown in the notebook caption. If category is null, property will not be shown in the test set editor. Category "" will be relaced by the AutoExport default category</param>
            <param name="order">The order element for the properties, will be sorted alphabetically.</param>
            <param name="defaultValue">The default value if the exported value is not set, null if no value should be set as default .</param>
            <param name="info">Text that describes the exported parameters meaning</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamExport(System.String,System.String,System.String)">
            <summary>
            Define a param name to be visible outside of the test plan and link it to exactly one (1) internal test job property
            Must only be used to rename exported params of sub test plans
            </summary>
            <param name="propName">Name of the prop.</param>
            <param name="sourceObj">The source obj within the testplan.</param>
            <param name="sourceProp">The source prop within the testplan.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamExportAuto(System.String,System.String)">
            <summary>
            Adds all unused job properties as exports. Use is: exported property, exportIgnored property, paramSet property, used in paramLink property
            </summary>
            <param name="sourceObj">Name of the job</param>
            <param name="defaultCategory">The default category, if the subjob does not define a category or no subjob available</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.ParamExportIgnore(System.String,System.String)">
            <summary>
            Export this property of the job in the ExportAuto functionality.
            </summary>
            <param name="sourceObj">Name of the job</param>
            <param name="sourceProp">Name of the property</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefDefining.NewTestJobInternalDef">
            <summary>
            Get an empty / new TestJobDef
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestPlanDefReadonly">
            <summary>
            Methods to create an executable test plan from a test plan definition
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefReadonly.Validating">
            <summary>
            Validate the job data and create final data
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefReadonly.AddExportAutoParams">
            <summary>
            Addes all ParamAuto param exports to this jobs ParamExports
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DataModel.TestPlanDefReadonly.GetExportedJobDef(System.String,ET.FW.PPL.Definition.IReadOnlyTestJobDef@,ET.FW.PPL.Definition.TestJobProperty@)">
            <summary>
            Gets the job def that is linked by this paramName. If the exported job def
            is a sub plan caller, we follow the link into the sub plan.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="tjd">The TJD.</param>
            <param name="tjdParam">The TJD param.</param>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefReadonly.MasterTestJobDefs">
            <summary>
            Gets a collection of the test job defs. You may iterate over them or access the test job by name
            </summary>
            <value>The test job defs.</value>
        </member>
        <member name="P:ET.FW.PPL.DataModel.TestPlanDefReadonly.TestJobDefs">
            <summary>
            Gets a collection of the test job defs. You may iterate over them or access the test job by name
            </summary>
            <value>The test job defs.</value>
        </member>
        <member name="T:ET.FW.PPL.DataModel.TestJobDefBase">
            <summary>
            Contains the test job definition, provides as method to make an executable testjob from it during test plan setup.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.CheckedStringEntry`1">
            <summary>
            Edit helper class: Data model for a line in a grid that can be selected using a check box
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.CheckedStringEntry`1.#ctor(System.Boolean,`0,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Definition.CheckedStringEntry`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.CheckedStringEntry`1.Checked">
            <summary>
            The line is selected
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.CheckedStringEntry`1.Tag">
            <summary>
            The tag object for the line, this is the item that is selected
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.CheckedStringEntry`1.Entry">
            <summary>
            The text for the line, may be some text for the tag object, i.e. name ...
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.CheckedStringList`1">
            <summary>
            A list of CheckedStringEntries, you may add some entries
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.CheckedEnumList`1">
            <summary>
            A list of CheckedStringEntries, pre filled with Enum values of a certain enum type
            Converts to a flag field
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.CheckedEnumList`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.CheckedEnumList`1.cse_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the cse control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.PPL.Definition.CheckedEnumList`1.Flags">
            <summary>
            read or set the flags from the checked enum list
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.IDefiningTestPlanDef">
            <summary>
            Define TestPlan parameters
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.AsReadOnlyTestPlanDef">
            <summary>
            Returns an object that can be used to create test jobs from this definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.NewTestJobDef">
            <summary>
            Get an empty / new TestJobDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.NewSubPlanDeff">
            <summary>
            Get an empty / new Sub-TestPlanDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.NamedSubPlanDeff(System.String)">
            <summary>
            Get an existing testPlanDef from Cache by FullName
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.NamedSubPlanDeff(System.Type)">
            <summary>
            Get an existing testPlanDef from Cache by Name, using a class (definition helper)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.Add(System.String,ET.FW.PPL.Definition.IDefiningTestJobDef)">
            <summary>
            Add a new job to the m_testPlanDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.Add(ET.FW.PPL.Definition.IDefiningTestJobDef)">
            <summary>
            Add a new job to the m_testPlanDef
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamLink(System.String,System.String,System.String,System.String)">
            <summary>
            Define a parameter dependency between source and target properties
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamSet(System.String,System.String,System.Object)">
            <summary>
            Define a constant value for a parameter / target property
            </summary>
            <param name="targetObj">The target job name</param>
            <param name="targetProp">The property name</param>
            <param name="value">The value, either null, a String or an object implementing IAttribStringValue</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamExport(System.String,System.String,System.String)">
            <summary>
            Define a param name to be visible outside of the test plan and link it to exactly one (1) internal test job property
            Must only be used to rename exported params of sub test plans
            </summary>
            <param name="propName">Name of the prop.</param>
            <param name="sourceObj">The source obj within the testplan.</param>
            <param name="sourceProp">The source prop within the testplan.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamExport(System.String,System.String,System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Define a param name to be visible outside of the test plan and link it to exactly one (1) internal test job property
            </summary>
            <param name="propName">Name of the prop.</param>
            <param name="sourceObj">The source obj within the testplan.</param>
            <param name="sourceProp">The source prop within the testplan.</param>
            <param name="category">A Category to sort this parameter in the test set editor</param>
            <param name="order">The exported parameters are displayed in alphabetical order according to this string.</param>
            <param name="defaultValue">The default value if the exported value is not set, null if no value should be set as default, a String or an object implementing IAttribStringValue.</param>
            <param name="info">Text that describes the exported parameters meaning</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamExportAuto(System.String,System.String)">
            <summary>
            Adds all unused job properties as exports. Use is: exported property, exportIgnored property, paramSet property, used in paramLink property
            </summary>
            <param name="targetObj">Name of the job</param>
            <param name="defaultCategory">The default category, if the subjob does not define a category or no subjob available</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.ParamExportIgnore(System.String,System.String)">
            <summary>
            Export this property of the job in the ExportAuto functionality
            </summary>
            <param name="targetObj">Name of the job</param>
            <param name="targetProp">Name of the property</param>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Definition.IDefiningTestPlanDef.StorageFileName">
            <summary>
            Gets the name of the storage file, relative if in PPL path or absolute if outside path.
            </summary>
            <value>The name of the storage file.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.SaveToFile(System.String)">
            <summary>
            Saves the testplandefinition to a xml file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestPlanDef.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves the testplandefinition to a xml file.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="setStorageName">TRUE to set the StorageName, FALSE otherwise. FALSE should be used if a tpdef-file is saved as attachment.</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.IReadOnlyTestPlanDef">
            <summary>
            Test plan properties for test plan execution from a test plan def
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.PublicName">
            <summary>
            Gets a value indicating whether the TestPlanDef has a name that can be used to identify the testPlan
            </summary>
            <value><c>true</c> if [public name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.MasterTestJobDefs">
            <summary>
            Gets the test job defs.
            </summary>
            <value>The test job defs.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.TestJobDefs">
            <summary>
            Gets the test job defs.
            </summary>
            <value>The test job defs.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.ParamLinks">
            <summary>
            Gets the param links.
            </summary>
            <value>The param links.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.ParamSets">
            <summary>
            Gets the param sets.
            </summary>
            <value>The param sets.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.ParamExports">
            <summary>
            Gets the param exports.
            </summary>
            <value>The param exports.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.GetExportedJobDef(System.String,ET.FW.PPL.Definition.IReadOnlyTestJobDef@,ET.FW.PPL.Definition.TestJobProperty@)">
            <summary>
            Gets the job def that is linked by this paramName. If the exported job def
            is a sub plan caller, we follow the link into the sub plan.
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="tjd">The TJD.</param>
            <param name="tjdParam">The TJD param.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.GetJobAttributes">
            <summary>
            Gets the job attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IReadOnlyTestPlanDef.Validate">
            <summary>
            Validate the job data and create final data
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.IDefiningTestJobDef">
            <summary>
            Defines TestJob parameters
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetName(System.String)">
            <summary>
            Sets the name of the job
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetClassName(System.String)">
            <summary>
            Sets the name of the class.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetClassName(System.Type)">
            <summary>
            Sets the name of the class.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetInnerPlanDef(ET.FW.PPL.Definition.IDefiningTestPlanDef)">
            <summary>
            Sets the inner plan def.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetInnerPlanDef(System.String)">
            <summary>
            Sets the inner plan def.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetInnerPlanReadOnlyDef(ET.FW.PPL.Definition.IReadOnlyTestPlanDef)">
            <summary>
            Sets the inner plan def.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetAfter(System.String[])">
            <summary>
            Sets the after.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetRunType(ET.FW.PPL.TestJobRunType)">
            <summary>
            Sets the type of the run.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetRequiredState(System.String)">
            <summary>
            Sets the required state.
            </summary>
            <param name="requiredState">The required state</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetTimeout(System.UInt32)">
            <summary>
            Sets the timeout.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.SetContinueFlags(ET.FW.PPL.TestJobContinueFlags)">
            <summary>
            Sets the continue flags, overwrite the defaults
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.Validate">
            <summary>
            Validate and Freeze the definition for later use
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IDefiningTestJobDef.Validating">
            <summary>
            Validate the definition for later use, throw exception on error
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.IInternalDefiningTestJobDef">
            <summary>
            Defines TestJob parameters for internal use
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IInternalDefiningTestJobDef.SetType(System.Type)">
            <summary>
            Sets the type of the job, ignoring public etc checks
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.IReadOnlyTestJobDef">
            <summary>
            test job properties for test job creation from a test job def
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.LocalTestPlanDef">
            <summary>
            Gets the test plan def this test job def belongs to
            </summary>
            <value>The local test plan def.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.After">
            <summary>
            Gets the job defs of the jobs this job should run after.
            </summary>
            <value>The after.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.RunType">
            <summary>
            Foreground / background m_testJobType of the TestJob
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.Enabled">
            <summary>
            Gets or sets a value indicating whether this job is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.ContinueFlags">
            <summary>
            Gets or sets the continue flags of the job def.
            </summary>
            <value>The continue flags.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.InnerPlanDef">
            <summary>
            Gets the definition of the jobs inner plan (only MacroTestJobs and derived classes)
            </summary>
            <value>The inner plan def.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.Type">
            <summary>
            Gets the class type to create the job from
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.IReadOnlyTestJobDef.AddTestJobSaveData(System.Collections.Generic.List{ET.FW.PPL.Definition.TestJobSaveData},ET.FW.PPL.Definition.IReadOnlyTestJobDef)">
            <summary>
            Returns the data of a test job def that must be written to a XML export file
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IReadOnlyTestJobDef.GetJobAttributes">
            <summary>
            Gets the job attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Definition.IReadOnlyTestJobDef.RequiredState">
            <summary>
            Returns the state required by the TestJob for execution.<para></para>
            Returns null or an empty string, is no required state has been defined.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.IStorageManager">
            <summary>
            Storage access for PPL elements: Load and save PPL data
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.IStorageManager.TestPlanDefIds">
            <summary>
            Gets the test plan def names.
            </summary>
            <value>The test plan def names.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.IStorageManager.LoadTestPlanDef(System.String,System.String)">
            <summary>
            Get a test plan definition from a file name or an old Namespace-based string
            </summary>
            <param name="id">The id: full path or fullname of a testplandef class.</param>
            <param name="additionalSearchPath">Optional: Additional path to search for files.</param>
            <returns>test plan definition</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IStorageManager.LoadTestSet(System.String)">
            <summary>
            Load the testSet from file
            </summary>
            <param name="filename">test set file</param>
            <returns>thre test set</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.IStorageManager.Save(ET.FW.PPL.Definition.ITestSet,System.String)">
            <summary>
            Saves the the testSet
            </summary>
            <param name="testSet">The test set.</param>
            <param name="filename">The filename, may be null.</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestPlanManagerState">
            <summary>
            Current Testplan execution state: nothing vs. running
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestPlanManagerState.Idle">
            <summary>
            Not Executing a testplan
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestPlanManagerState.Running">
            <summary>
            Executing Testplan 
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestPlanManagerState.Pause">
            <summary>
            Test waiting between TestVariants
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.ITestPlanManagerStateData">
            <summary>
            Information about current TestPlan execution 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.State">
            <summary>Running or not running</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.LastState">
            <summary>Running or not running before this info</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.VariantCount">
            <summary>Number of Variants in the TestSet</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.VariantIndex">
            <summary>Index of current running Variant</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.VariantName">
            <summary>Current running Variant</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.VariantParams">
            <summary>Current running Variant params</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.TestSetName">
            <summary>Current running TestSet</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.TestPlanDefName">
            <summary>Current running TestPlanDef</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManagerStateData.Interrupted">
            <summary>False if last TestPlan execution ended without abort by user or system</summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.ITestPlanManager">
            <summary>
            Public interface of the TestPlanManager
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManager.StorageManager">
            <summary>
            Access the PPL storage
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.ITestPlanManager.AbortCurrentExecution">
            <summary>
            Aborts the current execution.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManager.State">
            <summary>
            Information about the current running state and parameters
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManager.ContinueOnVariantAbort">
            <summary>
            Flag controls if several test variants continue to execute if one of them had an abort return code.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestPlanManager.PauseBetweenVariants">
            <summary>
            Gets or sets a value indicating whether the execution pauses between variants. If so, you have to call ContinueNextVariant() to continue.
            </summary>
            <value>
            	<c>true</c> if [pause between variants]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ET.FW.PPL.Definition.ITestSet">
            <summary>
            Interface for outer access to TestSets
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestSet.StorageFileName">
            <summary>
            Gets the name of the storage file, relative if in PPL path or absolute if outside path.
            </summary>
            <value>The name of the storage file.</value>
            <remarks>
            Name should be the same as the storage file without path and extension
            </remarks>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestSet.Variants">
            <summary>
            The variants stored in this TestSet
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.ITestSet.AddVariant(ET.FW.PPL.Definition.ITestVariant)">
            <summary>
            Add a variant to the TestSet
            </summary>
            <param name="v">The variant to add</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.ITestSet.SaveToFile(System.String)">
            <summary>
            Save to file, set StorageFileName if fullname is not null.
            </summary>
            <param name="fullname">test set path</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.ITestSet.Clone">
            <summary>
            Clone a testset
            </summary>
            <returns>new testset</returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.ITestVariant">
            <summary>
            Public interface for a test variant
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestVariant.Name">
            <summary>
            The name of the variant
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestVariant.TestPlanDef">
            <summary>
            TestPlanDef for this TestVariant
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ITestVariant.JobPathParams">
            <summary>
            Gets or sets the job path params.
            </summary>
            <value>The job path params.</value>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestJobClassInfoFactory">
            <summary>
            Factory for TestJobClassInfo, caches the information in a weak singleton
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfoFactory.Instance">
            <summary>
            Gets the instance of the factory.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestJobClassInfoFactory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ET.FW.PPL.Definition.TestJobClassInfoFactory"/> class from being created.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfoFactory.TestJobClasses">
            <summary>
            Gets the test job classes found in the system.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestJobClassInfoFactory.FromClassName(System.String)">
            <summary>
            Gets a TestJobClassInfo from the full name of the class.
            </summary>
            <param name="fullName">Name of the class.</param>
            <returns>TestJobClassInfo from the full name of the class</returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.IAttribStringValue">
            <summary>
            Interface a complex type may provide to store its data as JobParam
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.IAttribStringValue.CollectValues(ET.FW.PPL.Definition.KeyValuePairList)">
            <summary>
            Gets or sets the attrib string value.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.IAttribStringValue.SetValues(ET.FW.PPL.Definition.KeyValuePairList)">
            <summary>
            Sets the values.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.KeyValuePair">
            <summary>
            A KeyValuePair
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.KeyValuePair.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.KeyValuePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ET.FW.PPL.Definition.KeyValuePairList">
            <summary>
            Stores a list of keyValuePairs
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.KeyValuePairList.AddValue(System.String,System.String)">
            <summary>
            Adds the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.ComplexParamValue">
            <summary>
            Stores a "dictionary" (a list of keyvaluepairs) into a xml file
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.ComplexParamValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.ComplexParamValue"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.ComplexParamValue.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.ComplexParamValue.TypeString">
            <summary>
            Gets or sets the type string.
            </summary>
            <value>The type string.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.ComplexParamValue.Values">
            <summary>
            Gets or sets the values. Get sorts the keys so we can serialize to the same bytes several times
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:ET.FW.PPL.Definition.ComplexParamValue.KeyValuePairComparer">
            <summary>
            Helper class for comparison of key value pairs
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.ComplexParamValue.KeyValuePairComparer.Compare(ET.FW.PPL.Definition.KeyValuePair,ET.FW.PPL.Definition.KeyValuePair)">
            <summary>
            Compares the specified key value pairs
            </summary>
            <param name="x">First pair to compare</param>
            <param name="y">Second pair to compare</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as shown
            in the following table.Value Meaning Less than zerox is less than y.Zerox
            equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.JobParam">
            <summary>
            Job Params are set in the TestSetEditor and are used to set start values to the testplan execution
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.JobParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.JobParam"/> class.
            If testJobName is null or empty string, the param is an exported param of the test plan def
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.JobParam.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.JobParam"/> class.
            </summary>
            <param name="param">The param.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ET.FW.PPL.Definition.JobParam.Param">
            <summary>
            Gets or sets the name of the test job.
            </summary>
            <value>The name of the test job.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.JobParam.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.JobParam.ValString">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ET.FW.PPL.Definition.ParameterHelper">
            <summary>
            Helper methods for parameter handling
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.ParameterHelper.JobParam2Object(System.Object)">
            <summary>
            Takes an object and converts it into a xml serializable format
            </summary>
            <param name="paramValue">The param value.</param>
            <returns>an object that can be serialized into xml</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.ParameterHelper.Object2JobParam(System.Object)">
            <summary>
            Takes an xml deserialization entry and converts it into a object for a job parameter 
            </summary>
            <param name="objValue">The obj value.</param>
            <returns>Job parameter</returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.JobParams">
            <summary>
            This is a Dicionary of Job Params ("Param" => "12345") that stores the param values for the jobs.
            This are parameters for the testplan which are used on startup without changing the testplan def.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.JobParams.GetKeyForItem(ET.FW.PPL.Definition.JobParam)">
            <summary>
            Gets the key for item.
            </summary>
            <param name="jobParam">The job param.</param>
            <returns>The key</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.JobParams.Get(System.String)">
            <summary>
            Gets the specified job name.
            </summary>
            <param name="paramname">The paramname.</param>
            <returns>Job name</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.JobParams.Add(System.String,System.String)">
            <summary>
            Adds parameter settings the specified jobname.
            </summary>
            <param name="paramname">The paramname.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ET.FW.PPL.Definition.JobParams.Params">
            <summary>
            Returns the params as key value pair
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestJobClassInfo">
            <summary>
            Information about a TestJobClass, get Instance from TestJobClassInfoFactory.Instance.For(classname)
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfo.Type">
            <summary>Gets the type of the class name, if available</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfo.FullName">
            <summary>Gets the full name of the class name</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfo.Properties">
            <summary>Gets the test job properties defined in the type, if available</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfo.InputProperties">
            <summary>Gets the writeable test job properties defined in the type, if available</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobClassInfo.IsRunnable">
            <summary>Tests if jobs of this class can be run on local sysstem</summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestJobClassInfo.GetJobProperties">
            <summary>
            Get all Properties of the type that inplement IReadOnlyObservableObject
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestJobProperty">
            <summary>
            Contains information about Job Property names and abilities
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.jobType">
            <summary>
            The type of the test job
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.type">
            <summary>
            The internal type of the observable object this property expects
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.canRead">
            <summary>
            Property is an output data property
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.canWrite">
            <summary>
            Property is an input data property
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.manualWrite">
            <summary>
            Property can be set from user in a test plan variant
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.defaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.unit">
            <summary>
            Gets a unit string or null
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.minValue">
            <summary>
            gets a minimum value or null
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.maxValue">
            <summary>
            gets a maximum value or null
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Definition.TestJobProperty.autoIgnoreExport">
            <summary>
            TRUE for those propertys, which shall not be exported automatically
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobProperty.Name">
            <summary>
            Name of the job property
            </summary>
            <value></value>
        </member>
        <member name="T:ET.FW.PPL.Definition.PplStorageManager">
            <summary>
            Access different storages to get / save PPL definition elements
            Currently we have file storage (readwrite) and predefined classes in memory (readonly)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.#cctor">
            <summary>
            Initializes the <see cref="T:ET.FW.PPL.Definition.PplStorageManager"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.PplStorageManager.TestPlanDefIds">
            <summary>
            Gets the test plan def names.
            </summary>
            <value>The test plan def names.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.LoadTestPlanDef(System.String,System.String)">
            <summary>
            Loads the specified ID from a class or a file.
            If the Id matches a class the class wrapper is returned.
            Otherwise the PPL base path is searched for the id as filename
            </summary>
            <param name="id">The id: full path or fullname of a testplandef class.</param>
            <param name="additionalSearchPath">Optional: Additional path to search for files.</param>
            <returns>
            The loaded IDefiningTestPlanDef, if loading was possible
            </returns>
            <exception cref="T:ET.FW.PPL.Execution.PPLDefinitionException">
            GetTestPlanDef: Class  + typeName +  has no 'public static new void  + testPlanDefMethodName + (TestPlanDef)'
            or
            Unknown file format version  + sd.FileFormat
            </exception>
            <exception cref="T:ET.FW.PPL.Execution.PPLExecutionException">Thrown if calling FillTestPlanDef(..) on the created TestPlan failed (when using id as id) or
            if the file with the name id has the wrong FileFormat</exception>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.SaveAs(ET.FW.PPL.Definition.IDefiningTestPlanDef,System.String)">
            <summary>
            Saves the wrapper to a file, sets a default filename if not set or no earlier filename set.
            </summary>
            <param name="testPlanDef">The test plan def.</param>
            <param name="filename">The filename, may be null.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.Save(ET.FW.PPL.Definition.IDefiningTestPlanDef)">
            <summary>
            Saves the specified wrapper.
            </summary>
            <param name="testPlanDef">The test plan def.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.LoadTestSet(System.String)">
            <summary>
            Loads the wrapper from the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns>The test set from given file path</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplStorageManager.Save(ET.FW.PPL.Definition.ITestSet,System.String)">
            <summary>
            Saves the the testSeet
            </summary>
            <param name="testSet">The test set.</param>
            <param name="filename">The filename, may be null.</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestJobSaveData">
            <summary>
            Data for a test job definition
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.Name">
            <summary>job name</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.ClassName">
            <summary>Full class name of the job</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.ParentJob">
            <summary>Job is in a inner plan def of another job, empty for jobs in the main sequence</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.After">
            <summary>job waits for this jobs, empty if job runs as a first job. Separate job names with komma if job waits for more then one job. Only insert jobs with the same ParentJob entry.</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.InnerPlanName">
            <summary>Full Name of the inner Plan this subjob calls</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.RunType">
            <summary>RunType of the job</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.Timeout">
            <summary>Timeout of the job</summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestJobSaveData.ContinueFlags">
            <summary>Flag to specify the behaviour of the test plan containing this test job
            depending on appearance of errors in this job.</summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestSetSaveData">
            <summary>
            Data structure for serialization and deserialization of test sets.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSetSaveData.Name">
            <summary>Gets or sets the name of the test set</summary>
            <value>The test set name.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSetSaveData.FileFormat">
            <summary>Gets or sets the Format version counter.</summary>
            <value>The version number.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSetSaveData.Variants">
            <summary>List of Variants</summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.PplXmlFileHandling">
            <summary>
            Helper class to handle xml serialization and deserialzation for saving and loading files.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplXmlFileHandling.LoadFromFile``1(System.String)">
            <summary>
            Load a generic xml file structure
            </summary>
            <typeparam name="T">file structure</typeparam>
            <param name="fullname">file name</param>
            <returns>loade file in structure</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplXmlFileHandling.Clone``1(``0)">
            <summary>
            Clone a structure in memory
            </summary>
            <typeparam name="T">memory structure</typeparam>
            <param name="saveDataInput">input data</param>
            <returns>cloned output data</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.PplXmlFileHandling.SaveToFile``1(System.String,``0)">
            <summary>
            Save a generic xml file structure
            </summary>
            <typeparam name="T">file structure</typeparam>
            <param name="fullname">filen ame</param>
            <param name="saveData">data to save to file</param>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestPlanDefSaveData">
            <summary>
            Export Data class for TestPlanDef  
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.FileFormat">
            <summary>Gets or sets the Format version counter.</summary>
            <value>The version number.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.Name">
            <summary>Gets or sets the name.</summary>
            <value>The name.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.TestJobs">
            <summary>Gets or sets the test jobs.</summary>
            <value>The test jobs.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.ParamSets">
            <summary>Gets or sets the param sets.</summary>
            <value>The param sets.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.ParamLinks">
            <summary>Gets or sets the param links.</summary>
            <value>The param links.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestPlanDefSaveData.ParamExports">
            <summary>Gets or sets the param exports.</summary>
            <value>The param exports.</value>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestSet">
            <summary>
            List to define a batch execution of several TestVariants
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestSet"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.#ctor(ET.FW.PPL.Definition.TestSetSaveData,System.String)">
            <summary>
            The constructor
            </summary>
            <param name="sd">save data</param>
            <param name="loadedFromFile">file to load</param>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSet.Variants">
            <summary>
            The variants in this TestSet
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.AddVariant(ET.FW.PPL.Definition.ITestVariant)">
            <summary>
            Append a variant to the test set
            </summary>
            <param name="v">a test variant</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.ET#FW#PPL#Definition#ITestSet#SaveToFile(System.String)">
            <summary>
            Saves to file. If fullname is null, StorageFileName is used
            </summary>
            <param name="fullname">The fullname.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.ET#FW#PPL#Definition#ITestSet#Clone">
            <summary>
            Clone method
            </summary>
            <returns>an ITestSet</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.TestSetSaveData">
            <summary>
            Create test set save data structure
            </summary>
            <returns>data structure</returns>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestSet.LoadFromFile(System.String)">
            <summary>
            Loads from file.
            </summary>
            <param name="fullname">The fullname.</param>
            <returns>loaded testset</returns>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSet.StorageFileName">
            <summary>
            Gets or sets the name of the saved file or UnsavedTestSet.tset if not named
            </summary>
            <value>The name of the saved file.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestSet.Name">
            <summary>
            Get and set the test sets short name. Use StorageFileName for a persistent file name!
            Use this only for special cases, where StorageFileName does not include the Name
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestVariantSaveData">
            <summary>
            Data for the xml file
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariantSaveData.Name">
            <summary>Gets or sets the Format version counter.</summary>
            <value>The version number.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariantSaveData.FileFormat">
            <summary>Gets or sets the Format version counter.</summary>
            <value>The version number.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariantSaveData.TestPlanDefName">
            <summary>
            Gets or sets the name of the test plan def.
            </summary>
            <value>The name of the test plan def.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariantSaveData.TestJobParams">
            <summary>
            Gets or sets the test job params.
            </summary>
            <value>The test job params.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariantSaveData.TestPlanDefFileName">
            <summary>
            Gets or sets the filename of the TestPlanDef.<para></para>
            This property is only used if the variant uses a TestPlanDef loaded
            from a .TPDEF-File
            </summary>
            <value>
            The name of the test pan def file.
            </value>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestVariant">
            <summary>
            Test variant implementation
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.#ctor(ET.FW.PPL.Definition.TestVariantSaveData,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestVariant" /> class.
            </summary>
            <param name="sd">The TestVariantSaveData to be used to initialize this variant.</param>
            <param name="parentPath">The parent path.</param>
            <exception cref="T:ET.FW.PPL.Execution.PPLExecutionException">Cannot find test plan def ' + loadName + ';null</exception>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.#ctor(System.String,ET.FW.PPL.Definition.IDefiningTestPlanDef,ET.FW.PPL.Definition.JobParams)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestVariant"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="testPlanDef">The test plan def.</param>
            <param name="jobPathParams">The job path params.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestVariant"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.#ctor(System.String,ET.FW.PPL.Definition.JobParams)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Definition.TestVariant"/> class.
            </summary>
            <param name="testPlanDefName">Name of the test plan def.</param>
            <param name="jobPathParams">The job path params.</param>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.InitTestplanDefVariant(System.String,ET.FW.PPL.Definition.IDefiningTestPlanDef,ET.FW.PPL.Definition.JobParams)">
            <summary>
            Inits the TestVariant using the given testPlanDef
            </summary>
            <param name="name">The name.</param>
            <param name="testPlanDef">The test plan def.</param>
            <param name="jobPathParams">The job-params.</param>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariant.Name">
            <summary>
            Gets or sets the test plan def Name.
            </summary>
            <value>The test plan def Name.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariant.TestPlanDef">
            <summary>
            Gets or sets the test plan def.
            </summary>
            <value>The test plan def.</value>
        </member>
        <member name="P:ET.FW.PPL.Definition.TestVariant.JobPathParams">
            <summary>
            Gets or sets the job path params.
            </summary>
            <value>The job path params.</value>
        </member>
        <member name="M:ET.FW.PPL.Definition.TestVariant.TestplanDefVariantSaveData">
            <summary>
            Builds up the TestVariantSaveData which can be used to save this instance
            </summary>
            <returns>The created TestVariantSaveData</returns>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestVariantsSaveData">
            <summary>
            List to define a batch execution of several TestVariants
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Definition.TestPlanDefBase">
            <summary>
            Base class for TestPlanDef 
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobFullResult">
            <summary>
            Internal Result of the the test job. Worst result wins (biggest number) if subjobs have other results.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Initial">
            <summary>
            Internal, for subjobs handling - only occurs if no subjob has a result.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.DidNotRun">
            <summary>
            TestJob is Passive in current execution, or it is PreparedToRun, but was not yet executed - can be used to rerun the test from last state
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Killed">
            <summary>
            TestJob was aborted by user, timeout or system but did not send Ended Events
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.NotTested">
            <summary>
            TestJob started, but decided no to do any tests. Same handling as DidNotRun, but do not re-run later
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Success">
            <summary>
            TestJob reached the intended final state, all results within defined limits
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.FailedContinue">
            <summary>
            TestJob reached the intended final state, but some results are not within defined limits (details see log information)
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.FailedCancel">
            <summary>
            TestJob did not reach the intended final state, but is in an defined error state
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Damaged">
            <summary>
            TestJob did not reach the intended final state and is in an unknown state. No further tests should be done normally.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.AbortedSequence">
            <summary>
            TestJob was aborted by user, timeout or system but sent Ended Events, and test job requests to abort parent sequence
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Aborted">
            <summary>
            TestJob was aborted by user, timeout or system but sent Ended Events
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.Undefined">
            <summary>
            No Result available as job did not end yet.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobFullResult.NoValidResult">
            <summary>
            No valid result: Result has to be revalidated or method has not be overridden.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobResult">
            <summary>
            TestResults to be set in functional TestJobs
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobResult.NotTested">
            <summary>
            TestJob started, but decided no to do any tests. Same handling as Success
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobResult.Success">
            <summary>
            TestJob reached the intended final state, all results within defined limits
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobResult.FailedContinue">
            <summary>
            TestJob reached the intended final state, but some results are not within defined limits (details see log information)
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobResult.FailedCancel">
            <summary>
            TestJob did not reach the intended final state, but is in an defined error state
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobResult.Damaged">
            <summary>
            TestJob did not reach the intended final state and is in an unknown state. No further tests should be done normally.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobContinueFlags">
            <summary>
            Testjobs control information to change TestJobContinue default handling 
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.Default">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.SequenceAbortOnDamaged">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.SequenceAbortOnSuccess">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.FullAbortOnSuccess">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.SequenceAbortOnFailedContinue">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.FullAbortOnFailedContinue">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnAbortedSequence">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.FullAbortOnAbortedSequence">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnFailedCancel">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.FullAbortOnFailedCancel">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnInnerFailedCancel">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnInnerAbortedSequence">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnDamaged">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.ContinueOnUndefined">
            <summary>Andy: needed as aborts may cause undefined</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.SuccessResultOnInitial">
            <summary>Assume Success for combinedResult if combined result is Initial (no subjob had results)</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnSuccess">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnFailedContinue">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnFailedCancel">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnDamaged">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnNotTested">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobContinueFlags.IgnoreResultOnAbortedOrKilled">
            <summary>Do not use the result for combinedResult if result is ...</summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobRunType">
            <summary>
            A parent job will wait for subJobs if they are "Foreground Jobs"
            A parent job will signal DoEnd to "Background Jobs" when all "Foreground Jobs" have ended.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobRunType.Foreground">
            <summary>
            Foreground job: Testplan ends when last foreground job ended
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobRunType.Background">
            <summary>
            Background job: When testplan ends all still running jobs will get a EndExecution() call and they should terminate
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobState">
            <summary>
            Jobs states for user information 
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobState.Ready">
            <summary>
            Waiting
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobState.Executing">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ET.FW.PPL.TestJobState.Done">
            <summary>
            Terminated
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.BasicLoggingTestJob">
            <summary>
            Contains logging functionality
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogDebug(System.String)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogInfo(System.String)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogWarn(System.String)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogWarn(System.String,System.Exception)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogError(System.String)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicLoggingTestJob.LogError(System.String,System.Exception)">
            <summary>
            Send message to the TestJob Log object
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicLoggingTestJob.Log">
            <summary>
            Generic TestJob logger object
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicLoggingTestJob.LogLogger">
            <summary>
            Generic TestJob logger object
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.DefinedMacroTestJob">
            <summary>
            Create a MacroTestJob (job sequence) from a test plan def
            </summary>
            <remarks>
            The jobs will know nothing about the test plan, they only know the jobs they have to wait for.
            Alle job names will be handled in the testjobdef, and only the testjobdef will know about the
            properties a job has.
            </remarks>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedMacroTestJob.InitFromTestJobDef(ET.FW.PPL.Definition.IReadOnlyTestJobDef,ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            References the given IReadOnlyTestJobDef, rembmers the given jobNames,
            dereferences and disposes, if neccessary, the existing EventDecoupler m_decoupler
            and creates a new ObservableObject for the Enabled-Property. Furthermore the Timeout 
            and the ContinueFlags are set and this DefinedTestJob is added to the NamesJobsCollection jobNames.
            Finally the JobSequence is made for jobDef.InnerPlanDef.
            </summary>
            <param name="jobDef">The TestJobDefinition defining this TestJob.</param>
            <param name="jobNames">Names of TestJobs visible to this one.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedMacroTestJob.MakeJobSequence(ET.FW.PPL.Execution.NamedJobsCollection,ET.FW.PPL.Definition.IReadOnlyTestPlanDef)">
            <summary>
            Builds the jobs defined in innerPlanDef.TestJobDefs and sets the After-Links afterwards.<para></para>
            All created jobs are added to jobNames.
            </summary>
            <param name="jobNames">Collection to be filled with the jobs being created.</param>
            <param name="innerPlanDef"></param>
        </member>
        <member name="T:ET.FW.PPL.Execution.DefinedTestJob">
            <summary>
            Class containing methods for creation test jobs from testjob defs
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedTestJob.FromTestJobDefType(ET.FW.PPL.Definition.IReadOnlyTestJobDef)">
            <summary>
            Creates a new Instance of the Type defined in jobDef.Type and returns this as
            ImplementingTestJob.
            </summary>
            <param name="jobDef">The definition of the TestJob.</param>
            <returns>An instance of ImplementingTestJob or NULL, if none could be created.</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedTestJob.InitFromTestJobDef(ET.FW.PPL.Definition.IReadOnlyTestJobDef,ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            References the given IReadOnlyTestJobDef, remembers the given jobNames,
            dereferences and disposes, if neccessary, the existing EventDecoupler m_decoupler
            and creates a new ObservableObject for the Enabled-Property. Furthermore the Timeout
            and the ContinueFlags are set and this DefinedTestJob is added to the NamesJobsCollection jobNames.
            </summary>
            <param name="tjd">The TestJobDefinition defining this TestJob.</param>
            <param name="jobNames">Names of TestJobs visible to this one.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedTestJob.SetParam(System.String,System.Object)">
            <summary>
            Sets the param of the job, i.e. a new ObservableObject containing the object passed as value is
            created and assigned to the property named param.
            </summary>
            <param name="param">Name of the Property to set.</param>
            <param name="value">The value the new ObservableObject assigned to the property param shall have.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.DefinedTestJob.SetLink(System.String,ET.FW.PPL.Execution.DefinedTestJob,System.String)">
            <summary>
            Links this.param to sourceJob.sourceParam
            </summary>
            <param name="param">The name of the property of this TestJob.</param>
            <param name="sourceJob">The source job.</param>
            <param name="sourceParam">The name of the property within sourceJob.</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.PPLException">
            <summary>
            Exception on error in test plan definition structure (invalid properties and other logical checks)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLException.#ctor(System.String)">
            <summary>
            common exception in PPL module
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLException.#ctor(System.String,System.Exception)">
            <summary>
            common exception in PPL module
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.PPLDefinitionException">
            <summary>
            Exception on error in test plan definition structure (invalid properties and other logical checks)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLDefinitionException.#ctor(System.String)">
            <summary>
            Exception on error in test plan definition structure (invalid properties and other logical checks)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.PPLExecutionException">
            <summary>
            Exception in functional tests or definition code (exception in user defined code)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLExecutionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Exception in functional tests or definition code (exception in user defined code)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Exception in functional tests or definition code (exception in user defined code)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PPLExecutionException.#ctor(System.String)">
            <summary>
            Exception in functional tests or definition code (exception in user defined code)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.ComplexTestJobBase">
            <summary>
            Default Class for Testjobs that might create Sub-Testjobs (by ExecAndWait or in Prepare)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.Prepare">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.Execute">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.ExecuteFinally">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.ExecEnded(ET.FW.PPL.TestJobResult)">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.EndExecution(System.Boolean)">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ComplexTestJobBase.Cleanup">
            <summary>
            Implement StandardTestJobBase
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.ExecuteTestJob">
            <summary>
            Class for asyncronous (multi threaded) Execute() calls.
            while (not_ended)
            	doExecute() -> calls Execute()
            sendEndedEvents();
            doExecute ends either if
             1. Execute returns true or
             2. ExecEnds is called
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoPrepareImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoExecImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoExecEndedImpl(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoExecPrepareImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.DoCleanupImpl">
            <summary>
            Extends ImplementingTestJob
            Exceptions are ignored but reported
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ExecuteTestJob.GetCombinedTestResult">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.BasicTestJob">
            <summary>
            Base class for Test jobs, defines data and initialization
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.BasicTestJob"/> class. Will only be used on testjobs created from testjobs.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.InitFromTestJobDef(ET.FW.PPL.Definition.IReadOnlyTestJobDef,ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            References the given IReadOnlyTestJobDef, rembmers the given jobNames,
            dereferences and disposes, if neccessary, the existing EventDecoupler m_decoupler
            and creates a new ObservableObject for the Enabled-Property.
            </summary>
            <param name="tjd">The TestJobDefinition defining this TestJob.</param>
            <param name="jobNames">Names of TestJobs visible to this one.</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.RequiredState">
            <summary>
            The defined state which is required for execution.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicTestJob.LastRegisteredState">
            <summary>
            The last state which was registered
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.MatchesRequiredState">
            <summary>
            Flag indicating, whether the last received state matches
            the one defined as required.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicTestJob.HasRequiredState">
            <summary>
            Flag, whether RequiredState has been defined.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.TestJobDef">
            <summary>
            Gets the test job def this job was created from.
            </summary>
            <value>The test job def.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.JobNamesInThisPlan">
            <summary>
            Job names from the current test plan (within test plan visibility).
            Tests for allowed links are made within the TestPlanDef class functionality
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.GetTestJobConfig">
            <summary>
            Gets the test job config.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.JobConfig">
            <summary>
            Gets the job config settings.
            </summary>
            <value>The job config.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.Name">
            <summary>
            Job name to display in logging
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.CurrentStateInput">
            <summary>
            Gets or sets a value what the current state is.<para></para>
            Must be linked, if RequiredState is set.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.CurrentStateInputEventHandler(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{System.String})">
            <summary>
            Determines with the new state, if this TestJobs requirements concerning the state are
            fulfilled.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ET.FW.PPL.Execution.BasicTestJob"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.IsEnabled">
            <summary>
            Testjob will run
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.IsEnabled(System.Boolean)">
            <summary>
            Checks, whether the TestJob will run incl. hierarchical
            checks.
            </summary>
            <param name="checkParents"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.IsConfiguredPassive(System.Boolean)">
            <summary>
            Checks, whether this TestJob is configured as passive
            </summary>
            <param name="checkParents"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.FulfillsRequiredState">
            <summary>
            Returns whether this TestJob can run depending on the required state, which is,
            when no required state was defined or if the state defined as required is currently
            set.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicTestJob.parentJob">
            <summary>
            The parent Job, i.e. the one hierarchical above this one.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.Aborted">
            <summary>
            Flag which must be set to true, when the TestJob is being aborted.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.GetJobId(System.Boolean)">
            <summary>
            Gets the job id, i.e. it's name with replaced blanks, :, . and -.<para></para>
            Should be overwritten, if further informations, e.g. loop-counts, shall be part of the id.
            </summary>
            <param name="dynamic">include runtime parameters (loop counts etc) in the id, static name info otherwise</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.GetPathId(System.Boolean)">
            <summary>
            Gets the job execution path information as id.
            </summary>
            <param name="dynamic">include runtime parameters (loop counts etc) in the id, static name info otherwise</param>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.RunType">
            <summary>
            test job foregrund/background setting
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.DoEndExecution(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Sends a terminate request to the job
            </summary>
            <param name="newResult">The new result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.AddInput``1(ET.FW.Core.Common.IReadOnlyObservableObject{``0},ET.FW.PPL.ObservableObjectHelper{``0}@,ET.FW.Core.Common.ValueChangedEventHandler{``0},System.Boolean)">
            <summary>
            Adds the ObservableObject to an observableObjectHelper variable.
            The observableObjectHelper is initialized on first usage. For examples see PPLDemo ExampleJob
            </summary>
            <typeparam name="T">The type of the class encapsulated in the observable object</typeparam>
            <param name="anOO">the object that sends data</param>
            <param name="ooHelper">the ObservableObjectHelper instance, may be uninitialized(null)</param>
            <param name="ooEventHandler">The oo event handler, may be null if no event handler is used</param>
            <param name="activeOnExecute">if set to <c>true</c> events are activated when execution starts (only set once when ooHelper==null)</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.AddInput``1(ET.FW.Core.Common.IReadOnlyObservableObject{``0},ET.FW.PPL.ObservableObjectHelper{``0}@,ET.FW.Core.Common.ValueChangedEventHandler{``0},System.Boolean,System.Boolean)">
            <summary>
            Adds the ObservableObject to an observableObjectHelper variable.
            The observableObjectHelper is initialized on first usage. For examples see PPLDemo ExampleJob
            </summary>
            <typeparam name="T">The type of the class encapsulated in the observable object</typeparam>
            <param name="anOO">the object that sends data</param>
            <param name="ooHelper">the ObservableObjectHelper instance, may be uninitialized(null)</param>
            <param name="ooEventHandler">The oo event handler, may be null if no event handler is used</param>
            <param name="activeOnExecute">if set to <c>true</c> events are activated when execution starts (only set once when ooHelper==null)</param>
            <param name="alwaysActive">requires: activeOnExecute == FALSE; defines: event active while TestJob-object is alive.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.AddInput``1(ET.FW.Core.Common.IReadOnlyObservableObject{``0},ET.FW.PPL.ObservableObjectHelper{``0}@,ET.FW.Core.Common.ValueChangedEventHandler{``0})">
            <summary>
            Adds the ObservableObject to an observableObjectHelper variable.
            The observableObjectHelper is initialized on first usage. For examples see PPLDemo ExampleJob.
            Events are active when execution starts
            </summary>
            <typeparam name="T">The type of the class encapsulated in the observable object</typeparam>
            <param name="anOO">the object that sends data</param>
            <param name="ooHelper">the ObservableObjectHelper instance, may be uninitialized(null)</param>
            <param name="ooEventHandler">The oo event handler, may be null if no event handler is used</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.AddInput``1(ET.FW.Core.Common.IReadOnlyObservableObject{``0},ET.FW.Core.Common.ValueChangedEventHandler{``0})">
            <summary>
            Adds the ObservableObject and registers the event handle.
            Any new AddInput call creates another anonymous ObservableObjectHelper,
            so you should use this only for parameters that are set once! For examples see PPLDemo ExampleJob
            </summary>
            <typeparam name="T">The type of the class encapsulated in the observable object</typeparam>
            <param name="anOO">the object that sends data</param>
            <param name="ooEventHandler">The oo event handler, may be null if no event handler is used</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.NewObservableObjectHelper``1(ET.FW.Core.Common.ValueChangedEventHandler{``0})">
            <summary>
            Get a new ObservableObjectHelper instance for this TYPE, linked to the test job
            </summary>
            <typeparam name="T">Generic TYPE of the ObservableObject</typeparam>
            <param name="changedHandler">Event handling method for this event</param>
            <returns>new ObservableObjectHelper(of)TYPE instance</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.RegisterObservable(ET.FW.PPL.Execution.IObservableObjectHelper)">
            <summary>
            Adds the observableObjectHelper to m_observables, which is being created if null.
            </summary>
            <param name="observableObjectHelper"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.ActivateObservableObjectEvents">
            <summary>
            Activates the events of those ObservableObjects being hosted by this TestJob.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.DeactivateObservableObjectEvents">
            <summary>
            Deactivates the events of those ObservableObjects being hosted by this TestJob
            and disposes this jobs' EventDecoupler
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicTestJob.Decoupler">
            <summary>
             Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.Dispose">
            <summary>
            Shutdown decoupler
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicTestJob.CmVersionString">
            <summary>
            Implement ITestJob
            </summary>
            <returns>Full path and Version</returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobStateChangedEvent">
            <summary>
            TestJobState changed event
            </summary>
            <param name="job">The jobs whose state changed</param>
            <param name="newState">The new TestJobState of the job</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.ControllingTestJob">
            <summary>
            Implementation of an abstract test job for the controlling system. Derived Classes may define
            inner processing overriding xxImpl() methods.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState">
            <summary>
            Internal State Handling
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.Initial">
            <summary>
            Default-Value before anything has been done.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.PostPrepare">
            <summary>
            Preparations have been completed.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.PreExecute">
            <summary>
            Is set in DoExecPrepare().
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.Execute">
            <summary>
            Is set, after final Execute-preparations, like enabling ObservableObject-events,
            have been done.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.PostExecute">
            <summary>
            Is set, when Execute is done and the job is finishing
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.BaseStepState.Done">
            <summary>
            Set after PostExecute is completed
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.executingThread">
            <summary>
            Thread that works on Execute() for aborts<para></para>
            Internally also used as indicator, whether this TestJobs is currently executed.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.changeLock">
            <summary>
            locking object for thread synchronization
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.notRunningFlag">
            <summary>
            Event being used to indicate, that this job's Execution is active.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.currentTestJobExecutionStateMember">
            <summary>
            current phase of execution.<para></para>
            Use <see cref="P:ET.FW.PPL.Execution.ControllingTestJob.currentTestJobExecutionState"/>
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.currentTestJobExecutionState">
            <summary>
            current phase of execution
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.repeatCount">
            <summary>
            current repeat cout, increases for each execution within a loop or other invocations
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.ExecSingleCall">
            <summary>
            Job has no prepare, just runs once
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.InitFromTestJobDef(ET.FW.PPL.Definition.IReadOnlyTestJobDef,ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            References the given IReadOnlyTestJobDef, remembers the given jobNames,
            dereferences and disposes, if neccessary, the existing EventDecoupler m_decoupler
            and creates a new ObservableObject for the Enabled-Property. Furthermore the Timeout
            and the ContinueFlags are set.
            </summary>
            <param name="tjd">The TestJobDefinition defining this TestJob.</param>
            <param name="jobNames">Names of TestJobs visible to this one.</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.CurrentTestJobExecutionState">
            <summary>
            Get-Property for currentTestJobExecutionState<para></para>
            Note: could be renamed. Name CurrentTestJobExecutionState is misleading
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.Passive">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.PPL.Execution.ControllingTestJob"/> is passive.
            </summary>
            <value><c>true</c> if passive; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.passive">
            <summary>
            passive or active job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.HierarchyLevel">
            <summary>
            Gets or sets the hierarchy level. The Outermost Plan is level 0, each loop/subplancontaining job increases by 1.
            </summary>
            <value>The hierarchy level.</value>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.successiveJobs">
            <summary>
            Jobs that need information when this job ends
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.precedingJobsDebug">
            <summary>
            Jobs running before the job, they have to end before this job starts
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.precedingJobsCountup">
            <summary>
            Counter used to count, how many TestJobs defined as preceding this one have already ended.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.eventsRegistered">
            <summary>
            Indicates on test-execution, whether jobs have been registered to be informed, of this job's end.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.AddSuccessiveJob(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Adds a job which will become informed about the end of this jobs execution.
            </summary>
            <param name="job">The successive job</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.Description">
            <summary>
            Gets the description of the Testjob.
            </summary>
            <value>
            a string with the description.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.PreConditionDescription">
            <summary>
            Gets Description of the precondition.
            </summary>
            <value>
            a String with the desciption of the precondition.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.PostConditionDescription">
            <summary>
            Gets Description of the postcondition.
            </summary>
            <value>
            a String with the desciption of the postcondition.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.RequiredConfiguration">
            <summary>
            Gets Description of the Required Configuration.
            </summary>
            <value>
            a String with the desciption of the Required Configuration.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.Objective">
            <summary>
            Gets Description of the objective of this plan.
            </summary>
            <value>
            a String with the desciption of the objective.
            </value>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.testplanPrecedingJobs">
            <summary>
            Preceeding jobs needed to terminate (state Ended) current job ist starting (becoming Active).<para></para>
            This List is being filled by the testplan, i.e. by the .SetAfter(...)-calls.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.StartsAfter(ET.FW.PPL.Execution.DefinedTestJob)">
            <summary>
            Add a job into the main job sequence: this jobs have to end before parent jobs or test plan ends
            </summary>
            <param name="job">The job which has to end before this one starts.</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.TestResult">
            <summary>
            Test Result for the job, valid after the job ended
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.testResult">
            <summary>
            Gets or sets the test result.
            </summary>
            <value>
            The test result.
            </value>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.didNotRunBecauseRequiredStateNotFulfilled">
            <summary>
            Flag which must be set to true, if the execution of this testjobisnot performed, because the
            RequiredState is not set, otherwise false.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.Result">
            <summary>
            Result of the test job as ObservableObject, valid only after job ended!
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.ContinueResult">
            <summary>
            TestJobs intention what should happen after it ends. Job may set this result
            depending on TestJobResult.<para></para>
            If set to TestJobContinue.Undefined, the ContinueResult is determined by calling <see cref="M:ET.FW.PPL.Execution.ControllingTestJob.GetContinueResult"/>
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.ContinueFlags">
            <summary>
            Change default continue handling depending on test result
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.TestContinueFlag(ET.FW.PPL.TestJobContinueFlags)">
            <summary>
            Tests if the continue flag is set in the testjob.
            </summary>
            <param name="flag">The flag.</param>
            <returns>TRUE if the flag is set, FALSE otherwise</returns>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.continueResult">
            <summary>
            The ContinueResult.<para></para>
            If set to TestJobContinue.Undefined the property <see cref="P:ET.FW.PPL.Execution.ControllingTestJob.ContinueResult"/> determines
            the continueResult by calling <see cref="M:ET.FW.PPL.Execution.ControllingTestJob.GetContinueResult"/>
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.GetContinueResult">
            <summary>
            Processes the set testResult and the set continueFlags to
            determine the TestJobContinue-value which is being returned.
            </summary>
            <returns>see summary</returns>
        </member>
        <member name="F:ET.FW.PPL.Execution.ControllingTestJob.precedingJobs">
            <summary>
            Those TestJobs preceding this one, i.e. those TestJobs, for whose ends this one waits.<para></para>
            This list is used while this TestJob is being executed and waiting for the ends of its' preceding jobs.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.PrecedingJobs">
            <summary>
            Those TestJobs preceding this one, i.e. those TestJobs, for whose ends this one waits.<para></para>
            This list is used while this TestJob is being executed and waiting for the ends of its' preceding jobs.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoPrepare">
            <summary>
            Tells the test job to prepare for execution. Job might build internal
            data structures.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoPrepareSingleCall(ET.FW.PPL.TestJobRunType)">
            <summary>
            Prepare the single test job for execution within Execute(). The job
            does not get a normal DoPrepare().
            </summary>
            <param name="runType">the TestJobRunType for this job.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoExecPrepare">
            <summary>
            Prepare the test job for Execution before first call of DoExecute and
            before any other call of DoExecute after test job termination.
            Use it to (re-)set internal values to start or default content.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoExecute">
            <summary>
            Starts the execution for this test job. If the test job has to wait
            for other jobs, it has to setup events and wait. A job can exit from
            DoExecute() when he has nothing to do. A job is restarted again
            by Start(), which will invoke DoExecute() in another thread.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.Start">
            <summary>
            Invokes DoExecute on a job. If DoExecute is still running, a single new
            invocation happens after DoExecute ended, even on multiple Start() calls.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoCleanup">
            <summary>
            Tells the test job to cleanup after test plan execution.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoExecEnded(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Notifies the system that the testing has terminated and terminates the job.
            Might be called from within Execute(), then test job terminates when
            Execute() ends - please return directly after the ExecEnded() call.
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.ExecEndedWithOutLock(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Execs the ended with out lock.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoEnd">
            <summary>
            Tells a test job to terminate testing. If the job is not started or if it
            already ended the job is left unchanged (for a new run of remaining jobs).
            Running jobs are expected to define a test result. The job must inform
            about its termination as if it terminated during Execute().
            This is the standard termination method for background jobs.
            Expect this method to be called from a thread different from m_execThread
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoAbort">
            <summary>
            Tells a job to terminate execution and to set the test result to aborted.
            If the job is not started or if it already ended the job is left unchanged
            (but not for restart). The job MUST inform other jobs that it ended.
            This is the termination method to propagate user aborts into the test plan.
            Expect this method to be called from a thread different from m_execThread
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoKill">
            <summary>
            Tells a job to terminate execution without setting a test result.
            If the job is not started or if it already ended the job is
            left unchanged (for a new run of remaining jobs).
            The job MUST NOT inform other jobs that it ended.
            This is the termination method on timeout and test plan aborts because of test results.
            Expect this method to be called from a thread different from m_execThread
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.DoEndExecution(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Tells a test job to terminate testing. If the job is not started or if it
            already ended the job is left unchanged (for a new run of remaining jobs).
            Running jobs are expected to define a test result. The job must inform
            about its termination as if it terminated during Execute().
            </summary>
            <param name="newResult">The new result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.ExecuteStateStarts">
            <summary>
            Starting actions when execute state is switched on
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.ExecuteStateEnded">
            <summary>
            Finalizing actions when execute state is switched off (job termination)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.RegisterSuccessorsOnEndedEvent">
            <summary>
            Registers the eventhandlers of those job, which need to be informed, when this one ends.
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.ControllingTestJob.Ended">
            <summary>
            Event is sent when this TestJob ended. May be used to synchronize with parent m_testJob.
            This event is being raised after the EndedWithPriority-Event.
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.ControllingTestJob.EndedWithPriority">
            <summary>
            Event is sent when this TestJob ended. May be used to synchronize with parent m_testJob.<para></para>
            This event is being raised before the Ended-Event.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.SendEndedEvent">
            <summary>
            Sends the ended event.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.WaitUntilEnded">
            <summary>
            Waits until job ended (thread save)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.PrecedingJobEndedHandler(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobFullResult)">
            <summary>
            Wait for an event from a preceding m_testJob. The jobs starts if all preceding testJobs ended
            </summary>
            <param name="preJob">The pre job.</param>
            <param name="fullTestResult">The test result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.OnTimeout(System.DateTime)">
            <summary>
            Called by timer after a timeout on this job. Timeout should do an ExecEnded(Aborted)
            </summary>
            <param name="time">the time</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.ImplementingFromControllingTestJob">
            <summary>
            Get the test job implementation for this job
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.ControllingTestJob.StateChanged">
            <summary>
            Send an state changed event when:
            - job starts executing (executing)
            - job ends executing (done)
            - jobs prepared for restart (ready)
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.StateChangedEvent(ET.FW.PPL.TestJobState)">
            <summary>
            Sets State to the given newState and raises an event to inform listeners
            about this change. <para></para>
            Note 1: the event is also risen, if newState equals the previously set State
            Note 2: this method could be renamed as its' name is misleading.
            </summary>
            <param name="newState">the new state</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.StateInfo">
            <summary>
            User information about the current job status, can contain internal information to display to the user
            </summary>
            <returns>the state string</returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.ControllingTestJob.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
            <value></value>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.FillJobSequence(System.Int32,System.String,ET.FW.PPL.Execution.JobSequenceDictionary,ET.FW.PPL.Execution.ControllingTestJob,System.Collections.Generic.List{ET.FW.PPL.Execution.BasicTestJob})">
            <summary>
            Add this job to the job sequence list.
            </summary>
            <param name="level">the hierarchy level of the job, starting with 0 in the most outer plan</param>
            <param name="prefix">The prefix.</param>
            <param name="jobSequence">The job sequence.</param>
            <param name="parentTestJob">The parent job.</param>
            <param name="fullJobList">List with all Jobs, including those not in jobSequence.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ControllingTestJob.ShowJobStatus">
            <summary>
            Shows the job status.
            </summary>
            <returns>always true</returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.BasicThreadedTestJob">
            <summary>
            Adds Thread functionality (start, timeout queue) to a BasicTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.InitFromTestJobDef(ET.FW.PPL.Definition.IReadOnlyTestJobDef,ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            References the given IReadOnlyTestJobDef, rembmers the given jobNames,
            dereferences and disposes, if neccessary, the existing EventDecoupler m_decoupler
            and creates a new ObservableObject for the Enabled-Property. Furthermore the Timeout is set.
            </summary>
            <param name="tjd">The TestJobDefinition defining this TestJob.</param>
            <param name="jobNames">Names of TestJobs visible to this one.</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.BasicThreadedTestJob.Timeout">
            <summary>
            Sets the timeout.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.TimeoutChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{System.UInt32})">
            <summary>
            The Timeout has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.Start(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Executes the given job using the JobThreadPool.
            </summary>
            <param name="job">The controlling test job</param>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicThreadedTestJob.mTimeoutms">
            <summary>
            Timeout time in ms, value == 0 means no mTimeout
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.SetTimeout(System.UInt32)">
            <summary>
            Timeout value from start execution to end. Will not change
            the timeout for a running execution!
            </summary>
            <param name="aTimeoutms">timeout time in ms; 0 for no timeout</param>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicThreadedTestJob.mTimeout">
            <summary>
            Timeout time as returned from TimerList for an active mTimeout.
            Used to idicate, whether a timeout has been registered at JobThreadPool
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.RegisterTimeout">
            <summary>
            Registers the timeout at JobThreadPool
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.UnregisterTimeout">
            <summary>
            If a timeout has  been registered at JobThreadPool it is being removed.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.OnTimeout(System.DateTime)">
            <summary>
            Abstract method which is being called from JobThreadPool, if the timeout
            for this TestJob has been reached.
            </summary>
            <param name="time">the time</param>
        </member>
        <member name="F:ET.FW.PPL.Execution.BasicThreadedTestJob.sleepTimeout">
            <summary>
            Timeout time returned from JobThreadPool when performing a wait.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.WaitOne(System.Int32,System.Threading.WaitHandle)">
            <summary>
            Sleep the given milliseconds. Use the internal framework timer, does not use the system timer.
            This allows batch processing of trace files. Returns if wait handle got a signal, false if timeout occured
            </summary>
            <param name="milliseconds">Milliseconds to wait, Timeout.Infinite if no timeout given</param>
            <param name="waitHandle">The wait handle to wait for</param>
            <returns>true if wait handle got a signal, false if timeout occurred</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.WaitInternal(System.TimeSpan,System.Threading.WaitHandle)">
            <summary>
            Sleep the given milliseconds. Use the internal framework timer, does not use the system timer.
            This allows batch processing of trace files. Returns if wait handle got a signal, false if timeout occured
            </summary>
            <param name="time">The maximum wait time.</param>
            <param name="waitHandle">The wait handle to wait for or null if not handle needed.</param>
            <returns>
            true if wait handle got a signal, false if timeout occurred
            </returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.WaitOne(System.TimeSpan,System.Threading.WaitHandle)">
            <summary>
            Waits for the wait handle.
            </summary>
            <param name="timespan">The timespan.</param>
            <param name="waitHandle">The wait handle.</param>
            <returns>the result</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.OnSleepExpired(System.DateTime)">
            <summary>
            Called, after a wait has been finished. Sets the sleepTimeoutEvent and resets sleepTimeout.
            </summary>
            <param name="time">the time</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.Sleep(System.UInt32)">
            <summary>
            Sleeps the specified milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.BasicThreadedTestJob.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the specified timespan.
            </summary>
            <param name="timespan">The timespan.</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.LoopTestJobBase">
            <summary>
            Loops over the jobDefs until enterLoop is false
            LoopDelegate should be defined as: delegate (int currentLoopCount) { return true; }
            First enterLoop call has a currentLoopCount of "1".
            Without parameters this loop will run one (1) time.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.ResetResultWhenExecutingAgain">
            <summary>
            Reset the result of a previous execution, when this Job is executed again, e.g. in a loop.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.DoExecImplPrepareIteration">
            <summary>
            Method which is called before the next loop-iteration is started.<para></para>
            This method becomes only called, if a loop-iteration will be executed after
            DoExecPrepare() has been called
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.DoExecImplCleanupIteration">
            <summary>
            Method which is called after the execution of a loop-iteration has been finished.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.StateInfo">
            <summary>
            User information about the current job status, can contain internal information to display to the user
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.GetJobId(System.Boolean)">
            <summary>
            Gets the job id.
            </summary>
            <param name="dynamic">include runtime parameters (loop counts etc) in the id, static name info otherwise</param>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.LoopCount">
            <summary>
            Parameter: current loop, starts with 1
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.DoLoop">
            <summary>
            Bool value for external Loop control. Setting this parameter disables the MaxLoop control
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.NextLoopCount">
            <summary>
            Parameter for Loop control. Value is changed before internal test plan starts in the current interation so a testjob
            can set the DoLoop-Flag to false
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.MaxLoop">
            <summary>
            Parameter for Loop control. Value is read before loop starts and cannot be changed during loop execution
            Parameter is disabled when DoLoop parameter is set
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.MaxLoopTime">
            <summary>
            Parameter for Loop control. Value is read before loop starts and cannot be changed during loop execution
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.LoopTestJobBase.DoIf">
            <summary>
            Parameter for Loop control. Value is read before loop starts and cannot be changed during loop execution
            Parameter is disabled when DoLoop parameter is set
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.DoAbortSequence">
            <summary>
            Aborts this sequence
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.LoopTestJobBase.CmVersionString">
            <summary>
            Implement ITestJob
            </summary>
            <returns>Full path and Version</returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.IObservableObjectHelper">
            <summary>
            Interfaces for event register/deregister methods
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.IObservableObjectHelper.DeactivateEventsAfterExecute">
            <summary>
            Unregister added input events
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.IObservableObjectHelper.DeactivateEvents">
            <summary>
            Deactivate events
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.IObservableObjectHelper.ActivateEventsOnExecute">
            <summary>
            This method activates the Changed-event, if this
            shall be automatically done.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.ObservableObjectHelperBase`1">
            <summary>
            Object helps to handle ObservableObject events during execution states:
            - Enable / Disable events
            - Re-register event handler when observableObject changes
            - Receive events from multiple Observable Objects
            </summary>
            <typeparam name="T">Type of IReadOnlyObservableObject to control</typeparam>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.#ctor(ET.FW.Core.Common.ValueChangedEventHandler{`0},System.Boolean)">
            <summary>
            Instantiate helper object with an event handler delegate
            </summary>
            <param name="changedHandler">Handler to be called, when the ObservableObject has changed.</param>
            <param name="automaticallyActivateChangedEventOnExecute">Flag to define, whether the Changed-Event shall be autmatically activated, when the TestJob owning the ObservableObject becomes executed (TRUE),
            or not (FALSE) which requires handling the activation of the events within the owning TestJob itself.
            </param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.#ctor(ET.FW.Core.Common.ValueChangedEventHandler{`0},System.Boolean,System.Boolean)">
            <summary>
            Instantiate helper object with an event handler delegate
            </summary>
            <param name="changedHandler">Handler to be called, when the ObservableObject has changed.</param>
            <param name="automaticallyActivateChangedEventOnExecute">Flag to define, whether the Changed-Event shall be autmatically activated, when the TestJob owning the ObservableObject becomes executed (TRUE),
            or not (FALSE) which requires handling the activation of the events within the owning TestJob itself.
            </param>
            <param name="eventsAlwaysActive">requires: automaticallyActivateChangedEventOnExecute == false; defines: event activated immediately and not deactivated after execution. </param>
        </member>
        <member name="F:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.m_changedHandler">
            <summary>
            Eventhandler to be called, if a change has been performed
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.eventsAreActive">
            <summary>
            Flag indicating, whether the ChangeEvent is active or not.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.automaticallyActivateChangedEventOnExecute">
            <summary>
            Flag, whether to automatically activate the ChangedEvent if ActivateEventsOnExecute() is called.
            TRUE to do so, FALSE to activate events manually.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.dataLock">
            <summary>
            Lock-Object
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.AddSource(ET.FW.Core.Common.IReadOnlyObservableObject{`0})">
            <summary>
            Add an observable object as observed sender to this helper
            </summary>
            <param name="objectToObserve"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.RemoveSource(ET.FW.Core.Common.IReadOnlyObservableObject{`0})">
            <summary>
            Remove an observable object as observed sender to this helper
            </summary>
            <param name="objectNotToObserveAnymore"></param>
        </member>
        <member name="P:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.Count">
            <summary>
            Returns the number of Observable Objects this helper listens to
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.observedObjectsList">
            <summary>
            List of those objects, which shall be registered at the changed-event.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.Value">
            <summary>
            Get the value of the current observableObject, default(TYPE) if no (0) or more than 1 OObject is registered,
            use "Count" to check number of OObjects.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.ActivateEventsOnExecute">
            <summary>
            This method activates the Changed-event, if this
            shall be automatically done.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.ActivateEvents">
            <summary>
            Register added input events
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.DeactivateEventsAfterExecute">
            <summary>
            Unregister added input events
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ObservableObjectHelperBase`1.DeactivateEvents">
            <summary>
            Deactivate the events
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.ImplementingTestJob">
            <summary>
            Extends a m_testJob that knows of preceding jobs and will only start its execution when
            all preceding jobs have finished Execute() (this sends an Ended event).
            The job expects all successive jobs (running m_testJobRunsAfter he ended) to register in its
            successiveJobsList during Prepare(), so it can register them to its Ended event on execution;
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoPrepareImpl">
            <summary>
            Tells the test job to prepare for execution. Job might build internal
            data structures.
            </summary>
            <returns>false for a passive testjob, true if active job</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoExecImpl">
            <summary>
            Starts the execution for this test job. If the test job has to wait
            for other jobs, it has to setup events and wait. A job can exit from
            DoExecute() when he has nothing to do. A job is restarted again
            by Start(), which will invoke DoExecute() in another thread.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoExecuteFinallyImpl">
            <summary>
            Called when test jobs execution ends (status, not method). Deregister your ressources here.
            Will be called even when there was an exception in DoExecInternal.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoExecEndedImpl(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Notifies the system that the testing has terminated and terminates the job.
            Might be called from within Execute(), then test job terminates when
            Execute() ends - please return directly after the ExecEnded() call.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            Tells a job to terminate execution without setting a test result.
            If the job is not started or if it already ended the job is
            left unchanged (for a new run of remaining jobs).
            The job MUST NOT inform other jobs that it ended.
            If job does not set test result (default: Killed) the Job will be terminated by Thread.Abort()
            This is the termination method on timeout and test plan aborts because of test results.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoExecPrepareImpl">
            <summary>
            Prepare the test job for Execution before first call of DoExecute and
            before any first call of DoExecute after test job termination.
            Use it to (re-)set internal values to start or default content.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.DoCleanupImpl">
            <summary>
            Tells the test job to cleanup after test plan execution.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ImplementingTestJob.GetCombinedTestResult">
            <summary>
            Returns a TestJobResult according to the test job implementation
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.ImplementingTestJob.ControllingTestJob">
            <summary>
            Returns this TestJob casted to ControllingTestJob
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ImplementingTestJob.FunctionalTestJob">
            <summary>
            Returns this TestJob as StandardTestJobBase
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ImplementingTestJob.ImplementingFromFunctionalityTestJob">
            <summary>
            Retruns this TestJob casted to ImplementingTestJob
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestJobContinue">
            <summary>
            Testjobs information what to do after testJob ended. 
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobContinue.Undefined">
            <summary>
            You may only collect this information after the testJob ended, so Undefined might be a programmers error
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobContinue.Continue">
            <summary>
            Work on as intended
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobContinue.SequenceAbort">
            <summary>
            Do not continue current test sequence, maybe continue with next loop
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobContinue.FullAbort">
            <summary>
            Stop testplan execution
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestJobConfig">
            <summary>
            Control test job handling in generic methods
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobConfig.Default">
            <summary>
            Default testjob settings
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobConfig.JobHasNoExecute">
            <summary>
            Ignore Execute() if flag is set. Mainly used by MacroTestJob to indicate it just has SubJobs and
            no own functionality.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.TestJobConfig.DebugLoggingOnly">
            <summary>
            If this flag is set, some Job-relevant logoutputs are sent to Debug-Log,
            otherwise they are sent to Info-Log.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroExecWrapper.DoPrepareImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroExecWrapper.DoExecImpl">
            <summary>
            Execute must only run once, thus a end state is set that does not disturb the later calculation
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroExecWrapper.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroExecWrapper.DoCleanupImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestJobEndedEvent">
            <summary>
            Inform listeners that the m_testJob has ended. Listeners will be other or parent testJobs waiting to start or to continue.
            </summary>
            <param name="aTestJob">IWaitableTestJob that ended</param>
            <param name="testResult">the jobs test result</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.ITestJob">
            <summary>
            Basic data for TestJobs, needed for logging
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.TestResult">
            <summary>
            TestJobResult defines the result of the test m_testJobRunsAfter the job ended.
            Might be set using ExecTestResult or other results (in Loops etc)
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.ContinueResult">
            <summary>
            Hot to continue with sequence flow after TestJobResult is set. 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.RunType">
            <summary>
            Information about foreground/background runs. Macro job ends when all foreground
            jobs ended. Background jobs get an End() call as a macro job ending request.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.JobConfig">
            <summary>
            Information abount the job config settings
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.HierarchyLevel">
            <summary>
            Gets or sets the hierarchy level. The Outermost Plan is level 0, each loop/subplancontaining job increases by 1.
            </summary>
            <value>The hierarchy level.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJob.CmVersionString">
            <summary>
            Must be added to any testjob: 
            public override string CmVersionString() { return \"$URL: svn://smtcae0010/TF/ET-Framework/trunk/ET/FW/PPL/Execution/Interfaces.cs $ $Id: Interfaces.cs 24393 2011-07-26 14:14:01Z abelebr $\"; }
            </summary>
            <returns>the version string</returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.Description">
            <summary>
            Gets the description of the Testjob.
            </summary>
            <value>
            a string with the description.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.PreConditionDescription">
            <summary>
            Gets Description of the precondition.
            </summary>
            <value>
            a String with the desciption of the precondition.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.PostConditionDescription">
            <summary>
            Gets Description of the postcondition.
            </summary>
            <value>
            a String with the desciption of the postcondition.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.RequiredConfiguration">
            <summary>
            Gets Description of the Required Configuration.
            </summary>
            <value>
            a String with the desciption of the Required Configuration.
            </value>
        </member>
        <member name="P:ET.FW.PPL.Execution.ITestJob.Objective">
            <summary>
            Gets Description of the objective of this plan.
            </summary>
            <value>
            a String with the desciption of the objective.
            </value>
        </member>
        <member name="T:ET.FW.PPL.Execution.ITestJobFunctionality">
            <summary>
            The methods a test job provides its testing functionality in. 
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.Prepare">
            <summary>
            Prepares internal handlers for execution, might connect to hardware API.
            All jobs get a Prepare() call before the test plan execution starts.
            To prevent job from executing make it passive, so Execute() will not be 
            invoked during testing and the result is set to DidNotRun.
            </summary>
            <returns>false for a passive testjob, true if active job</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.Execute">
            <summary>
            Extends testing functionality or starts event triggered processing.
            Testing does not stop when Execute() ends, but when ExecEnded() is called.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.ExecuteFinally">
            <summary>
            Called when test jobs execution ends (status, not method). Deregister your ressources here.
            Will be called even when there was an exception in Execute.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.ExecEnded(ET.FW.PPL.TestJobResult)">
            <summary>
            Notifies the system that the testing has terminated and terminates the job. 
            Might be called from within Execute(), then test job terminates when 
            Execute() ends - please return directly after the ExecEnded() call. 
            </summary>
            <param name="result">the result</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.EndExecution(System.Boolean)">
            <summary>
            Signals a forced termination to the test job, e.g. if a timeout occured or
            a test plan has other failing test jobs. Job has to set a result by calling
            ExecEnded when this parameter is true.
            If Execute() has not terminated after EndExecution() returned,
            the Execute()-Thread is killed. Refer to the .Net documentation
            how to prevent or handle the ThreadAbortException.
            </summary>
            <param name="requiresExecEnded">if set to <c>true</c> [requires exec ended].</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.ITestJobFunctionality.Cleanup">
            <summary>
            Release any links set during Prepare() and cleanup after test.
            All jobs get a Prepare() call after the test plan execution ended.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyEntry">
            <summary>
            Data type to store property links between test jobs and test plans
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.targetObj">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.targetProp">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.sourceObj">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.sourceProp">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.val">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.cat">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.order">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.info">
            <summary></summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType.Link">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType.Set">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType.Export">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType.ExportAuto">
            <summary>named job must export all properties</summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.ParamLinkType.ExportIgnore">
            <summary>named job property must not be exported (only if job has an exportAuto setting)</summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PropertyEntry.linkType">
            <summary></summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyEntry.TargetJobName">
            <summary>
            Gets the target obj.
            </summary>
            <value>The target obj.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyEntry.TargetPropertyName">
            <summary>
            Gets the target prop.
            </summary>
            <value>The target prop.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyEntry.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyExportAutoEntry">
            <summary>
            PropertyEntry for those propertys which shall be exported automatically
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyExportAutoEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.PropertyExportEntry"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportAutoEntry.DefaultCategory">
            <summary>
            Gets the default Value as String.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyExportEntry">
             <summary>
            
             </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyExportEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.PropertyExportEntry"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.Category">
            <summary>
            Gets the default Value as String.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.Order">
            <summary>
            Gets the order of the exported elements as String.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.DefaultValue">
            <summary>
            Gets the default Value as String.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.ValString">
            <summary>
            Gets or sets the default value (for serialization).
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.ExportInfo">
            <summary>
            Gets the export job prop.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportEntry.Name">
            <summary>
            Gets the name of the targetProp. Used in Set and Export cases where the job object is already given.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyExportEntry.CompareTo(ET.FW.PPL.Execution.PropertyExportEntry)">
            <summary>
            Compares the current object with another object of the same type, allows sorting by Name.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyExportIgnoreEntry">
            <summary>
            PropertyEntry for those propertys which shall not be exported.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyExportIgnoreEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.PropertyExportEntry"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyExportIgnoreEntry.Name">
            <summary>
            Gets the name of the targetProp. Used in Set and Export cases where the job object is already given.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertyLinkEntry">
             <summary>
            
             </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertyLinkEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.PropertyLinkEntry"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyLinkEntry.SourceJobName">
            <summary>
            Gets the source obj.
            </summary>
            <value>The source obj.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertyLinkEntry.SourcePropertyName">
            <summary>
            Gets the source prop.
            </summary>
            <value>The source prop.</value>
        </member>
        <member name="T:ET.FW.PPL.Execution.PropertySetEntry">
             <summary>
            
             </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PropertySetEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.PropertySetEntry"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertySetEntry.Value">
            <summary>
            Gets the default Value as String.
            </summary>
            <value>The export job prop.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.PropertySetEntry.ValString">
            <summary>
            Gets or sets the value (for serialization).
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ET.FW.PPL.Execution.StandardTestJobBase">
            <summary>
            Default class for Jobs that create NO internal TestJobs (no ExecAndWait ..., no new TestJobs in Prepare)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.Prepare">
            <summary>
            Prepares internal handlers for execution, might connect to hardware API.
            All jobs get a Prepare() call before the test plan execution starts.
            To prevent job from executing make it passive, so Execute() will not be
            invoked during testing and the result is set to DidNotRun.
            </summary>
            <returns>
            false for a passive testjob, true if active job
            </returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.Execute">
            <summary>
            Extends testing functionality or starts event triggered processing.
            Testing does not stop when Execute() ends, but when ExecEnded() is called.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.ExecuteFinally">
            <summary>
            Called when test jobs execution ends (status, not method). Deregister your ressources here.
            Will be called even when there was an exception in Execute.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.ExecEnded(ET.FW.PPL.TestJobResult)">
            <summary>
            Notifies the system that the testing has terminated and terminates the job.
            Might be called from within Execute(), then test job terminates when
            Execute() ends - please return directly after the ExecEnded() call.<para></para>
            Be aware, that calling this method disables ObservableObjects and may raise an Ended-Event.<para></para>
            Attention: This method must not be called, if the TestJob continues running.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.EndExecution(System.Boolean)">
            <summary>
            Signals a forced termination to the test job, e.g. if a timeout occured or
            a test plan has other failing test jobs. Job has to set a result by calling
            ExecEnded when this parameter is true.
            If you call want to call the base implementation (not needed!), please call it as this: base.EndExecution(false)
            You should already have called ExecEnded(result) before calling base. ..., so the base method should not call it again!
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StandardTestJobBase.Cleanup">
            <summary>
            Release any links set during Prepare() and cleanup after test.
            All jobs get a Prepare() call after the test plan execution ended.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.SubPlanContainingJob">
            <summary>
            Executes the TestPlan one (1) time.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.SubPlanContainingJob.CollectionForSubPlanJobs(ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            Collection where sub plan jobs will be stored
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.SubPlanContainingJob.JobNamesInSubPlan">
            <summary>
            Gets the job names of the sub test Plan.
            </summary>
            <value>The sub job names.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.SubPlanContainingJob.TestJobStarter">
            <summary>
            StarterTestJob, may be reused in derived classes
            </summary>
            <value>The test job starter.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.SubPlanContainingJob.FillJobSequence(System.Int32,System.String,ET.FW.PPL.Execution.JobSequenceDictionary,ET.FW.PPL.Execution.ControllingTestJob,System.Collections.Generic.List{ET.FW.PPL.Execution.BasicTestJob})">
            <summary>
            Fills the job sequence list.
            </summary>
            <param name="level">the hierarchy level of the job, starting with 0 in the most outer plan</param>
            <param name="prefix">The prefix.</param>
            <param name="jobSequence">The job sequence.</param>
            <param name="parentTestJob"></param>
            <param name="fullJobList">List with all Jobs, including those not in jobSequence.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.SubPlanContainingJob.CmVersionString">
            <summary>
            Implement ITestJob
            </summary>
            <returns>Full path and Version</returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.SubPlanTestJobBase">
            <summary>
            Base Classe for the SubPlanTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.SubPlanTestJobBase.CollectionForSubPlanJobs(ET.FW.PPL.Execution.NamedJobsCollection)">
            <summary>
            Will SubPlan jobs be stored in a sub name list (true) or will they be stored in the parents list (false)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestPlanManager">
            <summary>
            Loads, starts and ends testPlan definition and execution
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.StorageManager">
            <summary>
            Gets the storage manager.
            </summary>
            <value>The storage manager.</value>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.PplStorageManager">
            <summary>
            Gets the storage manager for internal PPL usage.
            </summary>
            <value>The storage manager.</value>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Execution.TestPlanManager"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.State">
            <summary>The current state of the TestPlanManager, public use</summary>
            <remarks>
            This state represents the test plan manager state, not the state of a test plan execution.
            A test plan execution would start and end.
            The test plan manager starts a testset (RUNNING), iterates the variants(still RUNNING), and goes offline (IDLE).
            Maybe it paused between variants (PAUSED) to allow the fw to go offline and online again. After the testset
            has finally finished, there is a signal showing if it ended normally or if it was aborted (Interrupted).
            During RUNNING, the state is updated for the next variant, giving the index and some variant information.<br/>
            There is no interface providing the test plan execution state at the moment. Please write a feature ticket
            and describe what information you need and why.
            </remarks>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.FinalState">
            <summary>The current state of the TestPlanManager, internal use: will be changed after State was changed and State change events are handled</summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.SetStateValue(ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData)">
            <summary>
            Set state value
            </summary>
            <param name="runState">state value</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.ContinueOnVariantAbort">
            <summary>
            flag controls if several test variants continue to execute if one of them had an abort return code.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.AbortCurrentExecution">
            <summary>
            Aborts the current run.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.ExecuteTestSet(ET.FW.PPL.Definition.ITestSet)">
            <summary>
            Runs the current plan.
            </summary>
            <param name="testSet">testset to execute</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.ContinueWithNextVariant">
            <summary>
            Continues with the next variant when the testset is pausing.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.PauseBetweenVariants">
            <summary>
            Gets or sets a value indicating whether the execution pauses between variants. If so, you have to call ContinueNextVariant() to continue.
            </summary>
            <value>
            	<c>true</c> if [pause between variants]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Aborts the test plan.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.FileEquals(System.String,System.String)">
            <summary>
            Compare files.
            </summary>
            <param name="fileName1">first file</param>
            <param name="fileName2">second file</param>
            <returns>compare result</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.StreamEquals(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compare streams.
            </summary>
            <param name="stream1">first stream</param>
            <param name="stream2">second stream</param>
            <returns>compare result</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanManager.NotifyJobSequenceAndFullJobList(ET.FW.PPL.Execution.JobSequenceDictionary,System.Collections.Generic.List{ET.FW.PPL.Execution.BasicTestJob})">
            <summary>
            Notify job sequence and full job list.
            </summary>
            <param name="sequence">job sequence</param>
            <param name="jobList">full job list</param>
        </member>
        <member name="E:ET.FW.PPL.Execution.TestPlanManager.JobStateChanged">
            <summary>
            Job state changed event handler.
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.TestPlanManager.jobStateChanged">
            <summary>
            Job state changed event handler
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.TestPlanManager.fullJobListChanged">
            <summary>
            Full job list changed event handler
            </summary>
        </member>
        <member name="E:ET.FW.PPL.Execution.TestPlanManager.FullJobListChanged">
            <summary>
            Information, when FullJobList changed. EventArgs may contain an empty list or null as list.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData">
            <summary>
            Information about current TestPlan execution
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.State">
            <summary>Running or not running</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.LastState">
            <summary>Running or not running before this info</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.VariantCount">
            <summary>Number of Variants in the TestSet</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.VariantIndex">
            <summary>Index of current running Variant</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.VariantName">
            <summary>Current running Variant</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.VariantParams">
            <summary>Current running Variant params</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.TestSetName">
            <summary>Current running TestSet</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.TestPlanDefName">
            <summary>Current running TestPlanDef</summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanManager.TestPlanManagerStateData.Interrupted">
            <summary>False if last TestPlan execution ended without abort by user or system</summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobSequenceDictionary">
            <summary>
            Job sequence dictionary
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobStateChangeTypes">
            <summary>
            Job state changed type enum.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.JobStateChangeTypes.NewSequence">
            <summary>
            new sequence
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobStateChangedEventArgs">
            <summary>
            Job state changed event args.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobStateChangedEventArgs.#ctor(ET.FW.PPL.Execution.JobSequenceDictionary)">
            <summary>
            the constructor
            </summary>
            <param name="jobSequence">job sequence dictionary</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.JobStateChangedEventArgs.ChangeType">
            <summary>
            Changed type
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.JobStateChangedEventArgs.JobSequence">
            <summary>
            Job sequence
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.FullJobListChangedEventArgs">
            <summary>
            Full job list changed event args
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.FullJobListChangedEventArgs.#ctor(System.Collections.Generic.List{ET.FW.PPL.Execution.BasicTestJob})">
            <summary>
            full job list changed event args.
            </summary>
            <param name="fullJobList">job list</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.FullJobListChangedEventArgs.FullJobList">
            <summary>
            the FullJobList.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.FullJobListChangedHandler">
            <summary>
            full job list changed event handler.
            </summary>
            <param name="sender">sender object</param>
            <param name="args">event args</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobStateChangedHandler">
            <summary>
            Job state changed event handler.
            </summary>
            <param name="sender">sender object</param>
            <param name="args">event args</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.WaitTimeTestJobBase">
            <summary>
            Job waits some milliseconds
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.WaitTimeTestJobBase.GetTestJobConfig">
            <summary>
            Gets the test job config.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.WaitTimeTestJobBase.WaitTimePropertyName">
            <summary>
            The name of the Property where the time can be defined, how long
            the job shall wait. Definition is done in milliseconds.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.WaitTimeTestJobBase.WaitTime">
            <summary>
            Parameter for WaitJob waitTime in milliseconds
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.WaitTimeTestJobBase.DoExecImpl">
            <summary>
            Extends ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.WaitTimeTestJobBase.DoExecuteFinallyImpl">
            <summary>
            Called when test jobs execution ends (status, not method). Deregister your ressources here.
            Will be called even when there was an exception in DoExecInternal.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.WaitTimeTestJobBase.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            Extends ImplementingTestJob.
            WaitTime as background job - please check if you do this right!
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.WaitTimeTestJobBase.CmVersionString">
            <summary>
            Implement ITestJob
            </summary>
            <returns>Full path and Version</returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.PplLog">
            <summary>
            Default logging functionality in PPL
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PplLog.ShowJobsDebug">
            <summary>
            Flag, whether to show some Debug-information of the TestJobs.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.PplLog.ShowJobsVerboseDebug">
            <summary>
            Flag, whether to show Verbose-informations of the TestJobs.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PplLog.DoShowJobsDebug">
            <summary>
            Returns TRUE, if (ShowJobsDebug || ShowJobsVerboseDebug) is TRUE
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.PplLog.PPL">
            <summary>
            Logger with code "PPL"
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.PplLog.DebugJob(System.String)">
            <summary>
            Debug for TestJobs. Regards, whether ShowJobsDebug or ShowJobsVerboseDebug is set or not.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.PplLog.VerboseJob(System.String)">
            <summary>
            Verbose for TestJobs. Regards, whether ShowJobsVerboseDebug is set or not.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.PplLog.VerboseJob(System.String,System.Boolean)">
            <summary>
            Verbose for TestJobs. Regards, whether ShowJobsVerboseDebug is set or not.
            </summary>
            <param name="message"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.PplLog.DebugLoggingOnly(ET.FW.PPL.Execution.ITestJob)">
            <summary>
            Checks the jobs internal debugging flag: some internal jobs should not show in log, but we need the debug information
            </summary>
            <param name="job">The job.</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.PplLog.LogJobException(System.String,System.String,System.String,System.Exception)">
            <summary>
            Write log message for an exception that occurred in a job
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="methodName">Name of the method.</param>
            <param name="info">The info.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.JobThreadPool">
            <summary>
            ThreadPool for those Threads required to execute TestJobs.<para></para>
            Internally creates an ETThreadPool whose threads are executed with the priority AboveNormal.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.JobThreadPool.Threads">
            <summary>
            Thread Pool singleton
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.Start(ET.FW.Core.Common.VoidDelegate)">
            <summary>
            Call Execute on threadBuffer
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.WaitUntilEnd">
            <summary>
            Wait until last Thread in Thread Pool ended
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.Dispose">
            <summary>
            Extends IDisposable
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.ForceTerminate">
            <summary>
            Tries to Dispose the jobs after some time.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.SetTimeout(System.UInt32,ET.FW.Core.Common.TimerDelegate)">
            <summary>
            Set Timeout to call a delegate
            </summary>
            <param name="timeoutms">time span to wait</param>
            <param name="onTimeout">delegate to call</param>
            <returns>DateTime value needed to remove Timeout</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.JobThreadPool.RemoveTimeout(System.DateTime,ET.FW.Core.Common.TimerDelegate)">
            <summary>
            Remove Timeout from Timer. Event may have happend and may be waiting
            in another thread, so prepare to have an event even after timeout is removed.
            </summary>
            <param name="timeout">Timeout time to remove as returned on SetTimeout</param>
            <param name="onTimeout">Same Delegate as in SetTimeout</param>
        </member>
        <member name="T:ET.FW.PPL.Execution.StarterTestJob">
            <summary>
            Extends DefinedMacroTestJob. Used in TestPlanBase as the TestJob responsible for the 
            execution of the test.<para></para>
            The StarterTestJob referenced and executed in TestPlanBase must be alive, while the test 
            is running, as it indicates the the system, whether the test is running or not.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.GetTestJobConfig">
            <summary>
            Returns the TestJobConfig. Always sets the Flags TestJobConfig.JobHasNoExecute and TestJobConfig.DebugLoggingOnly.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ET.FW.PPL.Execution.StarterTestJob.runAborted">
            <summary>
            Abort during prepare?
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.StarterTestJob.running">
            <summary>
            Execution started?
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.RunTest">
            <summary>
            Start the test 
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.JobEndedHandler(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobFullResult)">
            <summary>
            Called, when this.Ended-event is raised. As StartTestStop hosts a TestExecution and is alive,
            while the execution is in progress, this handler forces any active Thread started by  the 
            active test to terminate, which is done by calling JobThreadPool.Threads-ForceTerminate().
            </summary>
            <param name="job"></param>
            <param name="testResult"></param>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.AbortRun">
            <summary>
            Sends abort to the running test
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.ShowJobStatus">
            <summary>
            do not show starter jobs in test plan status, i.e. this override always returns false
            </summary>
            <returns>false</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.StarterTestJob.GetPathId(System.Boolean)">
            <summary>
            Gets the job execution path information as id.
            </summary>
            <param name="dynamic">include runtime parameters (loop counts etc) in the id, static name info otherwise</param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.PPL.Execution.MacroTestJob">
            <summary>
            Extends a m_testJob that contains other testJobs so it works like a m_testPlan seen from within and like a m_testJob seen from the outside.
            Caution: Execute can call ExecEnded, but then the whole job ends. Execute cannot be restarted (Start() starts MacroTestJob)
            - so Execute just runs once!
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.MacroTestJob.PlanStepState">
            <summary>
            Mainly used in DoExecImpl()<para></para>
            Indicates the inner state of this MacroTestJob
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.PlanStepState.Initial">
            <summary>
            Has to be set, before DoExecImpl() is called.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.PlanStepState.StartExecute">
            <summary>
            Indicates, that the initialisation has ended and the execution shall start.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.PlanStepState.WaitForegroundJobsEnded">
            <summary>
            Indicates, that all ForegroundJobs have ended, i.e. the execution itself has ended.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.PlanStepState.WaitBackgroundJobsEnded">
            <summary>
            Indicates, that all BackgroundJobs have ended.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.PlanStepState.Done">
            <summary>
            All done
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_planStep">
            <summary>
            The internal state of this MacroTestJob
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_firstJobs">
            <summary>
            Jobs to run when job starts. list is filled in during Prepare.<para></para>
            Includes all Jobs which have no preceding TestJobs.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_lastJobs">
            <summary>
             Jobs this job waits for before it is ended.<para></para>
             Includes all Jobs which do not precede other ones.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_backgroundJobs">
            <summary>
            Jobs this job sends a doEnd signal when all other (last) jobs finished
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_backgroundJobsInternal">
            <summary>
            Hash of all BackgroundJobs which have not reported their end, including those
            BackgroundJobs which have not started yet.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_backgroundJobsCountdown">
            <summary>
            Used to count the number of background-jobs which have not reported their end yet.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_executeOnBackgroundEnded">
            <summary>
            used to signal that Start() shall be called, when the last active BackgroundJob signals its' end.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_waitForExecEndsHandle">
            <summary>
            Wait handle in waiting for a Continued job to end.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_DoEndExecuteSubJobsFlag">
            <summary>
            Wait handle which is in Reset-State while DoEndExecuteSubJobs(TestJobFullResult newResult) is active.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_changeLock">
            <summary>
            synchronization lock
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Execution.MacroTestJob.m_testPlanJobs">
            <summary>
            List of all known sub jobs in this jobs context
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.GetAllRequiredStatesOfContainedTestJobs">
            <summary>
            returns a list with all required states of the Testjobs contained within. The string-values
            are distinct but may contain an empty string.
            </summary>
            <returns>the list</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.HasMultipleTestJobsWithTheSameRequiredStateOrWithNoRequiredState(System.String@)">
            <summary>
            Determines, whether this MacroTestJob contains multiple TestJobs requiring the same State and / or not having a RequiredState defined.
            </summary>
            <param name="errorMessage">out: The errorMessage. Is an empty string, if FALSE is returned.</param>
            <returns>if jobs found</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.HasTestJobsWithNoRequiredState">
            <summary>
            Helper-method mainly for SwitchStateLoop to determine, whether a Testjob exists within
            the loop, which does not require a certain state, which is not allowed.
            </summary>
            <returns>if found</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.TestplanAddJob(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobRunType)">
            <summary>
            Add a test job to the job list. The RunType of the given job is set to the passed aRunType<para></para>
            Can only be called before Execution.<para></para>
            </summary>
            <param name="job">The job.</param>
            <param name="aRunType">Type of a run.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoPrepareImpl">
            <summary>
            call Prepare and initialize the sub plan job network (only dependencies, no events)
            </summary>
            <returns>
            false for a passive testjob, true if active job
            </returns>
        </member>
        <member name="P:ET.FW.PPL.Execution.MacroTestJob.ExecWrapper">
            <summary>
            TestJob wrapping the FunctionalTestJob of this MacroTestJob, if a FunctionalTestJob has been set.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoExecImpl">
            <summary>
            Starts the execution for this test job. If the test job has to wait
            for other jobs, it has to setup events and wait. A job can exit from
            DoExecute() when he has nothing to do. A job is restarted again
            by Start(), which will invoke DoExecute() in another thread.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.PreExecuteSetEventHandles">
            <summary>
            Sets event handle on foreground and background jobs and prepares
            the m_*Countdown-variables.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.MacroTestJob.DoInformAboutAllFirstJobsStarted">
            <summary>
            If set to true an event is sent, after all jobs in m_firstJobs have been started.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.MacroTestJob.AllFirstJobsStarted">
            <summary>
            Delegate for the AllFirstJobsStartedEvent
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="E:ET.FW.PPL.Execution.MacroTestJob.AllFirstJobsStartedEvent">
            <summary>
            Event which becomes raised if DoInformAboutAllFirstJobsStarted == true
            and after all first TestJobs within this MacroTestJob are started.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.ExecuteStartSubjobChain">
            <summary>
            Start all jobs stored in m_firstJobs
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.job_StateChanged(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobState)">
            <summary>
            Job_s the state changed.
            </summary>
            <param name="job">The job.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.EndBackgroundJobs">
            <summary>
            Call DoEnd() on all BackgroundJobs, which have not reported their end yet.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.SubJobEnded(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobFullResult)">
            <summary>
            Each subJob signals its end to the Makro so Makro can react depending on ContinueSettings
            </summary>
            <param name="aTestJob">A test job.</param>
            <param name="testResult">The test result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.GetCombinedTestResult">
            <summary>
            Calculate testResult.
            testResult = ... -&gt; testResult is set from Execute() oder ExecEnd(), or has a SUCCESS/DIDNOTRUN default value.
            TestJobResult will be the worst result, m_testJob settings define what this means for the execution.
            </summary>
            <returns>the result</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DebugShowWaitForJobs">
            <summary>
            Debugs the show wait for jobs.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.BackgroundJobEndedHandler(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobFullResult)">
            <summary>
            Wait for an event from a subJob. The jobs ends if all sub testJobs ended
            </summary>
            <param name="subJob">The sub job.</param>
            <param name="testResult">The test result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.ForegroundJobEndedHandler(ET.FW.PPL.Execution.ControllingTestJob,ET.FW.PPL.TestJobFullResult)">
            <summary>
            Wait for an event from a subJob. The jobs ends if all sub testJobs ended
            </summary>
            <param name="subJob">The sub job.</param>
            <param name="testResult">The test result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.AddWaitForForegroundJob(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Defines this MacroTestJob has to wait for the end of job,
            which must be a ForegroundJob (which is not checked by this method).<para></para>
            This means, m_lastJobsCountdown becomes increased, job is added to m_lastJobsCurrent and
            ForegroundJobEndedHandler is registered at the job's Ended-event.
            </summary>
            <param name="job">The ForegroundJob this Job has to wait for</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.AddBackgroundJobEnding(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Defines this MacroTestJob has to handle the end of job,
            which must be a BackgroundJob (which is not checked by this method).<para></para>
            This means, m_backgroundJobsCountdown becomes increased, job is added to m_backgroundJobsInternal and
            BackgroundJobEndedHandler is registered at the job's Ended-event.
            </summary>
            <param name="job">The BackgroundJob whose end has to be handled by this job.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.ExecAndWait(ET.FW.PPL.Execution.ImplementingTestJob)">
            <summary>
            Starts a m_testJob and waits until it ends
            </summary>
            <param name="job">The job.</param>
            <returns>the result</returns>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.ExecAndContinue(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Starts a testJob as foreground job ()
            Current testjobs ends when all foreground jobs have ended (so "job" has to
            end internally: job calls ExecEnded() - or must be ended from here - job.End());
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.WaitForContinued(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Wait for a job that was started with ExecAndContinue.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.ExecInBackground(ET.FW.PPL.Execution.ControllingTestJob)">
            <summary>
            Starts a m_testJob as a background job that does not need to end
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoExecPrepareImpl">
            <summary>
            Calls DoExecPrepare() for any job in m_testPlanJobs and sets m_planStep to PlanStepState.StartExecute
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoEndExecuteSubJobs(ET.FW.PPL.TestJobFullResult)">
            <summary>
            Calls DoEndExecution(newResult) on any job in: m_testPlanJobs, m_lastJobsCurrent, m_backgroundJobsInternal.<para></para>
            m_DoEndExecuteSubJobsFlag is being reset while this method is active.
            </summary>
            <param name="newResult">The new result.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            if this job has to be aborted, it will kill all inner jobs - subjobs will always be killed
            if a job is aborted. They will also be killed if the job is to be killed.<para></para>
            Calls DeEndExecuteJobs(newResult), where newResult is changed to Killed, if it is set to AbortSequence or Aborted.<para></para>
            Afterwards base.DoEndExecutionImpl with unchanged parameters is called.
            </summary>
            <param name="newResult">The new result.</param>
            <param name="execEndedRequired">if set to <c>true</c> [exec ended required].</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.DoCleanupImpl">
            <summary>
            Tells the test job to cleanup after test plan execution.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.FillJobSequence(System.Int32,System.String,ET.FW.PPL.Execution.JobSequenceDictionary,ET.FW.PPL.Execution.ControllingTestJob,System.Collections.Generic.List{ET.FW.PPL.Execution.BasicTestJob})">
            <summary>
            Fills the job sequence list.
            </summary>
            <param name="level">the hierarchy level of the job, starting with 0 in the most outer plan</param>
            <param name="prefix">The prefix.</param>
            <param name="jobSequence">The job sequence.</param>
            <param name="parentTestJob">The parent job.</param>
            <param name="fullJobList">List with all Jobs, including those not in jobSequence.</param>
        </member>
        <member name="P:ET.FW.PPL.Execution.MacroTestJob.FunctionalTestJob">
            <summary>
            Returns this TestJob as StandardTestJobBase
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.MacroTestJob.ImplementingFromFunctionalityTestJob">
            <summary>
            Retruns this TestJob casted to ImplementingTestJob
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.MacroTestJob.Dispose">
            <summary>
            Cleanup the inner jobs
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Execution.TestPlan">
            <summary>
            Wrapper for Framework
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Execution.TestPlanBase.TestResult">
             <summary>
            
             </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanBase.Execute">
            <summary>
            Start the execution of the loaded m_testPlan
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanBase.Abort">
            <summary>
            Stop the execution of the loaded m_testPlan. TestResults may not be usable.
            The TestPlan must be loaded again before the next Execution.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanBase.CreateJobs(ET.FW.PPL.Definition.IReadOnlyTestPlanDef)">
            <summary>
            Makes the jobs and links, using the TestplanDev.
            </summary>
            <param name="def">The def.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanBase.SetInitialJobValues(ET.FW.PPL.Definition.IReadOnlyTestPlanDef,ET.FW.PPL.Definition.JobParams)">
            <summary>
            Makes the new params sets, defined in the TestplanDev.
            only exported parameter of the test plan are set (former test job names are no longer supported!).
            </summary>
            <param name="def">The def.</param>
            <param name="tpDefVariantJobParams">The tp def variant job params.</param>
        </member>
        <member name="M:ET.FW.PPL.Execution.TestPlanBase.CollectAllPropsFromTestPlanDef(ET.FW.PPL.Definition.IReadOnlyTestPlanDef,ET.FW.PPL.Execution.DefinedTestJob,System.Collections.Generic.Dictionary{ET.FW.PPL.Execution.PropertyExportEntry,ET.FW.PPL.Execution.DefinedTestJob})">
            <summary>
            Collects all props from test plan def, top down - planDef PLEs come first, subplan PLEs come later.
            </summary>
            <param name="planDef">The plan def.</param>
            <param name="starterJob">The starter job.</param>
            <param name="allProps">All props.</param>
        </member>
        <member name="T:ET.FW.PPL.Global">
            <summary>
            Global PPL objects
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Global.TestPlanManager">
            <summary>
            Gets the system global test plan manager.
            </summary>
            <value>The test plan manager.</value>
        </member>
        <member name="T:ET.FW.PPL.IfResultTestJob">
            <summary>
            This test job checks an incoming Result property agains a list of expected results, and
            gives a "true" checkResult if the incoming result is in the list, "false" otherwise.
            There is also an invertedResult for an "Else" block.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.IfResultTestJob.IncomingResult">
            <summary>
            Sets the incoming result.
            </summary>
            <value>The incoming result.</value>
        </member>
        <member name="P:ET.FW.PPL.IfResultTestJob.IfResult">
            <summary>
            Gets the check result.
            </summary>
            <value>The check result.</value>
        </member>
        <member name="P:ET.FW.PPL.IfResultTestJob.IfNotResult">
            <summary>
            Gets the check result.
            </summary>
            <value>The check result.</value>
        </member>
        <member name="P:ET.FW.PPL.IfResultTestJob.ExpectedResults">
            <summary>
            Sets the expected results as List of results (for later use).
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:ET.FW.PPL.IfResultTestJob.ExpectedResult">
            <summary>
            Sets the expected result as Bitfield.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="M:ET.FW.PPL.IfResultTestJob.Prepare">
            <summary>
            Prepares internal handlers for execution, might connect to hardware API.
            All jobs get a Prepare() call before the test plan execution starts.
            To prevent job from executing make it passive, so Execute() will not be
            invoked during testing and the result is set to DidNotRun.
            </summary>
            <returns>
            false for a passive testjob, true if active job
            </returns>
        </member>
        <member name="M:ET.FW.PPL.IfResultTestJob.Execute">
            <summary>
            Check if incomingResult matches expectedResult, set checkResult for other jobs
            </summary>
        </member>
        <member name="T:ET.FW.PPL.InjectionTestJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.PPL.InjectionTestJob.DoExecImpl">
            <summary>
            Start the injection container and wait for a result.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.InjectionTestJob.DoEndExecutionImpl(ET.FW.PPL.TestJobFullResult,System.Boolean)">
            <summary>
            Signal End of Exection to the InjectionContainer
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InjectionTestJob.StartState">
            <summary>
            Signal the start / end to the Injection Container
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InjectionTestJob.IncomingResult">
            <summary>
            Sets the incoming result.
            </summary>
            <value>The incoming result.</value>
        </member>
        <member name="T:ET.FW.PPL.IteratingTestJob`1">
            <summary>
            May be used in a Loop to control the Loop:
            - receives next LoopCount
            - decides and signals "terminate" to the loop
            </summary>
        </member>
        <member name="M:ET.FW.PPL.IteratingTestJob`1.GetValue(System.Int32,`0@)">
            <summary>
            Gets the value \#i from the list
            </summary>
            <param name="i">the index number of the value (starting from 1)</param>
            <param name="value">The value.</param>
            <returns>true if value exists, false if not (Loop will be canceled)</returns>
        </member>
        <member name="M:ET.FW.PPL.IteratingTestJob`1.ConfirmNextLoop(System.Int32)">
            <summary>
            Confirm the execution of the next loop
            </summary>
            <param name="nextLoopCount">the number of the next loop count</param>
            <returns>
            true to execute the loop, false to end the loop
            </returns>
        </member>
        <member name="M:ET.FW.PPL.IteratingTestJob`1.#ctor">
            <summary>
            Constructor: Initialize all internal values, e.g. ObservableObjectHelpers
            </summary>
        </member>
        <member name="P:ET.FW.PPL.IteratingTestJob`1.CurrentValue">
            <summary>
            Outgoing Value or Event.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DummyTestJob">
            <summary>
            Wait some Time. Wrapper for Base class in Framework
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DummyTestJob.TrueFalseExceptionResult">
            <summary>
            Prepare result
            </summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.TrueFalseExceptionResult.TrueResult">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.TrueFalseExceptionResult.FalseResult">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.TrueFalseExceptionResult.ExceptionResult">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.TrueFalseExceptionResult.NoResult">
            <summary>TestJob method will not end </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.PrepareResult">
            <summary>
            Result for the Prepare of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.PrepareTime">
            <summary>
            How much time does prepare wait before giving the result
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DummyTestJob.NormalExceptionResult">
            <summary>
            Prepare result
            </summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.NormalExceptionResult.NormalResult">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.NormalExceptionResult.ExceptionResult">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.DummyTestJob.NormalExceptionResult.NoResult">
            <summary>TestJob method will not end </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.CleanupResult">
            <summary>
            Result for the Cleanup of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.CleanupTime">
            <summary>
            How much time does cleanup wait before giving the result
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.EndExecutionResult">
            <summary>
            Result for the EndExecution of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.ExecuteFinallyResult">
            <summary>
            Result for the ExecuteFinally of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.ExecuteFinallyTime">
            <summary>
            How much time does ExecuteFinally wait before returning
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.ExecResult">
            <summary>
            Result for the Execution of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.ResultValue">
            <summary>
            Result for the Execution of the job
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DummyTestJob.ExecTime">
            <summary>
            How much time does cleanup wait before giving the result
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJob.Prepare">
            <summary>
            Prepare: Ends with True, False or Exception
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJob.Execute">
            <summary>
            Execute: Start your tests here. 
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJob.ExecuteFinally">
            <summary>
            Called when test jobs execution ends (status, not method). Deregister your ressources here.
            Will be called even when there was an exception in Execute.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJob.EndExecution(System.Boolean)">
            <summary>
            End: Called when the systems wants a background job to end (Only Background jobs!)
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJob.Cleanup">
            <summary>
            Cleanup: Free all hardware links you use.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.DummyTestJobPlan">
            <summary>
            Shows how to start another TestPlan within the current m_testPlan and how to set TimeOuts.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DummyTestJobPlan.FillTestPlanDef(ET.FW.PPL.TestPlanDef)">
            <summary>
            Load definition
            </summary>
        </member>
        <member name="T:ET.FW.PPL.InfoTestJob">
            <summary>
            Put Text into Log, as Info, Warn or Error entry
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InfoTestJob.Text">
            <summary>
            Info Text, no output if text is null
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InfoTestJob.ErrorText">
            <summary>
            ErrorText, no output if text is null
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InfoTestJob.WarnText">
            <summary>
            WarnText, no output if text is null
            </summary>
        </member>
        <member name="M:ET.FW.PPL.InfoTestJob.Execute">
            <summary>
            Execute: Start your tests here. 
            </summary>
        </member>
        <member name="T:ET.FW.PPL.ValueInfoTestJob">
            <summary>
            Displays a value change on input property as log information
            </summary>
        </member>
        <member name="P:ET.FW.PPL.ValueInfoTestJob.Value">
            <summary>
            Boolean input 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.ValueInfoTestJob.BoolValue">
            <summary>
            Sets the bool value.
            </summary>
            <value>The bool value.</value>
        </member>
        <member name="M:ET.FW.PPL.ValueInfoTestJob.Prepare">
            <summary>
            Prepare: Check for background job, return true
            </summary>
        </member>
        <member name="M:ET.FW.PPL.ValueInfoTestJob.EndExecution(System.Boolean)">
            <summary>
            EndExecution terminates the job
            </summary>
            <param name="execEndedRequired"></param>
        </member>
        <member name="T:ET.FW.PPL.CalcTrueFalseTestJob">
            <summary>
            If Not Else TestJob: Handles events even during Prepare - can be used to multiply Enabled=true/false events.
            Do NOT use this class as example for how to handle events!!!
            </summary>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.Input">
            <summary>
            Boolean input
            </summary>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.NotInverted">
            <summary>
            Returns the not inverted input.
            </summary>
            <value>The not inverted.</value>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.NotInvertedBoolean">
            <summary>
            Returns the not inverted input.
            </summary>
            <value>The not inverted.</value>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.Inverted">
            <summary>
            Returns the inverted input.
            </summary>
            <value>The inverted.</value>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.InvertedBoolean">
            <summary>
            Returns the inverted input.
            </summary>
            <value>The inverted.</value>
        </member>
        <member name="M:ET.FW.PPL.CalcTrueFalseTestJob.Prepare">
            <summary>
            Prepare: Check for background job, return true
            </summary>
        </member>
        <member name="M:ET.FW.PPL.CalcTrueFalseTestJob.EndExecution(System.Boolean)">
            <summary>
            EndExecution terminates the job
            </summary>
            <param name="execEndedRequired"></param>
        </member>
        <member name="P:ET.FW.PPL.CalcTrueFalseTestJob.Decoupler">
            <summary>
            Decoupler is deactivated, so events are sent syncronized
            </summary>
        </member>
        <member name="T:ET.FW.PPL.InjectionStartState">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.InjectionStartState.Initial">
            <summary>Do nothing till you hear from me</summary>
        </member>
        <member name="F:ET.FW.PPL.InjectionStartState.Start">
            <summary>Start</summary>
        </member>
        <member name="F:ET.FW.PPL.InjectionStartState.End">
            <summary>Terminate and set a result</summary>
        </member>
        <member name="F:ET.FW.PPL.InjectionStartState.Kill">
            <summary>Terminate and do not set a result</summary>
        </member>
        <member name="F:ET.FW.PPL.InjectionStartState.Abort">
            <summary>Terminate and do not set a result</summary>
        </member>
        <member name="T:ET.FW.PPL.InjectionContainerTestJob">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InjectionContainerTestJob.StartState">
            <summary>
            Input for Injection control
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InjectionContainerTestJob.ContainerResult">
            <summary>
            </summary>
        </member>
        <member name="P:ET.FW.PPL.InjectionContainerTestJob.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
            <value></value>
        </member>
        <member name="T:ET.FW.PPL.DistributorTestJob`1">
            <summary>
            Distributor test job: takes a value on the input and sends it to the output
            Do NOT use this class as example for how to handle events!!!
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DistributorTestJob`1.Input">
            <summary>
            Input 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DistributorTestJob`1.Output">
            <summary>
            Returns the input.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DistributorTestJob`1.Prepare">
            <summary>
            Prepare: Check for background job, return true
            </summary>
        </member>
        <member name="M:ET.FW.PPL.DistributorTestJob`1.EndExecution(System.Boolean)">
            <summary>
            EndExecution terminates the job
            </summary>
            <param name="execEndedRequired"></param>
        </member>
        <member name="M:ET.FW.PPL.DistributorTestJob`1.Cleanup">
            <summary>
            Release any links set during Prepare() and cleanup after test.
            All jobs get a Cleanup() call after the test plan execution ended.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.DistributorTestJob`1.Decoupler">
            <summary>
            Decoupler is deactivated, so events are sent syncronized
            </summary>
        </member>
        <member name="T:ET.FW.PPL.Objective">
            <summary>
            Attribute for Description of the Required Configuration 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.Objective.Description">
            <summary>
            Gets or sets the Descritpion.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ET.FW.PPL.Objective.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Objective"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ET.FW.PPL.RequiredConfiguration">
            <summary>
            Attribute for Description of the Required Configuration 
            </summary>
        </member>
        <member name="P:ET.FW.PPL.RequiredConfiguration.Description">
            <summary>
            Gets or sets the Descritpion.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ET.FW.PPL.RequiredConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.RequiredConfiguration"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ET.FW.PPL.PostConditionDescription">
            <summary>
            Attribute for TestJob Precondition Description
            </summary>
        </member>
        <member name="P:ET.FW.PPL.PostConditionDescription.Description">
            <summary>
            Gets or sets the Descritpion.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ET.FW.PPL.PostConditionDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.PostConditionDescription"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ET.FW.PPL.PreConditionDescription">
            <summary>
            Attribute for TestJob Precondition Description
            </summary>
        </member>
        <member name="P:ET.FW.PPL.PreConditionDescription.Description">
            <summary>
            Gets or sets the Descritpion.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ET.FW.PPL.PreConditionDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.PreConditionDescription"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ET.FW.PPL.PredefinedStateNames">
            <summary>
            Predefined Statenames for SwitchStateLoop
            </summary>
        </member>
        <member name="F:ET.FW.PPL.PredefinedStateNames.NONE_STATE">
            <summary>
            None-State
            </summary>
        </member>
        <member name="F:ET.FW.PPL.PredefinedStateNames.ELSE_STATE">
            <summary>
            Else-State
            </summary>
        </member>
        <member name="T:ET.FW.PPL.SelectorTestJob`1">
            <summary>
            Job with 10 Input channels and one selector input. The only output is set to the selected input 
            (0..10, default 0 means no input selected, Output shows default value for this type T).
            On selector input change the value from the new selected input is set to the output, and a change event is sent, even 
            the inputs have the same value. After the value of the selected input is set,
            any new value coming in via changed event is set as the output value, generating an changed event there.
            The Job is no normal job, so the selection also works during prepare.
            There is no new value if a new observable object in set to the inputs. Only selector value change generates new values.
            If an input is selected that has not observable object assigned, the change is ignored (error log info is written), 
            the former output is unchanged.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Output">
            <summary>Output</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Selected">
            <summary>SelectedInput parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input1">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input2">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input3">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input4">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input5">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input6">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input7">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input8">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input9">
            <summary>Input parameter</summary>
        </member>
        <member name="P:ET.FW.PPL.SelectorTestJob`1.Input10">
            <summary>Input parameter</summary>
        </member>
        <member name="M:ET.FW.PPL.SelectorTestJob`1.Prepare">
            <summary>
            Prepare: Ends with True, False or Exception
            </summary>
        </member>
        <member name="M:ET.FW.PPL.SelectorTestJob`1.EndExecution(System.Boolean)">
            <summary>
            End: Called when the systems wants a background job to end (Only Background jobs!)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.LoopControlTestJob">
            <summary>
            May be used in a Loop to control the Loop:
            - receives next LoopCount
            - decides and signals "terminate" to the loop
            </summary>
        </member>
        <member name="M:ET.FW.PPL.LoopControlTestJob.Execute">
            <summary>
            On start we read the Loops current Nextcount. We set the currentValue according to index.
            If NextCount > ArraySize, we signal Stop to the Loop
            </summary>
        </member>
        <member name="M:ET.FW.PPL.LoopControlTestJob.EndExecution(System.Boolean)">
            <summary>
            Implement StandardTestJobBase
            </summary>
            <param name="execEndedRequired"></param>
        </member>
        <member name="M:ET.FW.PPL.LoopControlTestJob.ConfirmNextLoop(System.Int32)">
            <summary>
            Confirm the execution of the next loop 
            </summary>
            <param name="nextLoopCount">the number of the next loop count</param>
            <returns>true to execute the loop, false to end the loop </returns>
        </member>
        <member name="M:ET.FW.PPL.LoopControlTestJob.#ctor">
            <summary>
            Constructor: Initialize all internal values, e.g. ObservableObjectHelpers
            </summary>
        </member>
        <member name="P:ET.FW.PPL.LoopControlTestJob.NextLoopCount">
            <summary>
            Incoming Value, only for direct reads (x = inputParameter.Value), no events!
            </summary>
        </member>
        <member name="P:ET.FW.PPL.LoopControlTestJob.LoopContinue">
            <summary>
            Outgoing Value or Event.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.SwitchStateLoopTestJob">
            <summary>
            A Loop, which automatically binds the Testjobs within
            to its CurrentStateOutput, which itself is bound to its
            CurrentStateInput. automatically determines, whether the new
            State is known and handled by a Testjob within, none or a
            state which is not known by any Testjob within the state, i.e.
            and Else-State, if a Testjob is defined within handling the else.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.knownStates">
            <summary>
            List of the known states, i.e. all states being required by the state-jobs within.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.knowsElseState">
            <summary>
            Flag, whether a TestJob within this Loop has PredefinedStateNames.ELSE_STATE as RequiredState
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.knownsNoneState">
            <summary>
            Flag, whether a TestJob within this Loop has PredefinedStateNames.NONE_STATE as RequiredState
            </summary>
        </member>
        <member name="P:ET.FW.PPL.SwitchStateLoopTestJob.CurrentStateOutput">
            <summary>
            Output of the current state for the Testjobs within this loop
            </summary>
        </member>
        <member name="P:ET.FW.PPL.SwitchStateLoopTestJob.PreventMultipleJobsRunningSimultaneously">
            <summary>
            Prevent multiple Jobs with different RequiredStates running simultaneously
            </summary>
        </member>
        <member name="P:ET.FW.PPL.SwitchStateLoopTestJob.CancelLoopIterationOnStateChange">
            <summary>
            Cancel current loop-iteration if the state changes.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.DoPrepareImpl">
            <summary>
            Checks, whether TestJobs with no RequiredState are contained, or whether more than one TestJob require the same state,
            build ob the known states and determines, whether ELSE_STATE and / or NONE_STATE are known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.DoExecImplPrepareIteration">
            <summary>
            Refreshes the forwarded state if needed, to assure all TestJobs do know the
            correct state at start.
            </summary>
            <returns>FALSE, if loop shall abort, which may happen if the last forwarded state has no TestJob handling it.</returns>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.DoExecImplCleanupIteration">
            <summary>
            Assure cleanups.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.waitingForAllStarted">
            <summary>
            Flag which indicates, whether this Loop is waiting for all TestJobs reported as started.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.lastStateInputEvent">
            <summary>
            The last state which has been set to CurrentStateInputToLoopForward.
            </summary>
        </member>
        <member name="F:ET.FW.PPL.SwitchStateLoopTestJob.lastForwardedStateHasHandler">
            <summary>
            Flag, whether the last forwarded state has a TestJob handling the state, i.e. having the forwarded state
            defined as RequiredState.
            </summary>
        </member>
        <member name="P:ET.FW.PPL.SwitchStateLoopTestJob.CurrentStateInputToLoopForward">
            <summary>
            Gets or sets a value what the current state is.<para></para>
            Must be linked, if RequiredState is set.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.RefreshCurrentStateOutputIfNeeded">
            <summary>
            Forwards the state set at lastStateInputEvent, if it has not been forwarded yet.<para></para>
            This method must not be called, if the state must not be forwarded!
            </summary>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.DetermineStateToForward(System.String,System.Boolean@)">
            <summary>
            Checks the newState and returns the state to forward, i.e. checks, whether
            a predefinedStateName has to be forwarded and whether state returned state
            will have a handler, i.e. a TestJob within the loop exists which requires the
            forwarded state.
            </summary>
            <param name="newState">The newState which has been set to the corresponding property.</param>
            <param name="stateHasHandler">out: TRUE if a Testjob within this loop exists which has the returned state defined as required, FALSE otherwise.</param>
            <returns>The state to forward, i.e. newState or a PredefinedStateName.</returns>
        </member>
        <member name="M:ET.FW.PPL.SwitchStateLoopTestJob.CurrentStateInputToLoopForwardEventHandler(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{System.String})">
            <summary>
            override the eventhandler to forward the incoming new state
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestProperty">
            <summary>
            Attribute for TestJob properties
            </summary>
        </member>
        <member name="P:ET.FW.PPL.TestProperty.Unit">
            <summary>
            Gets or sets the unit string.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:ET.FW.PPL.TestProperty.InitValue">
            <summary>
            Gets or sets the init value this job uses when no value is set.
            The job must use this value if the corresponding property did not get a value using ParamSet oder ParamLink, or an ParamExport defaultValue.
            </summary>
            <value>The init value.</value>
        </member>
        <member name="P:ET.FW.PPL.TestProperty.MinValue">
            <summary>
            Gets or sets the min value.
            </summary>
            <value>The min value.</value>
        </member>
        <member name="P:ET.FW.PPL.TestProperty.MaxValue">
            <summary>
            Gets or sets the max value.
            </summary>
            <value>The max value.</value>
        </member>
        <member name="P:ET.FW.PPL.TestProperty.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:ET.FW.PPL.Requires">
             <summary>
             Test the environment for test jobs.
             As PPL does not know about such a things as an "Environment", the tests must be done
             in the application logic, before the testPlanManager is called.
             The jobs will have the attributes, so the attributes are defined here in PPL.Definition"
             The test plan will check this dependencies before doing a prepare. If any requirement is failed, 
             the test plan will not run. In a batch test set, the test is done before the first plan is called, 
             so the test will not fail during the batch run. The test set editor will allow to filter the 
             available jobs against the current configuration so all not suitable jobs are not displayed.
             
             Examples:
             [Requires(Requires.Item.Bus, "BackboneCanStd", Depends = Requires.Depend.MustNotHave)]
             [Requires(Requires.Item.Service, "EIS")] // MustHave is the Default
             [Requires(Requires.Item.Device, "ControlDevice", Depends = Requires.Depend.MustHave)]
             [Requires(Requires.Item.Catalog, "BackboneCanStd", Depends = Requires.Depend.CanHave)]
            
             [Requires(Require.VariantXXX, "NTG.NTG5")] // BOAE: Variant dependencies: not yet defined how this works!
             public class SomeJob : StandardTestJob ...
             </summary>
        </member>
        <member name="M:ET.FW.PPL.Requires.#ctor(ET.FW.PPL.Requires.Item,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.Requires"/> class.
            </summary>
            <param name="itemType">Type of the item.</param>
            <param name="itemName">Name of the item.</param>
        </member>
        <member name="P:ET.FW.PPL.Requires.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:ET.FW.PPL.Requires.ItemType">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:ET.FW.PPL.Requires.Depends">
            <summary>
            Gets or sets the depends.
            </summary>
            <value>The depends.</value>
        </member>
        <member name="T:ET.FW.PPL.Requires.Item">
            <summary>
            The Items the job can depend on
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Item.Bus">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Item.Service">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Item.Device">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Item.Catalog">
            <summary></summary>
        </member>
        <member name="T:ET.FW.PPL.Requires.Depend">
            <summary>
            The different ways a job can depend on an item
            </summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Depend.MustHave">
            <summary>Item must be available for the job to run. This is the default</summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Depend.CanHave">
            <summary>May have special functionality if this item is available</summary>
        </member>
        <member name="F:ET.FW.PPL.Requires.Depend.MustNotHave">
            <summary>Job cannot run it this item is available</summary>
        </member>
        <member name="T:ET.FW.PPL.RequireAttributeSummary">
            <summary>
            Collection of Attributes
            </summary>
        </member>
        <member name="F:ET.FW.PPL.RequireAttributeSummary.MustHaveList">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.RequireAttributeSummary.CanHaveList">
            <summary></summary>
        </member>
        <member name="F:ET.FW.PPL.RequireAttributeSummary.MustNotHaveList">
            <summary></summary>
        </member>
        <member name="M:ET.FW.PPL.RequireAttributeSummary.Add(ET.FW.PPL.RequireAttributeSummary)">
            <summary>
            Adds the specified requirement summary
            </summary>
            <param name="s">The summary.</param>
        </member>
        <member name="M:ET.FW.PPL.RequireAttributeSummary.Add(System.Collections.Generic.Dictionary{System.String,ET.FW.PPL.Requires},System.Collections.Generic.Dictionary{System.String,ET.FW.PPL.Requires})">
            <summary>
            Adds the specified requirement source list to the target
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:ET.FW.PPL.RequireAttributeSummary.Add(ET.FW.PPL.Requires)">
            <summary>
            Adds the specified Requirement
            </summary>
            <param name="r">The r.</param>
        </member>
        <member name="M:ET.FW.PPL.RequireAttributeSummary.CheckLists">
            <summary>
            Checks the lists.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.SubPlanTestJob">
            <summary>
            Executes the TestPlan one (1) time.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.LoopTestJob">
            <summary>
            Loops over the jobDefs until enterLoop is false
            LoopDelegate should be defined as: delegate (int currentLoopCount) { return true; }
            First enterLoop call has a currentLoopCount of "1".
            Without parameters this loop will run one (1) time.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.ObservableObjectHelper`1">
            <summary>
            Object helps to handle ObservableObject events during execution states:
            - Enable / Disable events
            - Re-register event handler when observableObject changes
            - Receive events from multiple Observable Objects
            </summary>
            <typeparam name="T">Type of IReadOnlyObservableObject to control</typeparam>
        </member>
        <member name="P:ET.FW.PPL.ObservableObjectHelper`1.IObservableObject">
            <summary>
            ObservableObject to control
            </summary>
        </member>
        <member name="M:ET.FW.PPL.ObservableObjectHelper`1.AddSource(ET.FW.Core.Common.IReadOnlyObservableObject{`0})">
            <summary>
            Add an observable object as observed sender to this helper
            </summary>
            <param name="objectToObserve"></param>
        </member>
        <member name="M:ET.FW.PPL.ObservableObjectHelper`1.RemoveSource(ET.FW.Core.Common.IReadOnlyObservableObject{`0})">
            <summary>
            Remove an observable object as observed sender to this helper
            </summary>
            <param name="objectNotToObserveAnymore"></param>
        </member>
        <member name="P:ET.FW.PPL.ObservableObjectHelper`1.Count">
            <summary>
            Returns the number of Observable Objects this helper listens to
            </summary>
        </member>
        <member name="P:ET.FW.PPL.ObservableObjectHelper`1.Value">
            <summary>
            Get the value of the current observableObject, default(TYPE) if no (0) or more than 1 OObject is registered,
            use "Count" to check number of OObjects.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.ObservableObjectHelper`1.ActivateEvents">
            <summary>
            Register added input events 
            </summary>
        </member>
        <member name="M:ET.FW.PPL.ObservableObjectHelper`1.DeactivateEventsAfterExecute">
            <summary>
            Unregister added input events 
            </summary>
        </member>
        <member name="M:ET.FW.PPL.ObservableObjectHelper`1.DeactivateEvents">
            <summary>
            Unregister added input events 
            </summary>
        </member>
        <member name="T:ET.FW.PPL.ComplexTestJob">
            <summary>
            Default Class for Testjobs that might create Sub-Testjobs (by ExecAndWait or in Prepare)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.StandardTestJob">
            <summary>
            Default class for Jobs that create NO internal TestJobs (no ExecAndWait ..., no new TestJobs in Prepare)
            </summary>
        </member>
        <member name="T:ET.FW.PPL.WaitTimeTestJob">
            <summary>
            Wait some Time. Wrapper for Base class in Framework
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestJobDef">
            <summary>
            Framework class for TestJobDef instances
            </summary>
        </member>
        <member name="M:ET.FW.PPL.TestJobDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.TestJobDef"/> class.
            </summary>
        </member>
        <member name="T:ET.FW.PPL.TestPlanDef">
            <summary>
            Framework class for TestPlanDef instances
            </summary>
        </member>
        <member name="M:ET.FW.PPL.TestPlanDef.#ctor">
            <summary>
            Constructor for a TestPlanDef. As test plan defs are created using a static method, this instance is newer created.
            </summary>
        </member>
        <member name="M:ET.FW.PPL.TestPlanDef.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.TestPlanDef"/> class.
            Please do not use this to create a testPlanDef, needs cleanup: see examples
            </summary>
            <param name="name">The name.</param>
            <param name="publicName">if set to <c>true</c> [public name].</param>
        </member>
        <member name="M:ET.FW.PPL.TestPlanDef.#ctor(System.String,ET.FW.PPL.DataModel.TestPlanDefData)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.PPL.TestPlanDef"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="master">The master.</param>
        </member>
    </members>
</doc>
