<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.FW.Hal.Can</name>
    </assembly>
    <members>
        <member name="T:ET.FW.Hal.Can.CanAscWriter">
            <summary>
            Trace writer which writes CAN messages in ASC format
            </summary>
            <remarks>
            Currently writer supports only one message source for Standard CAN messages (not events) which will be traced as channel 1
            Trace format is fixed.
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.CanAscWriter._filename">
            <summary>
            file path of output file
            Optional: May be null if writer is constructed for existing output stream
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanAscWriter._output">
            <summary>
            Output stream
            may be external stream to be used by writer or may be created by writer itself
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanAscWriter._writer">
            <summary>
            Writer used to access output stream. Instance exists only while AscWriter is running.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.#ctor(System.String)">
            <summary>
            Constructor for writer which creates output fil
            </summary>
            <param name="filename">Output file path</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.#ctor(System.IO.Stream)">
            <summary>
            Constructor for writer which writes to existing stream
            </summary>
            <param name="stream">Output stream</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanAscWriter.EventSource">
            <summary>
            Message source for CAN error events to write to trace
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanAscWriter.IsRunning">
            <summary>
            Check if writer is active
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanAscWriter.MessageSource">
            <summary>
            Message source for CAN messages to write to trace
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanAscWriter.ET#FW#Core#Events#IEventDecoupling#Decoupler">
            <summary>
            Access event decoupler
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanAscWriter.StartTime">
            <summary>
            Start time of trace 
            </summary>
            <remarks>
            Setter rounds value down to whole second
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.AddMessageSource``1(ET.FW.Core.Messaging.IMessageSource{``0})">
            <summary>
            Adding a messagesource to the list of sources 
            to write messages to the asc file.
            </summary>
            <typeparam name="TMessage">Type of messages the messagesource provides</typeparam>
            <param name="messageSource">Source of messages to write to the asc-File</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.Dispose">
            <summary>
            Dispose writer
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.RemoveMessageSource(System.Object)">
            <summary>
            Removing a messagesource from the list of sources 
            </summary>
            <param name="messageSource">Source of messages to remove</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.Start">
            <summary>
            Start tracing
            </summary>
            <returns>true on success</returns>
            <remarks>
            If writer was constructed with a filename, the file is created here and closed in Stop() method.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.Stop">
            <summary>
            Stop tracing and close file
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.EventSource_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanEvent})">
            <summary>
            Handle error event from source: Write it to trace file
            </summary>
            <param name="sender">event source</param>
            <param name="e">parameter containing the error event</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.MessageSource_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handle message from source: write it to trace file
            </summary>
            <param name="sender">message source</param>
            <param name="e">parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanAscWriter.WriteFileHeader">
            <summary>
            Write header to output stream
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanBus">
            <summary>
            CAN bus API allows sending and receiving of CAN messages
            </summary>
            <remarks>
            Class must be public, because instances are created via reflection
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanBus.#ctor(System.String)">
            <summary>
            Constructor with bus name
            </summary>
            <param name="name">bus name</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanBus.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanBus.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol},ET.FW.Core.Hal.IChannelAccess,System.Boolean)">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <param name="channelAccess">Channel access, needed for cyclic sending </param>
            <param name="offline">is true if bus is used offline</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanBus.Dispose">
            <summary>
            Shutdown bus API
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanBus.ChannelAccess">
            <summary>
            optional channel access in HAL
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanBus.StdProtocol">
            <summary>
            Protocol for standard CAN messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanBus.TpProtocol">
            <summary>
            Protocol for transport protocol messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanBus.EventProtocol">
            <summary>
            Protocol for CAN event/error pseudo messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanBus.NetworkManagement">
            <summary>
            Gets the network management.
            </summary>
            <value>The network management.</value>
        </member>
        <member name="T:ET.FW.Hal.Can.CanErrorEvent">
            <summary>
            CAN bus error event
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanErrorEvent.Error">
            <summary>
            CAN bus error type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanErrorEvent.Text">
            <summary>
            Event description in plain text (optional)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanErrorEvent.EventText">
            <summary>
            Textual event description (used e.g. for Translate() )
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanErrorEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanErrorEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanErrorEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanNMEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanEventProtocol">
            <summary>
            Hardware protocol for CAN Event messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanEventProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.CanEventProtocol"/> class.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessage">
            <summary>
            CAN message (ET Framework standard CAN message based on AutomotiveCanMessage)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessage.ExtendedCanIdBitMask">
            <summary>
            Bitmask to indicate if the message is a extended identifier message.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessage.InvalidID">
            <summary>
            Invalid ID used for construction of undefined messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessage.#ctor">
            <summary>
            Constructor for message to be sent<para></para>
            Changed to public for Database
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessage.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Constructor for message to be sent
            </summary>
            <param name="canId">CAN message ID</param>
            <param name="payload">Message data bytes</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessage.Id">
            <summary>
            CAN message ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessage.GetCacheKey">
            <summary>
            Get cache key
            </summary>
            <returns>The cache key</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessage.ErrorDecoder">
            <summary>
            The Error Decoder to use.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageFactory">
            <summary>
            ET Framework factory for CAN messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageFactory.Instance">
            <summary>
            The only one CAN message factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageFactory.#ctor">
            <summary>
            Private constructor, to avoid explicit instantiation
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageFactory.MessageType">
            <summary>
            Represents the supported CAN message types.
            </summary>
            <remarks>
            TAKE CARE:
            Enum value must match index of corresponding message types in 'types' array
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.Undefined">
            <summary>Message type undefined</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.StdMessage">
            <summary>standard message</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.TpMessage">
            <summary>TP message</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.BusEvent">
            <summary>Bus event</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.TpError">
            <summary>TP error event</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.NMOsekEvent">
            <summary>OSEK Network management event</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.NMAutosarEvent">
            <summary>Autosar Network management event</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.SignalChanged">
            <summary>Signal changed message.</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.ObserverMessage">
            <summary>CAN observer output</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.MessageType.CanCycleTimeMessage">
            <summary>CAN observer output</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageFactory.types">
            <summary>
            Array of all supported message types
            </summary>
            <remarks>
            TAKE CARE:
            Array index must match corresponding MessageType enum value - 1
            List index must not be changed, because it is used as message type in serialization!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageFactory.Types">
            <summary>
            List of all supported types
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageRepository">
            <summary>
            Repository for all CAN message values of one CAN network. Repository can be used by different clients to monitor message content, timing etc.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.GetRepository(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Get message repository for given CAN standard protocol.
            If no matching repository is found, it is created.
            </summary>
            <param name="protocol">CAN standard protocol to monitor</param>
            <returns>CAN message repository</returns>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.ResetGap">
            <summary>
            Time gap in received messages which triggers auto reset
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.#ctor(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Construct new message repository for given CAN bus
            </summary>
            <param name="protocol">can standard protocol to monitor</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageRepository.Protocol">
            <summary>
            CAN bus to monitor
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageRepository.Catalog">
            <summary>
            Associated CAN catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.clients">
            <summary>
            List of all registered clients
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.syncClients">
            <summary>
            Synchronization object to be locked on every access to client list client data in repository
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.AddClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Register new client for message amd network callbacks
            </summary>
            <param name="client">Client to be notified</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.RemoveClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Remove previously registered client
            </summary>
            <param name="client">Client to be removed</param>
            <returns>true, if client registration was found and removed</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageRepository.Item(System.UInt32)">
            <summary>
            Access latest message which was received with the given identifier
            </summary>
            <param name="canID">CAN Identifier of message to fetch from repository</param>
            <returns>CAN message, if already received since last network startup, otherwise <c>null</c></returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Initialize">
            <summary>
            Register repository at CAN protocols for messages and network events
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Dispose">
            <summary>
            Deregister repository from CAN protocols
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageRepository.IsRegistered">
            <summary>
            Check if repository is registered for message reception
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Reset(System.DateTime)">
            <summary>
            Reset the message repository, all buffered messages are cleared.
            Client tags and message definitions are preserved
            </summary>
            <param name="time">Reset time (e.g. timestamp of messaqge which caused the reset)</param>
            <remarks>
            TODO: Find way to detect trace reload and reset repository without help from outside
            Workaround: reset repository if gap between received messages is longer than 5 sec
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageRepository.Entry">
            <summary>
            Repository entry for one message ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Entry.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Constructor with definition
            </summary>
            <param name="definition">message definition from catalog</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanMessageRepository.Entry.Message">
            <summary>
            last received CAN message of this ID
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.Entry.Definition">
            <summary>
            CAN message definition from catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.Entry.Clients">
            <summary>
            List of registered client datas
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Entry.FindClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Find entry in client data list
            </summary>
            <param name="client">client to search for</param>
            <returns>matching data or <c>null</c> if not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Entry.RemoveClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Remove entry in client data list
            </summary>
            <param name="client">client to remove</param>
            <returns>true if client was found and removed</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageRepository.ClientData">
            <summary>
            Client information at every message entry
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.ClientData.#ctor(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Constructor with client
            </summary>
            <param name="client">repository client</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.ClientData.Client">
            <summary>
            Client reference
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.ClientData.Tag">
            <summary>
            Client and message specific tag
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.Protocol_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Event handler for received CAN messages:
            Store message in repository and notify registered clients
            </summary>
            <param name="sender">standard protocol</param>
            <param name="e">event args containig the newly received CAN message</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRepository.lastMessageTime">
            <summary>
            Timestamp of latest received message
            </summary>
            <value>latest message timestamp; null if no message received</value>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.GetDefinition(System.UInt32)">
            <summary>
            Get message definition from catalog
            </summary>
            <param name="messageID">message Identifier</param>
            <returns>Message definition from catalog, <c>null</c> if not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.NotifyUpdate(ET.FW.Hal.Can.CanMessageRepository.Entry,ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Notify clients of repeated reception of message
            </summary>
            <param name="entry">message entry, containing new message data and client list</param>
            <param name="oldMessage">previously received message data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRepository.NotifyInitial(ET.FW.Hal.Can.CanMessageRepository.Entry)">
            <summary>
            Notify clients of initial reception of message. Clients can switch further notifications for the message ID and can set a tag object.
            </summary>
            <param name="entry">message entry, containing new message data and message specific client list</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageRouting">
            <summary>
            Simple demo implementation for CAN message routing
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanMessageRouting.Route">
            <summary>
            Information about one message route
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRouting.Route.#ctor(System.UInt32,ET.FW.Hal.Can.ICanStdProtocol,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.CanMessageRouting.Route"/> class.
            </summary>
            <param name="srcID">Source message CAN identifier</param>
            <param name="targetProtocol">The target protocol.</param>
            <param name="targetID">Target message CAN identifier</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRouting.Route.SrcID">
            <summary>
            Source message CAN identifier
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRouting.Route.TargetProtocol">
            <summary>
            Target protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRouting.Route.TargetID">
            <summary>
            Target message CAN identifier
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRouting.#ctor(ET.FW.Hal.Can.ICanStdProtocol)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.CanMessageRouting"/> class.
            </summary>
            <param name="srcProtocol">The source protocol.</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRouting.srcProtocol">
            <summary>
            Associated source protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanMessageRouting.routes">
            <summary>
            The configured routes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRouting.AddRoute(System.UInt32,ET.FW.Hal.Can.ICanStdProtocol,System.UInt32)">
            <summary>
            Add new route from associated CAN channel to target protocol
            </summary>
            <param name="srcMessageID">CAN ID of source message</param>
            <param name="targetProtocol">CAN standard protocol to transmit routed messages</param>
            <param name="targetMessageID">CAN ID for target message transmission (normally same as srcMessageID)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRouting.RemoveRoute(System.UInt32,ET.FW.Hal.Can.ICanStdProtocol,System.UInt32)">
            <summary>
            Removes route from associated CAN channel of target protocol
            </summary>
            <param name="srcMessageID">CAN ID of source message</param>
            <param name="targetProtocol">CAN standard protocol to transmit routed messages</param>
            <param name="targetMessageID">CAN ID for target message transmission (normally same as srcMessageID)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanMessageRouting.srcProtocol_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handles the Output event of the srcProtocol control.
            </summary>
            <param name="sender">The event source</param>
            <param name="e">The <see cref="T:ET.FW.Core.Messaging.MessageEventArgs`1"/> instance containing the received message.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol">
            <summary>
            Software Protocol for CAN Cycle Time.
            </summary>
            <remarks>Alternativ implementation using CAN message repository.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.GenerateCanSignalMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Create CAN Signal message for protocol output
            </summary>
            /// /// <param name="definition"></param>
            <param name="currCanMessage">Current Can Message </param>
            <param name="lastCanMessage">Last Can Message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.Fill(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Fill the CanSignalChangedMessage with data from the given CanMessage.
            </summary>
            <param name="curCanMessage"></param>
            <param name="lastCanMessage"></param>
            /// <param name="definition"></param>
            <returns><c>true</c> if the operation was completed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.MessageText(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Create string for given CAN message
            </summary>
            <param name="message">message to translate</param>
            <returns>message string</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.Dispose">
            <summary>
            Dispose the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.ET#FW#Hal#Can#ICanMessageRepositoryClient#Reset(System.DateTime)">
            <summary>
            Notification: Repository resets itself
            </summary>
            <param name="time">Timestamp (of message which triggered reset)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.MessageInitialReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Object@)">
            <summary>
            Callback from CAN message repository for first reception of CAN message
            </summary>
            <param name="message">CAN message</param>
            <param name="definition">Message definition from catalog</param>
            <param name="tag">Client specific tag</param>
            <returns>true to switch on further notifications for this message, false to ignore given message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeSoftwareProtocol.MessageUpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Boolean,System.Object@)">
            <summary>
            Callback from CAN message repository for repeated reception of CAN message
            </summary>
            <param name="newMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="tag">client specific tag for message ID</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanCycleTimeMessage">
            <summary>
            The implementation of the message for signal changed event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.#ctor">
            <summary>
            Create a new instance if the <see cref="T:ET.FW.Hal.Can.CanCycleTimeMessage"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.UId">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.Payload">
            <summary>
            Access data bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.Timestamp">
            <summary>
            Message timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.HWTimestamp">
            <summary>
            Orignal timestamp of the Hardware (only set if available)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.LasTimestamp">
            <summary>
            Orignal LasTimestamp of the Hardware (only set if available)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.RxTx">
            <summary>
            Received/transmitted message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.CanCycletime">
            <summary>
            Can Cycletime
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.Protocol">
            <summary>
            Assigned protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.Translate">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.TranslateMessage">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.ET#FW#Core#Messaging#IMessage#Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.ET#FW#Core#Messaging#IMessage#Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.MessageError">
            <summary>
            Proprty for an Error detected with the message.<para></para>
            MessageError == null means no error has been detected at the time the comparison is made.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.HasError">
            <summary>
            Returns, whether an error has been detected for this Message.
            </summary>
            <returns>True if has error</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanCycleTimeMessage.GetCacheKey">
            <summary>
            Returns key for caching.
            </summary>
            <returns>Key for caching</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.Id">
            <summary>
            CAN message ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanCycleTimeMessage.Text">
            <summary>
            Message text
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol">
            <summary>
            Software protocol wrapper for CAN observer
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.EnableE2EObserver">
            <summary>
            Parameter which controls usage of E2E protection observer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.e2eObserver">
            <summary>
            E2E observer instance, set if E2E protection CRC check is enabled and E2E protection is configured for the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cach</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cach</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessageSoftwareProtocol.Catalog">
            <summary>
            Optional Catalog for message re-translation
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanPduMessage">
            <summary>
            Can Pdu message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessage.#ctor(System.Int64,System.Byte[])">
            <summary>
            Constructor for message to be sent
            </summary>
            <param name="pduId">Pdu Id</param>
            <param name="payload">Pdu data bytes</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessage.PduId">
            <summary>
            Pdu message ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessage.Length">
            <summary>
            Length of Pdu data bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. a Can message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessage.IsFullHeader">
            <summary>
            For contained Pdu header type
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanPduMessage.GetCacheKey">
            <summary>
            Get cache key
            </summary>
            <returns>The cache key</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanPduMessage.ErrorDecoder">
            <summary>
            The Error Decoder to use.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0">
            <summary>
            Class extracts CAN catalog data from autosar arxml file
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.DummyDeviceName">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.ignoreEcus">
            <summary>
            Names of Ecus to be ignored from Catalog(names should be seperated by comma)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.Reader">
            <summary>
            Access customized XML reader.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.XmlRoot">
            <summary>
            Root elemet of xml data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.NetworkPackage">
            <summary>
            Network TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.SignalGroupArpackage">
            <summary>
            Contains information about End To End protection data
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.PduPackageArpackages">
            <summary>
             PDUs TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.SignalPackageArpackages">
            <summary>
             Signal Package for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.ExtractData">
            <summary>
            Extracts the catalog data from XML structure
            </summary>
            <returns>CAN network definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.ExtractDevices(ET.FW.Hal.Arxml.Xml.Autosar4_2.ARPACKAGE,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts data of CAN devices from XML data structure
            </summary>
            <param name="ecuInstancesPackage">Top level package ECU-INSTANCES</param>
            <param name="network">CAN network defintion to add devices to</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.ExtractMessages(ET.FW.Hal.Arxml.Xml.Autosar4_2.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts messages and contained signals information.
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.ExtractTPChannels(ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition)">
            <summary>
            Extract TP channel information from XML data structure
            </summary>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.GetDummyDevice(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Gets the dummy device (creates it on first access). Dummy device is used as sender for messages without sender in the arxml file.
            </summary>
            <param name="network">Network definition</param>
            <returns>the dummy device</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0.GetDevices(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Autosar4_2.ECUINSTANCE},ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Get devices from network which match given ECUs
            </summary>
            <param name="ecus">List of ECU elements</param>
            <param name="network">The network definition</param>
            <returns>list of devices</returns>
            <remarks>If no matching device found, list contains one dummy device</remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3">
            <summary>
            Class extracts CAN catalog data from autosar arxml file
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.DummyDeviceName">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.ignoreEcus">
            <summary>
            Names of Ecus to be ignored from Catalog(names should be seperated by comma)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.Reader">
            <summary>
            Access customized XML reader.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.XmlRoot">
            <summary>
            Root elemet of xml data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.NetworkPackage">
            <summary>
            Network TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.E2EProtections">
            <summary>
            End To End protection set, containing all E2E protection data
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.ExtractData">
            <summary>
            Extracts the catalog data from XML structure
            </summary>
            <returns>CAN network definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.ExtractDevices(ET.FW.Hal.Arxml.Xml.ARPackage,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts data of CAN devices from XML data structure
            </summary>
            <param name="ecuInstancesPackage">Top level package ECU-INSTANCES</param>
            <param name="network">CAN network defintion to add devices to</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.ExtractMessages(ET.FW.Hal.Arxml.Xml.Can.PhysicalChannel,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts messages and contained signals information.
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.ExtractTPChannels(ET.FW.Hal.Arxml.Xml.Can.PhysicalChannel,ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition)">
            <summary>
            Extract TP channel information from XML data structure
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.GetDummyDevice(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Gets the dummy device (creates it on first access). Dummy device is used as sender for messages without sender in the arxml file.
            </summary>
            <param name="network">Network definition</param>
            <returns>the dummy device</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3.GetDevices(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Can.EcuInstance},ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Get devices from network which match given ECUs
            </summary>
            <param name="ecus">List of ECU elements</param>
            <param name="network">The network definition</param>
            <returns>list of devices</returns>
            <remarks>If no matching device found, list contains one dummy device</remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3">
            <summary>
            Class extracts CAN catalog data from autosar arxml file
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.DummyDeviceName">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.ignoreEcus">
            <summary>
            Names of Ecus to be ignored from Catalog(names should be seperated by comma)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.Reader">
            <summary>
            Access customized XML reader.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.XmlRoot">
            <summary>
            Root elemet of xml data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.NetworkPackage">
            <summary>
            Network TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.SignalGroupArpackage">
            <summary>
            Contains information about End To End protection data
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.PduPackageArpackages">
            <summary>
             PDUs TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.SignalPackageArpackages">
            <summary>
             Signal Package for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.ExtractData">
            <summary>
            Extracts the catalog data from XML structure
            </summary>
            <returns>CAN network definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.ExtractDevices(ET.FW.Hal.Arxml.Xml.Autosar4_3.ARPACKAGE,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts data of CAN devices from XML data structure
            </summary>
            <param name="ecuInstancesPackage">Top level package ECU-INSTANCES</param>
            <param name="network">CAN network defintion to add devices to</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.ExtractMessages(ET.FW.Hal.Arxml.Xml.Autosar4_3.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts messages and contained signals information.
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.ExtractTPChannels(ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition)">
            <summary>
            Extract TP channel information from XML data structure
            </summary>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.GetDummyDevice(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Gets the dummy device (creates it on first access). Dummy device is used as sender for messages without sender in the arxml file.
            </summary>
            <param name="network">Network definition</param>
            <returns>the dummy device</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3.GetDevices(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Autosar4_3.ECUINSTANCE},ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Get devices from network which match given ECUs
            </summary>
            <param name="ecus">List of ECU elements</param>
            <param name="network">The network definition</param>
            <returns>list of devices</returns>
            <remarks>If no matching device found, list contains one dummy device</remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046">
            <summary>
            Class extracts CAN catalog data from autosar arxml file
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.DummyDeviceName">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.ignoreEcus">
            <summary>
            Names of Ecus to be ignored from Catalog(names should be seperated by comma)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.Reader">
            <summary>
            Access customized XML reader.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.XmlRoot">
            <summary>
            Root elemet of xml data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.NetworkPackage">
            <summary>
            Network TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.SignalGroupArpackage">
            <summary>
            Contains information about End To End protection data
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.PduPackageArpackages">
            <summary>
             PDUs TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.SignalPackageArpackages">
            <summary>
             Signal Package for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.ExtractData">
            <summary>
            Extracts the catalog data from XML structure
            </summary>
            <returns>CAN network definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.ExtractDevices(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts data of CAN devices from XML data structure
            </summary>
            <param name="ecuInstancesPackage">Top level package ECU-INSTANCES</param>
            <param name="network">CAN network defintion to add devices to</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.ExtractMessages(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Extracts messages and contained signals information.
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.ExtractTPChannels(ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition)">
            <summary>
            Extract TP channel information from XML data structure
            </summary>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.GetDummyDevice(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Gets the dummy device (creates it on first access). Dummy device is used as sender for messages without sender in the arxml file.
            </summary>
            <param name="network">Network definition</param>
            <returns>the dummy device</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046.GetDevices(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ECUINSTANCE},ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Get devices from network which match given ECUs
            </summary>
            <param name="ecus">List of ECU elements</param>
            <param name="network">The network definition</param>
            <returns>list of devices</returns>
            <remarks>If no matching device found, list contains one dummy device</remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition">
            <summary>
            Represents the CAN network with different devices and additional TP connections
            </summary>
            <remarks>
            Extension of the standard network definition with additional TP connections information
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition.TPChannels">
            <summary>
            TP channel definitions
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.DeviceCreator">
            <summary>
            Helper class to create and parametrize devices from Xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.DeviceCreator.#ctor(ET.FW.Hal.Arxml.Xml.Can.EcuInstance,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.DeviceCreator"/> class.
            </summary>
            <param name="ecu">EcuInstance xml element</param>
            <param name="network">Target network definition</param>
            <param name="loader">ARXML loader instance</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.DeviceCreator.Definition">
            <summary>
            The created device definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator">
            <summary>
            Helper class to extract EndToEnd protection configuration
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator.#ctor(ET.FW.Hal.Arxml.Xml.EndToEndProtection,ET.FW.Hal.Arxml.Xml.EndToEndProtectionISignalIPdu,System.Nullable{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator" /> class.
            </summary>
            <param name="protection">End to end protection xml element</param>
            <param name="pdu">End To End protection ISignalIPdu xml element</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator.Definition">
            <summary>
            The created protection definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator.ConfigureMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Update message definition: add E2E protection
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4">
            <summary>
            Helper class to extract EndToEnd protection configuration
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_2.ENDTOENDTRANSFORMATIONDESCRIPTION,ET.FW.Hal.Arxml.Xml.Autosar4_2.ENDTOENDTRANSFORMATIONISIGNALPROPSCONDITIONAL,System.Nullable{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator" /> class.
            </summary>
            <param name="variants">ENDTOEND transformation DESCRIPTION</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="e2ETransDescription"></param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4.Definition">
            <summary>
            The created protection definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4.ConfigureMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.String)">
            <summary>
            Update message definition: add E2E protection
            </summary>
            <param name="message">The message.</param>
            <param name="signalGrpName">Signal Group Name</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4_3.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_3.ENDTOENDTRANSFORMATIONDESCRIPTION,ET.FW.Hal.Arxml.Xml.Autosar4_3.ENDTOENDTRANSFORMATIONISIGNALPROPSCONDITIONAL,System.Nullable{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator" /> class.
            </summary>
            <param name="variants">ENDTOEND transformation DESCRIPTION</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="e2ETransDescription"></param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4_3.Definition">
            <summary>
            The created protection definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV4_3.ConfigureMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.String)">
            <summary>
            Update message definition: add E2E protection
            </summary>
            <param name="message">The message.</param>
            <param name="signalGrpName">Signal Group Name</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV_00046.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ENDTOENDTRANSFORMATIONDESCRIPTION,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ENDTOENDTRANSFORMATIONISIGNALPROPSCONDITIONAL,System.Nullable{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreator" /> class.
            </summary>
            <param name="variants">ENDTOEND transformation DESCRIPTION</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="e2ETransDescription"></param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV_00046.Definition">
            <summary>
            The created protection definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.E2EProtectionCreatorV_00046.ConfigureMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.String)">
            <summary>
            Update message definition: add E2E protection
            </summary>
            <param name="message">The message.</param>
            <param name="signalGrpName">Signal Group Name</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.GatewayCreator">
            <summary>
            creator of Gateway Pdus details
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.GatewayCreator.CreateGateway(System.IO.Stream,System.Collections.Generic.List{System.String})">
            <summary>
            Create Gateway Pdus for the ECU Extract
            </summary>
            <param name="stream"> Ecu Exract as Stream</param>
            <param name="busNames">List of Busnames configured</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.GatewayCreator.ExtractGateway(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,System.Collections.Generic.List{System.String})">
            <summary>
            Extract gatewayEcu from Agteways ARPackage
            </summary>
            <param name="gatewayPackage">gateway ARPackage</param>
            <param name="busNames">list of available bus names</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.GatewayCreator.GetRoutingPdu(System.String,System.String,System.String)">
            <summary>
            Get the RoutingPdu from pdurefname and network name
            </summary>
            <param name="pduRefName">pduRefName</param>
            <param name="networkName">networkName</param>
            <param name="networkName_Vlan">network name_Vlanid for ethernet</param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4">
            <summary>
            Helper class to create and parametrize messages from xml structure
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.CommunicationClusters">
            <summary>
            CommunicationClusters TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_2.CANFRAMETRIGGERING,ET.FW.Hal.Arxml.Xml.Autosar4_2.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator"/> class.
            </summary>
            <param name="frameTriggering">Frame triggering xml element</param>
            <param name="channel"></param>
            <param name="network">network definition</param>
            <param name="loader">ARXML loaderV4</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.GetRelatedEcus(ET.FW.Hal.Arxml.Xml.Autosar4_2.CANFRAMETRIGGERINGFRAMEPORTREF[],ET.FW.Hal.Arxml.Xml.Autosar4_2.COMMUNICATIONDIRECTIONTYPESIMPLE)">
            <summary>
            Gets a collection of related ECUs from collection of port references. The result is filtered for one communiction direction.
            </summary>
            <param name="refs">Port references</param>
            <param name="direction">The direction.</param>
            <returns>Collection of related ECUs</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.Definition">
            <summary>
            The message definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.frameTriggering">
            <summary>
            Frame triggering xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.frame">
            <summary>
            Frame xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.loader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractPdus">
            <summary>
            Extracts data of PDU mapped to single frame/message
            </summary>
            <remarks>
            CAN frames contain exactly one (main) PDU per frame
            -> start position is 0
            -> PDU length = Frame length
            Multiplexed messages/frames contain a single multiplexed PDU which contains some sub-PDUs
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractPdu(ET.FW.Hal.Arxml.Xml.Autosar4_2.PDUTOFRAMEMAPPINGPDUREF)">
            <summary>
            Extracts PDU data
            </summary>
            <param name="pdu">PDU xml element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractSpecialSignalTimings(ET.FW.Hal.Arxml.Xml.Autosar4_2.IPDUTIMING[])">
            <summary>
            Extracts timings of signals from transmission mode conditions
            </summary>
            <remarks>Some signal send parameters are extracted by SignalCreator.ExtractTiming()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.GetPduTriggering(ET.FW.Hal.Arxml.Xml.Autosar4_2.IDENTIFIER,ET.FW.Hal.Arxml.Xml.Autosar4_2.PDUTRIGGERING)">
            <summary>
            Gets the PDU triggering element for an PDU
            </summary>
            <param name="pdu">Target PDU</param>
            <param name="pdutrig"></param>
            <returns>PDU triggering, null if none found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractSignals(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING[],ET.FW.Hal.Arxml.Xml.Autosar4_2.PDUTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts data of signals associated with an PDU
            </summary>
            <param name="stps">Signal to PDU mapping</param>
            <param name="pduTriggering">Associated PDU triggering.</param>
            <param name="containedPdu"></param>
            <returns>Extracted signals (if signal with same name is already assigned to our message, the existing signal is added to result list)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.CreateDummyUpdateBitSignal(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Create dummy signal for update bit
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.UpdateUbitDetails(ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.String)">
            <summary>
            Update the UBit signal parameters.
            </summary>
            <param name="definition">Ethernet signal definition.</param>
            <param name="signalName">name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractGroupSignals(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Fetching all the UBit Signals from ISignalGroup type.
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of CanSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.GetGroupSignals(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING)">
            <summary>
            Get all the signals from ISignalGroup Ref type.
            </summary>
            <returns>Returns the Can signal definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractE2EProtection(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALIPDU,System.Nullable{System.UInt16},ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extract all associated E2E protections for this PDU
            </summary>
            <param name="pdu">PDU to extract protections for</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="containedPdu"></param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.ExtractMultiplexedPdu(ET.FW.Hal.Arxml.Xml.Autosar4_2.MULTIPLEXEDIPDU)">
            <summary>
            Extract content of multiplexed PDU
            </summary>
            <param name="pdu">the PDU</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4.SetCatalogFlags">
            <summary>
            Sets the catalog specific message flags
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator">
            <summary>
            Helper class to create and parametrize messages from xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.#ctor(ET.FW.Hal.Arxml.Xml.CanFrameTriggering,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator"/> class.
            </summary>
            <param name="frameTriggering">Frame triggering xml element</param>
            <param name="network">network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.GetRelatedEcus``1(System.Collections.Generic.IList{ET.FW.Hal.Arxml.Xml.Ref{``0}},ET.FW.Hal.Arxml.Xml.CommunicationDirectionType)">
            <summary>
            Gets a collection of related ECUs from collection of port references. The result is filtered for one communiction direction.
            </summary>
            <typeparam name="TPort">The data type of the port.</typeparam>
            <param name="refs">Port references</param>
            <param name="direction">The direction.</param>
            <returns>Collection of related ECUs</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.Definition">
            <summary>
            The message definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.frameTriggering">
            <summary>
            Frame triggering xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.frame">
            <summary>
            Frame xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.loader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractPdus">
            <summary>
            Extracts data of PDU mapped to single frame/message
            </summary>
            <remarks>
            CAN frames contain exactly one (main) PDU per frame
            -> start position is 0
            -> PDU length = Frame length
            Multiplexed messages/frames contain a single multiplexed PDU which contains some sub-PDUs
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractPdu(ET.FW.Hal.Arxml.Xml.IPduSubtype)">
            <summary>
            Extracts PDU data
            </summary>
            <param name="pdu">PDU xml element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractPduTiming(ET.FW.Hal.Arxml.Xml.IPduTiming)">
            <summary>
            Extracts data from IPduTiming and add it to message definition
            </summary>
            <param name="timing">PDU timing</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractSpecialSignalTimings(ET.FW.Hal.Arxml.Xml.IPduTiming)">
            <summary>
            Extracts timings of signals from transmission mode conditions
            </summary>
            <param name="timing">PDU timing</param>
            <remarks>Some signal send parameters are extracted by SignalCreator.ExtractTiming()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.GetPduTriggering(ET.FW.Hal.Arxml.Xml.IPduSubtype)">
            <summary>
            Gets the PDU triggering element for an PDU
            </summary>
            <param name="pdu">Target PDU</param>
            <returns>PDU triggering, null if none found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractSignals(System.Collections.Generic.IList{ET.FW.Hal.Arxml.Xml.ISignalToIPduMapping},ET.FW.Hal.Arxml.Xml.IPduTriggering)">
            <summary>
            Extracts data of signals associated with an PDU
            </summary>
            <param name="stps">Signal to PDU mapping</param>
            <param name="pduTriggering">Associated PDU triggering.</param>
            <returns>Extracted signals (if signal with same name is already assigned to our message, the existing signal is added to result list)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractE2EProtection(ET.FW.Hal.Arxml.Xml.SignalIPdu,System.Nullable{System.UInt16})">
            <summary>
            Extract all associated E2E protections for this PDU
            </summary>
            <param name="pdu">PDU to extract protections for</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.ExtractMultiplexedPdu(ET.FW.Hal.Arxml.Xml.MultiplexedIPdu)">
            <summary>
            Extract content of multiplexed PDU
            </summary>
            <param name="pdu">the PDU</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator.SetCatalogFlags(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3)">
            <summary>
            Sets the catalog specific message flags
            </summary>
            <param name="network">network definition</param>
            <param name="arxmlLoader">ARXML loader</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.CommunicationClusters">
            <summary>
            CommunicationClusters TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_3.CANFRAMETRIGGERING,ET.FW.Hal.Arxml.Xml.Autosar4_3.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator"/> class.
            </summary>
            <param name="frameTriggering">Frame triggering xml element</param>
            <param name="channel"></param>
            <param name="network">network definition</param>
            <param name="loader">ARXML loaderV4</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.GetRelatedEcus(ET.FW.Hal.Arxml.Xml.Autosar4_3.CANFRAMETRIGGERINGFRAMEPORTREF[],ET.FW.Hal.Arxml.Xml.Autosar4_3.COMMUNICATIONDIRECTIONTYPESIMPLE)">
            <summary>
            Gets a collection of related ECUs from collection of port references. The result is filtered for one communiction direction.
            </summary>
            <param name="refs">Port references</param>
            <param name="direction">The direction.</param>
            <returns>Collection of related ECUs</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.Definition">
            <summary>
            The message definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.frameTriggering">
            <summary>
            Frame triggering xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.frame">
            <summary>
            Frame xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.loader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractPdus">
            <summary>
            Extracts data of PDU mapped to single frame/message
            </summary>
            <remarks>
            CAN frames contain exactly one (main) PDU per frame
            -> start position is 0
            -> PDU length = Frame length
            Multiplexed messages/frames contain a single multiplexed PDU which contains some sub-PDUs
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractPdu(ET.FW.Hal.Arxml.Xml.Autosar4_3.PDUTOFRAMEMAPPINGPDUREF)">
            <summary>
            Extracts PDU data
            </summary>
            <param name="pdu">PDU xml element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractSpecialSignalTimings(ET.FW.Hal.Arxml.Xml.Autosar4_3.IPDUTIMING[])">
            <summary>
            Extracts timings of signals from transmission mode conditions
            </summary>
            <remarks>Some signal send parameters are extracted by SignalCreator.ExtractTiming()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.GetPduTriggering(ET.FW.Hal.Arxml.Xml.Autosar4_3.IDENTIFIER,ET.FW.Hal.Arxml.Xml.Autosar4_3.PDUTRIGGERING)">
            <summary>
            Gets the PDU triggering element for an PDU
            </summary>
            <param name="pdu">Target PDU</param>
            <param name="pdutrig"></param>
            <returns>PDU triggering, null if none found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractSignals(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING[],ET.FW.Hal.Arxml.Xml.Autosar4_3.PDUTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts data of signals associated with an PDU
            </summary>
            <param name="stps">Signal to PDU mapping</param>
            <param name="pduTriggering">Associated PDU triggering.</param>
            <param name="containedPdu"></param>
            <returns>Extracted signals (if signal with same name is already assigned to our message, the existing signal is added to result list)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.CreateDummyUpdateBitSignal(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Create dummy signal for update bit
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.UpdateUbitDetails(ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.String)">
            <summary>
            Update the UBit signal parameters.
            </summary>
            <param name="definition">Ethernet signal definition.</param>
            <param name="signalName">name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractGroupSignals(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Fetching all the UBit Signals from ISignalGroup type.
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="msgDefinition">PDU Definition</param>
            <param name="signals">List of CanSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.GetGroupSignals(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Get all the signals from ISignalGroup Ref type.
            </summary>
            <param name="grpRef">Object of ISignal to IPdu Mapping</param>
            <param name="msgDefinition">PDU Definition</param>
            <returns>Returns the Can signal definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractE2EProtection(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALIPDU,System.Nullable{System.UInt16},ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extract all associated E2E protections for this PDU
            </summary>
            <param name="pdu">PDU to extract protections for</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="containedPdu"></param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.ExtractMultiplexedPdu(ET.FW.Hal.Arxml.Xml.Autosar4_3.MULTIPLEXEDIPDU)">
            <summary>
            Extract content of multiplexed PDU
            </summary>
            <param name="pdu">the PDU</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV4_3.SetCatalogFlags">
            <summary>
            Sets the catalog specific message flags
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.CommunicationClusters">
            <summary>
            CommunicationClusters TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CANFRAMETRIGGERING,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CANPHYSICALCHANNEL,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreator"/> class.
            </summary>
            <param name="frameTriggering">Frame triggering xml element</param>
            <param name="channel"></param>
            <param name="network">network definition</param>
            <param name="loader">ARXML loaderV4</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.GetRelatedEcus(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CANFRAMETRIGGERINGFRAMEPORTREF[],ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMMUNICATIONDIRECTIONTYPESIMPLE)">
            <summary>
            Gets a collection of related ECUs from collection of port references. The result is filtered for one communiction direction.
            </summary>
            <param name="refs">Port references</param>
            <param name="direction">The direction.</param>
            <returns>Collection of related ECUs</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.Definition">
            <summary>
            The message definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.frameTriggering">
            <summary>
            Frame triggering xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.frame">
            <summary>
            Frame xml element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.loader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractPdus">
            <summary>
            Extracts data of PDU mapped to single frame/message
            </summary>
            <remarks>
            CAN frames contain exactly one (main) PDU per frame
            -> start position is 0
            -> PDU length = Frame length
            Multiplexed messages/frames contain a single multiplexed PDU which contains some sub-PDUs
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractPdu(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTOFRAMEMAPPINGPDUREF)">
            <summary>
            Extracts PDU data
            </summary>
            <param name="pdu">PDU xml element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractSpecialSignalTimings(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.IPDUTIMING[])">
            <summary>
            Extracts timings of signals from transmission mode conditions
            </summary>
            <remarks>Some signal send parameters are extracted by SignalCreator.ExtractTiming()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.GetPduTriggering(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.IDENTIFIER,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING)">
            <summary>
            Gets the PDU triggering element for an PDU
            </summary>
            <param name="pdu">Target PDU</param>
            <param name="pdutrig"></param>
            <returns>PDU triggering, null if none found</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING[],ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts data of signals associated with an PDU
            </summary>
            <param name="stps">Signal to PDU mapping</param>
            <param name="pduTriggering">Associated PDU triggering.</param>
            <param name="containedPdu"></param>
            <returns>Extracted signals (if signal with same name is already assigned to our message, the existing signal is added to result list)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.CreateDummyUpdateBitSignal(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Create dummy signal for update bit
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.UpdateUbitDetails(ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.String)">
            <summary>
            Update the UBit signal parameters.
            </summary>
            <param name="definition">Ethernet signal definition.</param>
            <param name="signalName">name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractGroupSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Collections.Generic.List{ET.FW.Hal.Can.Catalogs.CanSignalDefinition})">
            <summary>
            Fetching all the UBit Signals from ISignalGroup type.
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="msgDefinition">PDU Definition</param>
            <param name="signals">List of CanSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.GetGroupSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Get all the signals from ISignalGroup Ref type.
            </summary>
            <param name="grpRef">Object of ISignal to IPdu Mapping</param>
            <param name="msgDefinition">PDU Definition</param>
            <returns>Returns the Can signal definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractE2EProtection(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALIPDU,System.Nullable{System.UInt16},ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extract all associated E2E protections for this PDU
            </summary>
            <param name="pdu">PDU to extract protections for</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
            <param name="containedPdu"></param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.ExtractMultiplexedPdu(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.MULTIPLEXEDIPDU)">
            <summary>
            Extract content of multiplexed PDU
            </summary>
            <param name="pdu">the PDU</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.MessageCreatorV_00046.SetCatalogFlags">
            <summary>
            Sets the catalog specific message flags
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.NetworkCreator">
            <summary>
            Helper class to create and parametrize CAN network definition from Xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.NetworkCreator.#ctor(ET.FW.Hal.Arxml.Xml.Can.CanCluster)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.NetworkCreator"/> class.
            </summary>
            <param name="canCluster">CAN-CLUSTER xml element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.NetworkCreator.ExtractParameters(ET.FW.Hal.Arxml.Xml.Can.CanCluster)">
            <summary>
            Extracts network parameters from CAN-CLUSTER element
            </summary>
            <param name="cluster">CAN cluster xml element</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.NetworkCreator.Definition">
            <summary>
            The network definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4">
            <summary>
            Helper class to create and parametrize signal definitions from xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNAL,ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_2.AUTOSAR)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_2.AUTOSAR)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
            <param name="message">Related message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.SetReceivers(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Autosar4_2.ECUINSTANCE})">
            <summary>
            Sets the receivers for this signal
            </summary>
            <param name="receivers">List of ECU elements with receivers</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.Definition">
            <summary>
            The signal definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.iSignal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.ExtractTiming(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.ExtractSystemSignalData">
            <summary>
            Extracts the system signal data and fills signal definition instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.GetMaximumBitwiseValue">
            <summary>
            Fetching the Maximum Bitwise Value from the lenght.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.GetMaskedLimit(ET.FW.Hal.Arxml.Xml.Autosar4_2.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>String value of the limit</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.SetupBoolean(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.SetupInteger(ET.FW.Hal.Arxml.Xml.Autosar4_2.COMPUMETHOD,ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.GetLimit(ET.FW.Hal.Arxml.Xml.Autosar4_2.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.Autosar4_2.COMPURATIONALCOEFFS,ET.FW.Hal.Arxml.Xml.Autosar4_2.COMPUMETHOD)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.ExtractReceivers(ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTRIGGERING,System.Boolean)">
            <summary>
            Extracts receivers from collection of port references.
            If the referenced ports contain timeout elements, they are stored as well.
            </summary>
            <param name="signalTriggering">The signal triggering instance containing signal port references</param>
            <param name="ignoreTimeouts">if set to <c>true</c> TIMEOUT elements are ignored.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.CreateDummySignal(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Autosar4_2.ECUINSTANCE},ET.FW.Hal.Arxml.Xml.Autosar4_2.AUTOSAR)">
            <summary>
            Creates dummy signal which fills complete message
            </summary>
            <param name="message">Message definition</param>
            <param name="receivers">Receivers of signal</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            The dummy signal
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4.CreateUpdateBitSignal(System.String,System.Int32,ET.FW.Hal.Arxml.Xml.Autosar4_2.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_2.AUTOSAR)">
            <summary>
            Creates dummy signal for an update bit
            </summary>
            <param name="signalName">Name of the associated signal.</param>
            <param name="updateBitPosition">The update bit position.</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">The message definition.</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            Update bit dummy signal definition
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator">
            <summary>
            Helper class to create and parametrize signal definitions from xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.#ctor(ET.FW.Hal.Arxml.Xml.SystemSignal,ET.FW.Hal.Arxml.Xml.ISignalToIPduMapping,ET.FW.Hal.Arxml.Xml.ISignalToIPduMapping,ET.FW.Hal.Arxml.Xml.ISignalTriggering,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="gtp">I-Signal to I-PDU Mapping for this system signal group which contains this signal, null if none</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
            <param name="message">Related message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.SetReceivers(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Can.EcuInstance})">
            <summary>
            Sets the receivers for this signal
            </summary>
            <param name="receivers">List of ECU elements with receivers</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.Definition">
            <summary>
            The signal definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.systemSignal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.ExtractTiming(ET.FW.Hal.Arxml.Xml.ISignalToIPduMapping,ET.FW.Hal.Arxml.Xml.ISignalToIPduMapping,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="gtp">I-Signal to I-PDU Mapping for this system signal group which contains this signal, null if none</param>
            <param name="message">Associated message</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.ExtractSystemSignalData">
            <summary>
            Extracts the system signal data and fills signal definition instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.SetupBoolean(ET.FW.Hal.Arxml.Xml.BooleanLiteral)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.SetupInteger(ET.FW.Hal.Arxml.Xml.CompuMethod,ET.FW.Hal.Arxml.Xml.IntegerLiteral)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.GetLimit(ET.FW.Hal.Arxml.Xml.ARLimit)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.ExtractLabel(ET.FW.Hal.Arxml.Xml.CompuScale,ET.FW.Hal.Arxml.Xml.CompuMethod)">
            <summary>
            Extracts one labeled value from CompuScale
            </summary>
            <param name="scale">The scale to extract label from</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.CompuRationalCoeffs,ET.FW.Hal.Arxml.Xml.CompuMethod)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.ExtractReceivers(ET.FW.Hal.Arxml.Xml.ISignalTriggering,System.Boolean)">
            <summary>
            Extracts receivers from collection of port references.
            If the referenced ports contain timeout elements, they are stored as well.
            </summary>
            <param name="signalTriggering">The signal triggering instance containing signal port references</param>
            <param name="ignoreTimeouts">if set to <c>true</c> TIMEOUT elements are ignored.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.CreateDummySignal(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Can.EcuInstance},ET.FW.Hal.Arxml.Xml.Autosar)">
            <summary>
            Creates dummy signal which fills complete message
            </summary>
            <param name="message">Message definition</param>
            <param name="receivers">Receivers of signal</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            The dummy signal
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator.CreateUpdateBitSignal(System.String,System.Int32,ET.FW.Hal.Arxml.Xml.ISignalTriggering,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar)">
            <summary>
            Creates dummy signal for an update bit
            </summary>
            <param name="signalName">Name of the associated signal.</param>
            <param name="updateBitPosition">The update bit position.</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">The message definition.</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            Update bit dummy signal definition
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.Definition">
            <summary>
            The signal definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.iSignal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNAL,ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_3.AUTOSAR)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.ExtractTiming(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.ExtractSystemSignalData">
            <summary>
            Extracts the system signal data and fills signal definition instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.SetupInteger(ET.FW.Hal.Arxml.Xml.Autosar4_3.COMPUMETHOD,ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.Autosar4_3.COMPURATIONALCOEFFS,ET.FW.Hal.Arxml.Xml.Autosar4_3.COMPUMETHOD)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.GetLimit(ET.FW.Hal.Arxml.Xml.Autosar4_3.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.GetMaximumBitwiseValue">
            <summary>
            Fetching the Maximum Bitwise Value from the lenght.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.GetMaskedLimit(ET.FW.Hal.Arxml.Xml.Autosar4_3.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>String value of the limit</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.SetupBoolean(ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.SetReceivers(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.Autosar4_3.ECUINSTANCE})">
            <summary>
            Sets the receivers for this signal
            </summary>
            <param name="receivers">List of ECU elements with receivers</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_3.AUTOSAR)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
            <param name="message">Related message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV4_3.CreateUpdateBitSignal(System.String,System.Int32,ET.FW.Hal.Arxml.Xml.Autosar4_3.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.Autosar4_3.AUTOSAR)">
            <summary>
            Creates dummy signal for an update bit
            </summary>
            <param name="signalName">Name of the associated signal.</param>
            <param name="updateBitPosition">The update bit position.</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">The message definition.</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            Update bit dummy signal definition
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.Definition">
            <summary>
            The signal definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.iSignal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNAL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.ExtractTiming(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.ExtractSystemSignalData">
            <summary>
            Extracts the system signal data and fills signal definition instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.SetupInteger(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPURATIONALCOEFFS,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.GetLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.GetMaximumBitwiseValue">
            <summary>
            Fetching the Maximum Bitwise Value from the lenght.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.GetMaskedLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>String value of the limit</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.SetupBoolean(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.SetReceivers(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ECUINSTANCE})">
            <summary>
            Sets the receivers for this signal
            </summary>
            <param name="receivers">List of ECU elements with receivers</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
            <param name="message">Related message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.SignalCreatorV_00046.CreateUpdateBitSignal(System.String,System.Int32,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Creates dummy signal for an update bit
            </summary>
            <param name="signalName">Name of the associated signal.</param>
            <param name="updateBitPosition">The update bit position.</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">The message definition.</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            Update bit dummy signal definition
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator">
            <summary>
            Helper class to create TP channel definitions from arxml elements
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.#ctor(ET.FW.Hal.Arxml.Xml.Can.CanTPConnectionChannel,ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV3)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator"/> class.
            </summary>
            <param name="connection">xml TP connection element.</param>
            <param name="network">Network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_2.CANTPCONNECTION,ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_0)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator"/> class.
            </summary>
            <param name="connection">xml TP connection element.</param>
            <param name="network">Network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.#ctor(ET.FW.Hal.Arxml.Xml.Autosar4_3.CANTPCONNECTION,ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV4_3)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator"/> class.
            </summary>
            <param name="connection">xml TP connection element.</param>
            <param name="network">Network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CANTPCONNECTION,ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition,ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoaderV_00046)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator"/> class.
            </summary>
            <param name="connection">xml TP connection element.</param>
            <param name="network">Network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.UpdateNetwork(ET.FW.Hal.Can.Catalogs.Arxml.CanTPNetworkDefinition)">
            <summary>
            Add TP channel to network, if not already present
            </summary>
            <param name="network">The network.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.TPChannelCreator.Definition">
            <summary>
            TP channel definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoader">
            <summary>
            Class extracts CAN catalog data from autosar arxml file
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoader.NetworkName">
            <summary>
            Name of arxml TopLevelPackage to read network data from (file might contain multiple bus definitions)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoader.IgnoreEcus">
            <summary>
            List of Ecus to be ignored from the catalog
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader">
            <summary>
            Specialized XML text reader which extracts Autosar schema version, but hides its namespace from Deserializer
            arxml files use different version dependant namespaces.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader"/> class.
            </summary>
            <param name="input">The stream containing the XML data to read.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            This class always returns an empty namespace
            </summary>
            <returns>Always an empty string.</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader.AutosarVersion">
            <summary>
            Gets the autosar version (value is extraced from XML namespace name)
            </summary>
            <value>
            Autosar version string (e.g. "3.1.4.DAI.4" or "3.2.2"
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Arxml.ArxmlReader.Autosar314">
            <summary>
            Flag for Autosar version 3.1.4
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition.Id">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition.IsFullHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ContainedPduDefinition.E2EProtections">
            <summary>
            Optional End To End Protection
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.GatewayEcu">
            <summary>
            GateWay ECU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.GatewayEcu.EcuName">
            <summary>
            Ecu Name
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.GatewayEcu.RoutingContainers">
            <summary>
            List of Routing Containers
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.RoutingContainer">
            <summary>
            Routing container consists of Source and Destination
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.RoutingContainer.Source">
            <summary>
            Source Routing PDU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.RoutingContainer.Destination">
            <summary>
            Destination Routing PDU
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.RoutingPdu">
            <summary>
            Routing PDU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.RoutingPdu.Network">
            <summary>
            Network Name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.RoutingPdu.PduName">
            <summary>
            PDU Name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.RoutingPdu.PduId">
            <summary>
            PDU Id
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps">
            <summary>
            Secure CommunicationProps configuration for protected data inside CAN message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.DataId">
            <summary>
            DATA ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.Length">
            <summary>
            PDU length in bytes 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.AuthAlgorithm">
            <summary>
            Authorization Algorithm
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.AuthInfoTxLength">
            <summary>
            Authorization InfoTxLength
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.AuthenticationRetries">
            <summary>
            Authorization Retries
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.FreshnessCounterSyncattempts">
            <summary>
            Freshness Counter Sync attempts
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.FreshnessTimestampTimePeriodfactor">
            <summary>
            FreshnessTimestamp TimePeriodfactor
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.FreshnessValueId">
            <summary>
            Freshness ValueId
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.Freshnessvaluelength">
            <summary>
            Freshness Value Length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.FreshnessValueTxLength">
            <summary>
            Freshness Value Tx Length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.SecondaryfreshnessValueid">
            <summary>
            Secondaryfreshness Valueid
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.UsefreshnessTimestamp">
            <summary>
            Usefreshness Timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.PduSpecificKey">
            <summary>
            PduSpecificKey
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.SecureCommunicationProps.PduSpecificHash">
            <summary>
            PduSpecificHash
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.PayloadExtension">
            <summary>
            Helper class for CAN message payload handling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.ToBitField(System.Byte[],ET.FW.Hal.Can.Catalogs.Byteorder)">
            <summary>
            Converts the byte array to an bit field
            </summary>
            <param name="payload">byte array value to convert</param>
            <param name="byteorder">Byte order to use</param>
            <returns>converted bit field</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.Set(System.Byte[],System.UInt64,ET.FW.Hal.Can.Catalogs.Byteorder)">
            <summary>
            Set byte array data from integer value
            Array size is preserved.
            </summary>
            <param name="payload">Target byte array</param>
            <param name="data">64 Bit integer source value</param>
            <param name="byteorder">Byte order to use</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.SetSignalBits(System.Byte[],System.UInt64,ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Writes signal bits into message payload
            </summary>
            <param name="payload">Target payload.</param>
            <param name="value">New signal value as bitfield</param>
            <param name="definition">Signal definition.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.WriteSignalBits(System.Byte[],System.UInt64,ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Create new byte array which contains given payload updated with given signal value
            </summary>
            <param name="payload">Target payload.</param>
            <param name="value">New signal value as bitfield</param>
            <param name="definition">Signal definition.</param>
            <returns>The updated payload bytes</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.GetSignalBits(System.Byte[],ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Extracts signal value from payload byte array
            </summary>
            <param name="payload">Payload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Masked signal bits</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.CalculatePosition(System.Int32,ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Calculates the position of bitfield for shifting
            </summary>
            <param name="dlc">Number of ayload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Shift position for signal value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.CalculateMotorolaPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the motorola position to shift
            </summary>
            <param name="dlc">data length</param>
            <param name="bitStart">bit start position</param>
            <param name="bitLength">data bites length</param>
            <returns>uint 64 shifting position</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.GenerateNegativeBitMask(System.Int32,System.Int32)">
            <summary>
            Generates a negative bit mask with flexible bit length and bit start (lsb of UInt64 bitfield).
            Example: GenerateNegativeBitMask(12, 11): "...1111111111111111111000000000000111111111111"
            </summary>
            <param name="bitLength">Bit length</param>
            <param name="bitStart">Zero based bit start position</param>
            <returns>Negative bit mask</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.PayloadExtension.GenerateBitMask(System.Int32)">
            <summary>
            BitMask generator, which generates a positive bit mask beginning at 
            position zero (lsb) of UInt64 bit field.
            Example: GenerateBitMask(12): "...000000000000000000000111111111111"
            </summary>
            <param name="bitLength">Length of the bit field</param>
            <returns>Bit mask</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Byteorder">
            <summary>
            Definition of bitfield byteorder  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Byteorder.Undefined">
            <summary>
            Undefined or unknown  byteorder
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Byteorder.Intel">
            <summary>
            Intel byteorder (Little Endian)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Byteorder.Motorola">
            <summary>
            Motorola byteorder (Big Endian)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanCatalog">
            <summary>
            Represents the complete CAN catalog over all different networks
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.#ctor(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            The Constructor.
            </summary>
            <param name="network">CAN network definition containing all catalog data</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.Network">
            <summary>
            Associated CAN network (bus) configuration
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.Devices">
            <summary>
            All CAN devices in the catalog
            </summary>
            <remarks>Devices could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.Messages">
            <summary>
            All CAN messages in the catalog
            </summary>		
            <remarks>Messages could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.Signals">
            <summary>
            All CAN signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.TpChannels">
            <summary>
            List of TP channel definitions
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate an IMessage
            </summary>
            <remarks>translates only ICanMessages</remarks>
            <param name="message">the message to translate</param>
            <returns>a string representation of the message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.TranslateCanMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Translate standard protocol CAN message 
            </summary>
            <param name="canMsg">CAN message</param>
            <returns>Message translation</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.CachedMessages">
            <summary>
            Holds all CAN messages for the translation
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanCatalog.CachedPduMessages">
            <summary>
            Holds all Pdu CAN messages for the translation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.GetMessageBuilder(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Gets a new instance of message builder
            </summary>
            <param name="message">Can message to create a new builder</param>
            <returns>A new message builder</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.TranslateNMEventMessage(ET.FW.Hal.Can.ICanNMEvent)">
            <summary>
            Translate CAN NM event
            </summary>
            <param name="nmEventMsg">CAN NM event message</param>
            <returns>Event translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.Translate(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Translate CAN TP protocol message 
            </summary>
            <param name="message">CAN TP message</param>
            <returns>Message translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanCatalog.GetStructure(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Get Signals from of the CAN message
            </summary>
            <param name="canMsg">CAN message to translate to signal structure</param>
            <returns>Signals from CAN message</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition">
            <summary>
            Represents a CAN device which holds diffent CAN message definitions
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">the name of the device</param>
            <param name="network">network relationship</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.Boolean)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">the name of the device</param>
            <param name="network">network relationship</param>
            <param name="dummy">inidicates if device definition is a dummy</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Name">
            <summary>
            Device name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Description">
            <summary>
            Device description
            </summary>
            <remarks>
            Not used for dbc format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Dummy">
            <summary>
            Indicates if device definition is a dummy 
            </summary>
            <remarks>
            Not used for arxml format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Network">
            <summary>
            Network belonging of the CanDevice
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Messages">
            <summary>
            Device belonging CAN Messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.Signals">
            <summary>
            All transmitting (TX) signals
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.NwmNode">
            <summary>
            Network Management Node (NWM-Knoten)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.NwmStationAddress">
            <summary>
            Network Management Station Address (NWM-Stationsadresse)
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.TpOwnSystemEcuNumber">
            <summary>
            TpOwnSystemEcuNumber from DBC?
            </summary>
            <remarks>Valid value range: 0..255</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.TpNodeBaseAddress">
            <summary>
            TpNodeBaseAddress from DBC?
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanDeviceDefinition.ToString">
            <summary>
            Returns the string representation of the object
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanMessageBuilder">
            <summary>
            Helper object to write or to read can messages via signals 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanMessageBuilder"/> class.
            </summary>
            <param name="definition">CAN message definition</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Message">
            <summary>
            Current Payload
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Definition">
            <summary>
            Message definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Name">
            <summary>
            Name of the message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Id">
            <summary>
            Message id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Signals">
            <summary>
            All signal which are members of this message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.SortedSignals">
            <summary>
            Signals sorted by BitStart
            </summary>
            <remarks>
            Signals collection is sorted the same way
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.ActiveSignals">
            <summary>
            Gets a collection of signals which are currently active.
            Active signals are not multiplexed or contained in active multiplexor group.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.activeSignals">
            <summary>
            Buffer for active signals.
            </summary>
            <remarks>
            Buffer is used for multiplexed messages only, for non multiplexed messages all signals are always active
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.IsMultiplexed">
            <summary>
            Indicates, if CAN message contains a multiplexed signals (cached)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.GetMultiplexor">
            <summary>
            Get multiplexor 
            </summary>
            <returns>Multiplexor signal.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.CreateSignals(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Internal signal creation service (signals are sorted by bit position)
            </summary>
            <param name="definition">Message definition</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Translation">
            <summary>
            Gets the message translation.
            </summary>
            <remarks>
            Translation text is buffered until message payload is changed
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageBuilder.Structure">
            <summary>
            Gets a list of message signals, the signals are copies of internal signals and will not be changed on Message update
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1">
            <summary>
            Collection of CanMessage objects
            </summary>
            <typeparam name="T">Message class</typeparam>
            <remarks>Based on NamedObjectCollection. Is NOT Thread safe.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs filled collection.
            </summary>
            <param name="collection">Collection which implements IEnumerable interface.</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.messagesById">
            <summary>
            Internal msg id dictionary
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.Item(System.UInt32)">
            <summary>
            Get/set CAN message definition by message id
            </summary>
            <param name="id">message Id</param>
            <returns>CanMessageDefinition object</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.Add(`0)">
            <summary>
            Add a CAN message definition object
            </summary>
            <param name="message">Message Definition</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.TryGetValue(System.UInt32,`0@)">
            <summary>
            Gets the message associated with the specified id.
            </summary>
            <param name="id">The id of the message to get.</param>
            <param name="message">When this method returns, contains the message associated with the specified id, if the id is found;
            otherwise, the default value for the message type of the value parameter.This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the CanMessageCollection contains an message with the specified id; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageCollection`1.Contains(System.UInt32)">
            <summary>
            Evaluates if the collection contains a message by msgId
            </summary>
            <param name="id">message ID</param>
            <returns>true if message with given ID is found</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanMessageDefinition">
            <summary>
            Represents a CAN message definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.#ctor(System.String)">
            <summary>
            Constructor with name only.
            </summary>
            <param name="name">Name of the message.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanDeviceDefinition)">
            <summary>
            Constructor with name and sender only.
            </summary>
            <param name="name">Name of the message.</param>
            <param name="sender">sending device</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.#ctor(System.String,System.UInt32,ET.FW.Hal.Can.Catalogs.CanDeviceDefinition)">
            <summary>
            Constructor with name, ID and sender
            </summary>
            <param name="name">name of the message</param>
            <param name="id">id of the message</param>
            <param name="sender">sending device</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Id">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Dummy">
            <summary>
            Indicates if the message defines a dummy
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Description">
            <summary>
            Message description
            </summary>
            <remarks>
            Not used for dbc format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Sender">
            <summary>
            CanDevice belonging this message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Signals">
            <summary>
            Signals belonging to the message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Receivers">
            <summary>
            Message receiving CanDevices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.Dlc">
            <summary>
            Message length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.StartValue">
            <summary>
            GenMsgStartValue (Default value)
            </summary>
            <remarks>
            Start value from DBC / unused bit patern from arxml: default value for message, not containing signal default values.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.DefaultPayload">
            <summary>
            Message default payload from catalog, holds default values of signals.
            </summary>
            <remarks>
            Value is merged from message start/default value and signals default values.
            Value must not be changed after initialization.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.NwmMessage">
            <summary>
            Network Management Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.AppMessage">
            <summary>
            App Message
            </summary>
            <remarks>
            Property is always false for arxml catalogs, because information is not included in arxml files.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.DiagResponse">
            <summary>
            Diagnosis Response
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.DiagRequest">
            <summary>
            Diagnosis Request
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.DiagState">
            <summary>
            Diagnosis State
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.CycleTimeActive">
            <summary>
            Cycle time active
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.CycleTime">
            <summary>
            Cycle time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.SendType">
            <summary>
            Send type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.NrOfRepetitions">
            <summary>
            Nr of repetitions
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.StartDelayTime">
            <summary>
            Message start delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.DelayTime">
            <summary>
            Message delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.AdjustSendType">
            <summary>
            Set correct message send type and cycle times, based on message and signals definitions
            </summary>
            <remarks>
            Code is taken from RuntimeCanMessage.AdjustSendType()
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.GetSendtypePrio(ET.FW.Hal.Can.Catalogs.SendType)">
            <summary>
            Gets the sendtype prio defined by the table from Tobias Braun.
            </summary>
            <param name="sendtype">The sendtype.</param>
            <returns>return the prio 0 is lowest</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.TpTxIndex">
            <summary>
            TP parameter TX Index
            </summary>
            <remarks>
            Valid value range: 0..99
            Property is always 0 for arxml catalogs, because information is not included in arxml files.
            Dbc files which are generated from arxml files, are patched after generation to include this field.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.IsTp">
            <summary>
            Flag for messages which are used for CAN Transport Protocol
            </summary>
            <remarks>
            DBC: set if any of the fields TpTxIndex, DiagRequest, DiagResponse or DiagState is set
            ARXML: Read from xml file
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.ContainedPdus">
            <summary>
            For Container PDU frame the contained pdus
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.E2EProtections">
            <summary>
            Optional End To End Protection
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.SecureCommunicationProps">
            <summary>
            Optional Secure Communication Props
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.IsFullHeader">
            <summary>
            For contained Pdu header type
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanMessageDefinition.ToString">
            <summary>
            Get String representation of the object
            </summary>
            <returns>Name and ID (hex coded) as text</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition">
            <summary>
            Represents the CAN network with different devices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Name">
            <summary>
            The name of the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NetworkName">
            <summary>
            Network Name as defined in the ARXML file
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Devices">
            <summary>
            Gets all Devices (ECU) in the Network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Messages">
            <summary>
            Gets all CAN messages defined in the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Version">
            <summary>
            Network version
            </summary>
            <remarks>Valid value range: 0..255</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.VersionWeek">
            <summary>
            Version week date
            </summary>
            <remarks>Valid value range: 0..53</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.VersionYear">
            <summary>
            Version year date
            </summary>
            <remarks>Valid value range: 0..99</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Manufacturer">
            <summary>
            Manufacturer info
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.CarSpecificKey">
            <summary>
            CarSpecificKey
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.CarSpecificHash">
            <summary>
            Car Specific Hash.
            value is set from SecOcService but currently not used anywhere..
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Baudrate">
            <summary>
            Network baudrate
            </summary>
            <remarks>Valid value range: 0..1000000</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Id">
            <summary>
            Network Id (NWID)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.SamplePointMax">
            <summary>
            Maximum sample points
            </summary>
            <remarks>Valid value range: 0..100</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.SamplePointMin">
            <summary>
            Minimum sample points
            </summary>
            <remarks>Valid value range: 0..100</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NBTMax">
            <summary>
            Maximum Nominal Bit Time?
            </summary>
            <remarks>Valid value range: 0..255</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NBTMin">
            <summary>
            Minimum Nominal Bit Time?
            </summary>
            <remarks>Valid value range: 0..255</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NmMessageCount">
            <summary>
            Network Message Count
            </summary>
            <remarks>Valid value range: 0..64</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NwmBasicAddress">
            <summary>
            Network Management basic address (NWM-Basisadresse)
            </summary>
            <remarks>Valid value range: 0..536870911</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.NwmType">
            <summary>
            Network Management type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanNetworkDefinition.Signals">
            <summary>
            Gets all CAN signals defined in the network
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanSignal">
            <summary>
            CAN signal class for static signal values.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.#ctor(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanSignal"/> class.
            Signal value is extracted from payload of given CAN message
            </summary>
            <param name="message">CAN message containing signal value</param>
            <param name="definition">Definition of the CAN signal</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.#ctor(ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanSignal"/> class.
            Signal value is extracted from given message payload bytes.
            </summary>
            <param name="definition">The signal definition.</param>
            <param name="messagePayload">The CAN message payload, used to extract message value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.#ctor(ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanSignal"/> class.
            Signal value is not set here.
            </summary>
            <param name="definition">The signal definition.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.#ctor(ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanSignal"/> class.
            </summary>
            <param name="definition">Definition of the can signal</param>
            <param name="rawValue">Raw value of signal</param>
            <remarks>
            Special constructor only for Clone() methode
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Message">
            <summary>
            Set message which contains this signal
            Setter updates the signal values, message reference is not buffered
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Name">
            <summary>
            Name of the Signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.ToString">
            <summary>
            Get the string representation of the object
            </summary>
            <returns>the string</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Unit">
            <summary>
            Unit of the real representation of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.GetValue``1">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Signal value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.SetValue``1(``0)">
            <summary>
            Sets typed value.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">Typed value to set</param>
            <remarks>
            Method throws exception, if given value cannot be set.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.Value">
            <summary>
            Access signal value as text
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignal.RawValue">
            <summary>
            Access raw value of the signal
            </summary>
            <remarks>
            Value is buffered here. It is not updated, if payload of associated message is modified.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignal.Clone">
            <summary>
            Clones this signal
            </summary>
            <returns>A copy of this object</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanSignalDefinition">
            <summary>
            CAN signal definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Catalogs.CanSignalDefinition"/> class.
            </summary>
            <param name="name">Signal name</param>
            <param name="message">Message membership</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.#ctor(System.String)">
            <summary>
            Testing constructor
            </summary>
            <param name="name">Signal name</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.InternalType">
            <summary>
            Internal signal type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.SignalGroupName">
            <summary>
                Name of the SignalGroup
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Name">
            <summary>
            Name of the Signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.FlexKomSigName">
            <summary>
            FlexKomSigName of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Description">
            <summary>
            Signal description
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.FlexKomComment">
            <summary>
            FlexKom signal comment
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.FlexKomSID">
            <summary>
            FlexKom Signal identifier
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.RID">
            <summary>
            Routing ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Message">
            <summary>
            Reference to the signal containing message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Receivers">
            <summary>
            Reference collection to the receiving can devices 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Multiplexor">
            <summary>
            Multiplexor type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.IsMultiplexed">
            <summary>
            Signal belongs to a multiplexor group
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.IsUBitSignal">
            <summary>
             UBit Signal Type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.UBitSignalName">
            <summary>
            UBit Signal Name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.MultiplexorGroup">
            <summary>
            Relation to a multiplexor group
            </summary>
            <remarks>Property is obsolete, because some rare signals are assigned to multiple groups. Use collection MultiplexorGroups instead.</remarks>
            <value>
            First entry of MultiplexorGroups collection, 0 if no group assigned or signal is Multiplexor
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.MultiplexorGroups">
            <summary>
            Relation to multiplexor group(s)
            </summary>
            <remarks>
            In some rare cases a signal is assigned to more than one group
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.CycleTime">
            <summary>
            Generic signal cycle time
            </summary>
            <remarks>Unit: ms,
            Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.CycleTimeActive">
            <summary>
            Generic signal cycle time active
            </summary>
            <remarks>Unit: ms,
            Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.SendType">
            <summary>
            Generic signal send type
            </summary>
            <remarks>As defined in SendType</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.GenSigTimeout">
            <summary>
            Interaction Layer Timeout Supervision
            </summary>
            <remarks>Unit: ms, 
            Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.BitLength">
            <summary>
            Bit length of the signal
            </summary>
            <remarks>Valid value range: 1..64</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Byteorder">
            <summary>
            Byte order of the signal in the CAN message
            </summary>
            <remarks>Valid values: Intel, Motorola</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.BitStart">
            <summary>
            Bit start position of the signal in the CAN message
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Factor">
            <summary>
            Value range conversation multiplicator factor. (bit representation - real representation) 
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Offset">
            <summary>
            Value range conversation offset. (bit representation - real representation) 
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Unit">
            <summary>
            Unit of the real representation of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.BitwiseMinimum">
            <summary>
            Bitwise minimum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.BitwiseMaximum">
            <summary>
            Bitwise maximum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.BitwiseDefault">
            <summary>
            Bitwise default value (DBC: GenSigStartValue)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Values">
            <summary>
            State definitions of the values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Mask">
            <summary>
                State definitions of the MASK values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.ScaleValue">
            <summary>
            Getting the scale value which contains Mask Value and Symbol in CompuMethod.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.GetMinimum``1">
            <summary>
            Get allowed minimum
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Minimum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.GetMaximum``1">
            <summary>
            Get allowed maximum
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Maximum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.GetDefault``1">
            <summary>
            Get default value
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Default value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.ConvertToRaw``1(``0)">
            <summary>
            Convert signal value to raw value
            Method handles numerical and textual values
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">The Value</param>
            <returns>Coverted raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.StringToRaw(System.String)">
            <summary>
            Calculate raw value (bitfield) from string value
            Method handles text constants (e.g. SNA), bool values (e.g. true) and numerical values
            </summary>
            <param name="value">string value</param>
            <returns>raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.NumericToRaw``1(``0)">
            <summary>
            Calculate raw value (bitfield) from specific typed numeric value.
            Signal value is not modified here.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">value from type T</param>
            <returns>raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.RawToValue``1(System.UInt64)">
            <summary>
            Get typed value from raw value (bitfield)
            This method considers value names (enumeration) for string type
            </summary>
            <typeparam name="T">Type of signal value</typeparam>
            <param name="bitValue">raw value of can signal</param>
            <returns>value from type T of can signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.RawToString(System.UInt64)">
            <summary>
            Calculate string value from given raw value (bitfield)
            This method considers value names (enumeration)
            </summary>
            <param name="bitValue">raw value of can signal</param>
            <returns>string value of signal with unit</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.RawToStringNoUnit(System.UInt64)">
            <summary>
            Calculate string value from given raw value (bitfield)
            This method considers value names (enumeration)
            </summary>
            <param name="bitValue">raw value of can signal</param>
            <returns>string value of signal without unit</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.TryGetRawValueAsString(System.UInt64,System.String@)">
            <summary>
            Try to get string value from given raw value (bitfield) with value names (enumeration)
            or bool conersion
            </summary>
            <param name="bitValue">raw value of can signal</param>
            <param name="value">string value of signal without unit</param>
            <returns>True  if bitvalue was converted successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.RawToNumeric``1(System.UInt64)">
            <summary>
            Calculate specific typed value from given raw value (bitfield)
            This method considers only numerical values
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="bitValue">raw value</param>
            <returns>value from type T</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.IsCrc">
            <summary>
            Flag for End2End protection CRC
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.IsSequenceCounter">
            <summary>
            Flag for End2End sequence counter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanSignalDefinition.Clone">
            <summary>
            Creates a shallow copy of the current CanSignalDefinition object.
            </summary>
            <returns>CanSignalDefinition object</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Dbc.CanTpCatalog">
            <summary>
            DBC specific CAN catalog extension for TP handling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanTpCatalog.#ctor(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition)">
            <summary>
            Constructor with parameters to initialize catalog
            </summary>
            <param name="network">CAN network definition containig all catalog data</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanTpCatalog.InitializeTpChannels">
            <summary>
            Extract CAN TP ID pairs from CAN message definitions and store them
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanTpCatalog.EcuFromDiagMessage(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Extract ECU part from Diagnostics response/request message name
            </summary>
            <param name="def">message definition</param>
            <returns>ECU name part of message name</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator">
            <summary>
            This is a CanSignalDefinition creator helper class
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Constructor. Creates a new (empty) CanSignalDefinition
            </summary>
            <param name="name">Name of the CanSignal</param>
            <param name="messageDef">Message relationship</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.#ctor(System.String,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Constructor. Creates a new CanSignalDefinition on the base 
            of an CanSignalDefinition template
            </summary>
            <param name="name">Name of the CanSignal</param>
            <param name="messageDef">Message relationship</param>
            <param name="template">CanSignalDefinition template</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.Multiplexor">
            <summary>
            Multiplexor type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.MultiplexorGroup">
            <summary>
            Relation to a multiplexor group
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.SetDefaultValue``1(``0)">
            <summary>
            Default signal value setter
            </summary>
            <typeparam name="T">specific type</typeparam>
            <param name="value">default value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.SetMinValue``1(``0)">
            <summary>
            Minimum signal value setter
            </summary>
            <typeparam name="T">specific type</typeparam>
            <param name="value">minimum value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.SetMaxValue``1(``0)">
            <summary>
            Maximum signal value setter
            </summary>
            <typeparam name="T">specific type</typeparam>
            <param name="value">maximum value</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.GetDefinition">
            <summary>
            Get CanSignalDefinition
            </summary>
            <returns>finish CanSignalDefinition</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.EvaluateE2EFlags">
            <summary>
            Set E2E protection flags based on signal name
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.EvaluateSignalValueType(ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Private type evaluator method
            </summary>
            <param name="definition">signal definition</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator.IsFloatingPoint(System.Double)">
            <summary>
            Private floating point evaluator
            </summary>
            <param name="value">The value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader">
            <summary>
            Dbc importer class
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.DbcDummyDevice">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.Import(System.String)">
            <summary>
            Imports the specified CAN database (DBC format from Vector).
            </summary>
            <param name="file">File including the path</param>
            <returns>CAN network definition tree</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.Import(System.IO.Stream)">
            <summary>
            Imports the specified CAN database (DBC format from Vector).
            </summary>
            <param name="stream">data stream</param>
            <returns>CAN network definition tree</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseDbcDefinition(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Parsing entrance method. It parses line by line
            </summary>
            <param name="dbcLineEnumerator">data enumerator</param>
            <returns>CAN network definition tree</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseAttributes(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Parses all attributes
            </summary>
            <param name="network">belonging network</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseNetworkAttributes(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Parses network attributes
            </summary>
            <param name="network">belonging network</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseDeviceAttributes(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Parses device attributes
            </summary>
            <param name="network">belonging network</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseMessageAttributes(ET.FW.Hal.Can.Catalogs.CanMessageCollection{ET.FW.Hal.Can.Catalogs.CanMessageDefinition},System.String)">
            <summary>
            Parses message attributes
            </summary>
            <param name="canMessages">messages collection</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalAttributes(ET.FW.Hal.Can.Catalogs.CanMessageCollection{ET.FW.Hal.Can.Catalogs.CanMessageDefinition},System.String)">
            <summary>
            Parses signal attributes
            </summary>
            <param name="canMessages">messages collection</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseGenSigTimeout(System.String,System.Collections.Generic.IDictionary{System.String,System.TimeSpan})">
            <summary>
            Parse gen sig timeout
            </summary>
            <param name="line">line to parse</param>
            <param name="list">GenSigTimeout list</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseStringAttributeValue(System.String,System.Int32)">
            <summary>
            Parse string attribute value
            </summary>
            <param name="line">line to parse</param>
            <param name="startPos">parsing start position</param>
            <returns>string value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseByteArrayAttributeValue(System.String,System.Int32,System.Int32)">
            <summary>
            Parse bytew array attribute value
            </summary>
            <param name="line">line to parse</param>
            <param name="valueFieldIndex">value field index</param>
            <param name="dlc">byte field length</param>
            <returns>byte field data</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseBooleanAttributeValue(System.String,System.Int32)">
            <summary>
            Parse boolean attribute value
            </summary>
            <param name="line">line to parse</param>
            <param name="valueFieldIndex">value field index</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseAttributeType(System.String)">
            <summary>
            Parse attribute type
            </summary>
            <param name="line">line to parse</param>
            <returns>attribute type</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseAttributeIdentifier(System.String)">
            <summary>
            Parse attribute identifier (name)
            </summary>
            <param name="line">line to parse</param>
            <returns>Parsed identifier</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseAttributeValue``1(System.String,System.Int32)">
            <summary>
            Parse attribute value
            </summary>
            <typeparam name="AttributeType">attribute type</typeparam>
            <param name="line">line to parse</param>
            <param name="valueFieldIndex">value field index</param>
            <returns>Parsed attribute value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalValues(ET.FW.Hal.Can.Catalogs.CanMessageCollection{ET.FW.Hal.Can.Catalogs.CanMessageDefinition},System.String)">
            <summary>
            Parse signal values (enumeration)
            </summary>
            <param name="canMessages">messages collection</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.SplitQuoted(System.String)">
            <summary>
            Splits the given string on each blank ' ' which is outside of quotes and on each quote
            </summary>
            <param name="input">Input string to split</param>
            <returns>Resulting string parts</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalDescription(ET.FW.Hal.Can.Catalogs.CanMessageCollection{ET.FW.Hal.Can.Catalogs.CanMessageDefinition},System.String)">
            <summary>
            Parse signal description
            </summary>
            <param name="canMessages">messages collection</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignal(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.String)">
            <summary>
            Parse signal
            </summary>
            <param name="network">belonging network</param>
            <param name="message">belonging message</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalReceivers(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,ET.FW.Hal.Can.Catalogs.CanSignalDefinition,System.String)">
            <summary>
            Parse signal receivers
            </summary>
            <param name="network">belonging network</param>
            <param name="signal">belonging signal</param>
            <param name="field">field to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalMinMax(ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator,System.String)">
            <summary>
            Parse signal min max value
            </summary>
            <param name="signal">belonging signal</param>
            <param name="field">field to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalInterpretationData(ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator,System.String)">
            <summary>
            Parse signal interpretation data
            </summary>
            <param name="signal">belonging signal</param>
            <param name="field">field to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseSignalPosition(ET.FW.Hal.Can.Catalogs.Dbc.CanSignalDefinitionCreator,System.String)">
            <summary>
            Parses the BitStart and BitLength.
            </summary>
            <param name="signal">belonging signal</param>
            <param name="field">field to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseMessageHeader(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Parses the message header
            </summary>
            <param name="network">belonging network</param>
            <param name="line">line to parse</param>
            <returns>belonging message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseMsgId(System.String)">
            <summary>
            Parses the dbc msg id
            </summary>
            <param name="dbcId">DBC ID</param>
            <returns>Parsed DBC ID</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.CheckIfIsDummyDevice(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Check if the device definition is available. If not add it as dummy device
            </summary>
            <param name="network">belonging network</param>
            <param name="name">device name</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseMessage(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            PArses a message
            </summary>
            <param name="network">belonging network</param>
            <param name="dbcLineEnumerator">data enumerator</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.ParseDevices(ET.FW.Hal.Can.Catalogs.CanNetworkDefinition,System.String)">
            <summary>
            Parses devices
            </summary>
            <param name="network">belonging network</param>
            <param name="line">line to parse</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads a CanCatalog via a DBC source
            </summary>
            <remarks>Implementation of the ICatalogLoader interfaces</remarks>
            <param name="configuration">configuration of the catalog</param>
            <param name="fullPath">full qualified path</param>
            <returns>CanCatalog instance</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.Dbc.DbcLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">The stream of the source</param>
            <returns>The newly loaded catalog instance.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition">
            <summary>
            Definition of TP channel from catalog, each TP channel consists of a CAN message pair (e.g. diagnostics request and response)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Constructor with parameters to initialize the message pair
            </summary>
            <param name="def1">first message</param>
            <param name="def2">second message</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.IDs">
            <summary>
            Get CAN IDs for TP channel
            </summary>
            <remarks>
            Tx/Rx assignement depends on channel usage
            Diagnostics: TX - Request, Rx - Response
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.MessageDefinition1">
            <summary>
            First CAN message definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.MessageDefinition2">
            <summary>
            Second CAN message definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.IsDiagnostics">
            <summary>
            Flag for diagnostics TP channel (MessageDefinition1 is for requests, MessageDefinition2 is for Responses)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.CanTpChannelDefinition.TpTxIndex">
            <summary>
            TP Tx Index
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.DiagnosticsTranslator">
            <summary>
            Translator for diagnostic messages according to KWP 2000 or UDS protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.DiagnosticsTranslator.TranslateRequest(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate request message
            </summary>
            <param name="message">diagnostic request message to translate</param>
            <returns>translation of given message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.DiagnosticsTranslator.TranslateResponse(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate response message
            </summary>
            <param name="message">diagnostic response message to translate</param>
            <returns>translation of given message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.DiagnosticsTranslator.TranslateService(System.Byte,System.Text.StringBuilder@)">
            <summary>
            Translate service ID
            </summary>
            <param name="serviceID">service ID value</param>
            <param name="translation">translation text to modify</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.DiagnosticsTranslator.GetServiceName(System.Byte,ET.FW.Hal.Can.Diagnostics.ProtocolType@)">
            <summary>
            Search ServiceID
            </summary>
            <param name="serviceID">service ID value</param>
            <param name="protocol">service protocol</param>
            <returns>Name of service</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.ICanCatalog">
            <summary>
            Interface for the CAN specifics of the ICatalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanCatalog.Network">
            <summary>
            Associated CAN network (bus) configuration
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanCatalog.Devices">
            <summary>
            All CAN devices in the catalog
            </summary>
            <remarks>Devices could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanCatalog.Messages">
            <summary>
            All CAN messages in the catalog
            </summary>		
            <remarks>Messages could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanCatalog.Signals">
            <summary>
            All CAN signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ICanCatalog.GetStructure(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Get Signals from of the CAN message
            </summary>
            <param name="message">CAN message to translate to signal structure</param>
            <returns>CAN signals from message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ICanCatalog.GetMessageBuilder(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Gets a new message builder
            </summary>
            <param name="message">Can message to create a new builder</param>
            <returns>A new message builder</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.ICanSignal">
            <summary>
            CAN signal interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.Value">
            <summary>
            Access signal value as string
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanSignal.RawValue">
            <summary>
            Access raw value of the signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ICanSignal.GetValue``1">
            <summary>
            Get typed value.
            Method returns the converted real value. Typeparam T must match signal definition.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Signal value</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ICanSignal.SetValue``1(``0)">
            <summary>
            Sets typed value.
            Method converts and sets the given real value. Typeparam T must match signal definition.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">Typed value to set</param>
            <remarks>
            Method throws exception, if given value cannot be set.
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.ICanTpCatalog">
            <summary>
            Interface for the CAN TP subset of the CAN catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.ICanTpCatalog.TpChannels">
            <summary>
            List of TP channel definitions
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.ICanTpCatalog.Translate(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Translate CAN TP protocol message 
            </summary>
            <param name="message">CAN TP message</param>
            <returns>Message translation</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.INamedIdObject">
            <summary>
            Interface for standard access to object name with id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.INamedIdObject.Id">
            <summary>
            CAN message Id
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.CanDiagnosticsTranslator">
            <summary>
            Translator for diagnostic CAN TP messages according to KWP 2000 or UDS protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanDiagnosticsTranslator.IsDiagnosticsMsg(ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Check if given message name / ID indicates diagnostics message
            </summary>
            <param name="def">CAN message definition from catalog</param>
            <returns>true for diagnostics message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Catalogs.CanDiagnosticsTranslator.Translate(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate diagnostics message (KWP 2000/UDS)
            </summary>
            <param name="def">CAN message definition from catalog</param>
            <param name="message">Diagnostics message</param>
            <returns>Message translation text</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.General.Error("An error occured");
            </code></example>
        </member>
        <member name="P:ET.FW.Hal.Can.Catalogs.Log.Can">
            <summary>
            Logger with code "Catalogs/Can"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.Manufacturer">
            <summary>
            Manufacturer enumeration
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Manufacturer.DBAG">
            <summary>
            Daimler Benz
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Manufacturer.VAG">
            <summary>
            Volkswagen AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Manufacturer.BMWAG">
            <summary>
            BMW AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Manufacturer.PAG">
            <summary>
            Porsche AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.Manufacturer.GM">
            <summary>
            General Motors
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.NwmType">
            <summary>
            Network Management Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.central">
            <summary>
            central (zentral - MBW210)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.decentral">
            <summary>
            decentral (MB-OSAN)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.none">
            <summary>
            none (keines)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.VAG_OSEK">
            <summary>
            VAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.BMW_OSEK">
            <summary>
            BMW OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.PAG_OSEK">
            <summary>
            PAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.DBAG_OSEK">
            <summary>
            DBAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.Autosar">
            <summary>
            Autosar NM
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.NwmType.AutosarV4">
            <summary>
            Autosar V4 NM
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Catalogs.SendType">
            <summary>
            Send types (could be Daimler specific)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.Undefined">
            <summary>
            not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicX">
            <summary>
            cyclic transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.spontanX">
            <summary>
            spontanous transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicIfActiveX">
            <summary>
            cyclic if active
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.spontanWithDelay">
            <summary>
            spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicAndSpontanX">
            <summary>
            cyclic and spontan
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicAndSpontanWithDelay">
            <summary>
            cyclic and spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.spontanWithRepitition">
            <summary>
            spontan with  repitition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicIfActiveAndSpontanWD">
            <summary>
            cyclic if active and spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicIfActiveFast">
            <summary>
            cyclic if active fast
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.cyclicWithRepeatOnDemand">
            <summary>
            cyclic with repeat on demand
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Catalogs.SendType.none">
            <summary>
            no transmission
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.LastMode">
            <summary>
            Values of LastMode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticateDiagnosticsUser">
            <summary>
            Start Authenticate Diagnostic User or Tester via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticateDiagnosticsUser.#ctor(ET.FW.Hal.Can.CanTpSession,ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationDirectionType,ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationTaskType,System.TimeSpan,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="direction"></param>
            <param name="task"></param>
            <param name="authenticationCerificate"></param>
            <param name="timeout">Job timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticateDiagnosticsUser.VerificationResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticateDiagnosticsUser.AuthenticationResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticateDiagnosticsUser.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationDirectionType">
            <summary>
            Authentication Direction Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationDirectionType.Unidirectional">
            <summary>AuthenticationDirectionType</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationDirectionType.Bidirectional">
            <summary>Stop Routine - positive response required</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationTaskType">
            <summary>
            Authentication Task Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationTaskType.InitiateAuthentication">
            <summary>Verify Certificate (Initiate Authentication)</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationTaskType.VerifyCertificateOwnership">
            <summary>Verify Certificate Ownership</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationTaskType.DeAuthenticate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationVerificationResult">
            <summary>
            Authentication Verification Result
            </summary>//todo Update for remianing results from odx-d file
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationVerificationResult.CertificateVerified">
            <summary>Certificate verified, Ownership verification necessary</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationVerificationResult.AuthenticationComplete">
            <summary>Ownership verified, authentication complete</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.AuthenticationVerificationResult.DeAuthentication">
            <summary>
            De-authentication successful
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuBackendCertificateIdentifier">
            <summary>
            Request the Backend_CA_Certificate_Identification via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuBackendCertificateIdentifier.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="timeout">Job timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuBackendCertificateIdentifier.CertificateIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadEStandVersion">
            <summary>
            Request E-stand version via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadEStandVersion.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.StandardDataID)">
            <summary>
            Initializes a new instance of the ReadEStandVersion class
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="standardDataId">Data ID changes for each ECU</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadEStandVersion.EStandVersion">
            <summary>
            EStandVersion info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.StandardDataID">
            <summary>
            UDS: Standard Data Identifiers for Read Data by Identifier service
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService">
            <summary>
            UDS service: Routine Control By Identifier
            </summary>
            <remarks>
            Service does NOT switch ECU diagnostic session. If session control is required, it should be implemented by calling method.
            On success the returned status data can be taken from ResponseData property starting with index ResponsePayloadIndex (4).
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType,System.UInt16,System.Byte[])">
            <summary>
            The Constructor.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">Service timeout</param>
            <param name="type">Routine Control Type: Start/Stop/Request Results</param>
            <param name="identifier">Identifier of data to read</param>
            <param name="data">Data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService.Identifier">
            <summary>
            Identifier of data to write
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Level/Type, Identifier, Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlService.CheckResponseData">
            <summary>
            Check response data bytes.
            Byte 2 and 3 must contain the requested identifier.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType">
            <summary>
            Routine Control type 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType.StartRoutine">
            <summary>Start Routine - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType.StopRoutine">
            <summary>Stop Routine - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType.RequestRoutineResults">
            <summary>Request Routine Results - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType.StartRoutineNoPositiveResponseRequired">
            <summary>Start Routine - no positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.RoutineControlType.StoptRoutineNoPositiveResponseRequired">
            <summary>Stop Routine - no positive response required</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ClearDiagnosticInfoService">
            <summary>
            UDS service: Clear Diagnostic Information
            Service clears all DTCs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ClearDiagnosticInfoService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.UInt32)">
            <summary>
            Constructor (used for DTC groups)
            </summary>
            <param name="session">CAN TP session</param>
            <param name="timeout">service timeout</param>
            <param name="dtc">DTC/group code of DTC(s) to clear (0xFFFFFF for all)</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlService">
            <summary>
            UDS service: Communication control
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="type">control type to activate</param>
            <remarks>
            Comunication type parameter is hardcoded to default value 0x01,
            service implementation should be extended if parameter is required to be modified
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlType">
            <summary>
            Communication control types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlType.EnableRxAndTx">
            <summary>Enable RX and TX (normal mode)</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlType.EnanleRxDisableTx">
            <summary>Disable TX</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.CommunicationControlType.NoPositiveResponseFlag">
            <summary>Flag which indicates that no positive response shall be returned</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ControlDtcSettingService">
            <summary>
            UDS Service: Control DTC setting
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ControlDtcSettingService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.DtcSettingType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ControlDtcSettingService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="type">DTC setting to apply</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.DtcSettingType">
            <summary>
            Control DTC Settings type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcSettingType.On">
            <summary>Enable storage of DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcSettingType.Off">
            <summary>Disable storage of DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcSettingType.NoPositiveResponseFlag">
            <summary>Flag which indicates that no positive response shall be returned</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.DiagnosticsSessionControlService">
            <summary>
            UDS service: Switch active diagnostics session
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.DiagnosticsSessionControlService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.SessionType)">
            <summary>
            Service constructor with parameters to initialize it.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="type">session type to activate</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.DiagnosticsSessionControlService.Type">
            <summary>
            Session type to switch to
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.SessionType">
            <summary>
            Diagnostics session types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.Default">
            <summary>Default session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.Programming">
            <summary>Programming session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.ExtendedDiagnostics">
            <summary>Extended Diagnostics session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.SafetySystemDiagnostics">
            <summary>Safety System Diagnostics session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.Standby">
            <summary>Stand by session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.SessionType.NoPositiveResponseFlag">
            <summary>Flag which indicates that no positive response shall be returned</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo">
            <summary>
            UDS service: Read Active Diagnostic Information
            </summary>
            <remarks>
            At the mopment only diag version and active session fields are translated, 
            other data can be extracted from ResponsePayload
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo.ActDiagVersion">
            <summary>
            Extract active diag version
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo.DiagVersion">
            <summary>
            Diag version string (Response bytes 0-2 as hex values e.g. 028100)
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadActiveDiagnosticInfo.ActDiagSession">
            <summary>
            Extract active diag session
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService">
            <summary>
            UDS service: Read data by identifier
            </summary>
            <remarks>
            On success the read data can be taken from ResponseData property starting with index 3.
            Response data interpretation may be implemented by derived servic classes for specific local identifiers.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="identifier">identifier of data to read</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.StandardDataID)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="identifier">Standard data identifier of data to read</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService.Identifier">
            <summary>
            Identifier of data to read
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDataByIdentifierService.CheckResponseData">
            <summary>
            Check response data bytes (byte 1 and 2 must contain the requested identifier)
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService">
            <summary>
            UDS service: Read Diagnostic Trouble Codes and related information
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.DtcInfoRequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="requestType">service subfunction / Type of read DTC info request</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.DtcInfoRequestType,ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="requestType">service subfunction / Type of read DTC info request</param>
            <param name="stateMask">DTC status mask for filtering of DTCs to report</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.DtcDataLength">
            <summary>
            Size of one DTC information block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.DtcCount">
            <summary>
            Number of DTCs contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.StatusAvailabilityMask">
            <summary>
            DTC status availability mask: Mask contains all states which are supported by the ECU
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadDtcInfoService.GetDtc(System.Int32)">
            <summary>
            Extract DTC information from response
            </summary>
            <param name="idx">DTC index must be smaller than DtcCount</param>
            <returns>DTC code and state</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.DtcInfoRequestType">
            <summary>
            ReadDtcInfo subfunctions / request types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcInfoRequestType.SupportedDtcs">
            <summary>Report all supported DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcInfoRequestType.DtcsByStatus">
            <summary>Report all DTCs which match given status mask</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.DtcAndState">
            <summary>
            DTC code + DTC state
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcAndState.Code">
            <summary>
            DTC code
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcAndState.State">
            <summary>
            DTC state (direct from KWP2000 message)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds">
            <summary>
            DTC state used by UDs services
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.TestFailed">
            <summary>Most recent test failed</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.TestFailedThisOpCycle">
            <summary>Test failed at least once during current operation cycle</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.Pending">
            <summary>Test failed during current or last completed operation cycle</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.Confirmed">
            <summary>DTC has failed at least once since the last call to Clear Diagnostic Information and self-healing criteria have not yet been satisfied and the DTC has not been removed from the fault memory due to an overflow of the available fault records</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.TestNotCompleted">
            <summary>DTC test has not run to completion since the last time diagnostic information was cleared.</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.TestFailedSinceLastClear">
            <summary>DTC test returned a Test Failed This Operation Cycle = 1 result at least once since the last time diagnostic information was cleared.</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.TestNotCompletedThisOpCycle">
            <summary>DTC test has not run to completion this operation cycle (or since the last time diagnostic information was cleared this operation cycle).</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.WarningIndicator">
            <summary>Warning indicator requested to be ON.</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.DtcStateUds.All">
            <summary>Combination of all states </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuSerialNumber">
            <summary>
            Request ECU serial number via UDS.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuSerialNumber.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor for ECU serial number
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadEcuSerialNumber.SerialNumber">
            <summary>
            Serial number
            </summary>
            <value>
            Diagnostics response payload as string
            </value>
            <remarks>T
            Trailing 0-bytes are skipped
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWPartNumber">
            <summary>
            Request HW part number via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWPartNumber.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific HW part number
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWPartNumber.HWNumber">
            <summary>
            Extract HW number from response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWSupplierID">
            <summary>
            Request HW supplier identification via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWSupplierID.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWSupplierID"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWSupplierID.HWSupplier">
            <summary>
            Extract HW version from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWVersion">
            <summary>
            Request HW version via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWVersion.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWVersion"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadHWVersion.HWVersion">
            <summary>
            Extract HW version from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers">
            <summary>
            Request SW part number(s) via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific SW part numbers
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers.ModulePartNumberLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers.ModuleCount">
            <summary>
            Number of modules contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of modules
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWPartNumbers.GetPartNumber(System.Int32)">
            <summary>
            Extract part number from response
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module part number</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions">
            <summary>
            Request SW version(s) via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific SW part numbers
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions.ModuleVersionLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions.ModuleCount">
            <summary>
            Number of modules contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of modules
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.ReadSWVersions.GetSWVersion(System.Int32)">
            <summary>
            Extract version from response data
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module version</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.ServiceID">
            <summary>
            UDS: Diagnostics service IDs (byte 1)
            </summary>
            <remarks>Values are similar but not identical to KWP2000 service IDs</remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.ServiceID.PositiveResponseFlag">
            <summary>
            The positive response flag
            </summary>
            <remarks>
             Positive response uses request service ID with bit 6 set (serviceID | 0x40)
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.UdsService">
            <summary>
            UDS over CAN service
            </summary>
            <remarks>
            Class may be used as base class for more specific UDS service classes
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Uds.UdsService.NoPositiveResponseFlag">
            <summary>
            Subfunction level flag which indicates that no positive response shall be returned.
            Request with this bit set in subfunction level byte are not acknowledged by receiver, only negative responses may be received
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.UdsService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.ServiceID,System.Nullable{System.Byte},System.Byte[])">
            <summary>
            Constructor for services
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
            <param name="level">LEV: service subfunction level, null for none. If bit 7 (0x80) of level is set, the service requires no response!</param>
            <param name="parameters">additional parameters (optional)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.UdsService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Uds.ServiceID)">
            <summary>
            Constructor for services without subfunction
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.UdsService.ServiceID">
            <summary>
            Request service ID
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService">
            <summary>
            UDS service: Write data by identifier
            </summary>
            <remarks>
            Service does NOT switch ECU diagnostic session. If session control is required, it should be implemented by calling method.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">Service timeout</param>
            <param name="identifier">Identifier of data to read</param>
            <param name="data">Data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService.Identifier">
            <summary>
            Identifier of data to write
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Identifier, Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Uds.WriteDataByIdentifierService.CheckResponseData">
            <summary>
            Check response data bytes (byte 1 and 2 must contain the requested identifier)
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartRoutineByLIDService">
            <summary>
            KWP 2000 service: Write Data By Local Identifier
            </summary>
            <remarks>
            On success the returned status data can be taken from ResponseData property starting with index ResponsePayloadIndex (2).
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartRoutineByLIDService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Byte,System.Byte[])">
            <summary>
            the Constructor
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="lid">local identifier</param>
            <param name="data">data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartRoutineByLIDService.LID">
            <summary>
            Local Identifier
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartRoutineByLIDService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ClearDiagnosticInfoService">
            <summary>
            KWP 2000 service Clear Diagnostic Information
            Service clears all DTCs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ClearDiagnosticInfoService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup)">
            <summary>
            Constructor (used for DTC groups)
            </summary>
            <param name="session">CAN TP session</param>
            <param name="timeout">service timeout</param>
            <param name="group">DTC group to clear</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ClearDiagnosticInfoService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.UInt16)">
            <summary>
            Constructor (used for DTC groups)
            </summary>
            <param name="session">CAN TP session</param>
            <param name="timeout">service timeout</param>
            <param name="dtc">DTC/group code of DTC(s) to clear</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ClearDiagnosticInfoService.CheckResponseData">
            <summary>
            Check if response contains same DTC/group code as request
            </summary>
            <returns>true if response data is okay</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ControlDtcSettingService">
            <summary>
            KWP2000 service: Control DTC settings
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ControlDtcSettingService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Boolean,ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup,ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcSettingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ControlDtcSettingService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="responseRequired">Flag to indicate if a (positive) response shall be sent by addressed ECU, must be false for global request</param>
            <param name="group">DTC group to apply setting to</param>
            <param name="mode">Switch DTC setting on or off</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcSettingMode">
            <summary>
            Control DTC settings mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcSettingMode.On">
            <summary>Enable storage of DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcSettingMode.Off">
            <summary>Disable storage of DTCs</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DisableNormalMessageTransmissionService">
            <summary>
            KWP2000 service: Disable normal message transmission
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.DisableNormalMessageTransmissionService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor with parameters required to initialize the service.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="responseRequired">Flag to indicate if a (positive) response shall be sent by addressed ECU, must be false for global request</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.EnableNormalMessageTransmissionService">
            <summary>
            KWP2000 service: Re-enable normal message transmission
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.EnableNormalMessageTransmissionService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor with parameters required to initialize the service.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="responseRequired">Flag to indicate if a (positive) response shall be sent by addressed ECU, must be false for global request</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ServiceID">
            <summary>
            KWP2000: Diagnostics service IDs (byte 1)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.IdentificationOption">
            <summary>
            KWP 2000: Type of requested identification information
            [Byte 2] Diagnostic Local Identifiers used in "ReadECUIdentification"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.LocalIdentifier">
            <summary>
            Local identifiers (LID) for some services (e.g. Read/WriteDataByLocalIdentifier)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.Kwp2000Service">
            <summary>
            Keyword Protocol 2000 service
            </summary>
            <remarks>
            Class may be used as base class for more specific KWP2000 service classes
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.Kwp2000Service.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.ServiceID,System.Nullable{System.Byte},System.Byte[])">
            <summary>
            Constructor for services
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
            <param name="subfunction">service subfunction, null for none</param>
            <param name="parameters">additional parameters (optional)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.Kwp2000Service.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.ServiceID)">
            <summary>
            Constructor for services without subfunction
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.Kwp2000Service.ServiceID">
            <summary>
            Request service ID
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadCrin">
            <summary>
            Read serial number CRIN via KWP2000
            </summary>
            <remarks>
            Response format (all data is ASCII coded)
            The ECU shall send a response in following format:
            61 E1 ww ww xx xx xx xx yy zz zz zz zz zz zz zz
            Byte 0: Service-ID
            Byte 1: Local-ID
            Byte 2-3: Supplier-ID (2 chars ASCII)
            Byte 4-7: Supplier specific device type (4 chars ASCII)
            Byte 8: Production year code (0: 2000, .. 9: 2009, A: 2010, B: 2011, ...)
            Byte 9-15: Serial number
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadCrin.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor for Read CRIN request
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadCrin.SerialNumber">
            <summary>
            Serial number
            </summary>
            <value>
            Diagnostics response payload as string
            </value>
            <remarks>T
            Trailing 0-bytes are skipped
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDataByLIDService">
            <summary>
            KWP 2000 service Read Data By Local Identifier
            </summary>
            <remarks>
            On success the read data can be taken from ResponseData property starting with index 2.
            Response data interpretation may be implemented by derived servic classes for specific local identifiers.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDataByLIDService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDataByLIDService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="lid">local identifier</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDataByLIDService.LID">
            <summary>	
            Local Identifier
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDataByLIDService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService">
            <summary>
            KWP 2000 service Read Diagnostic Trouble Code By Status
            Service reads a list of all DTCs with given status
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStatusOption,ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService"/> class.
            </summary>
            <param name="session">CAN TP session</param>
            <param name="timeout">service timeout</param>
            <param name="statusOption">State of requested DTCs</param>
            <param name="group">DTC group to read</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of DTCs
            </summary>
            <returns>true if length is okay</returns>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService.DtcDataLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService.DtcCount">
            <summary>
            Number of DTCs contained in response
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadDtcByStatusService.GetDtc(System.Int32)">
            <summary>
            Extract DTC information from response
            </summary>
            <param name="idx">DTC index must be smaller than DtcCount</param>
            <returns>DTC code and state</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp">
            <summary>
            DTC state
            </summary>
            <remarks>TODO: Check if mapping is always the same, otherwise replace it with more common definition</remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.Readiness">
            <summary>Readiness flag (0 if test complete)</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.StorageStateMask">
            <summary>Bit mask for Storage states</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.None">
            <summary>Storage state No DTC detected at time of request</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.Stored">
            <summary>Storage state Stored (Not present at tiome of request)</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.Pending">
            <summary>Storage state Maturing Pending at time of request</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.Active">
            <summary>Storage state Active (Present at time of request)</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStateKwp.WarningIndicator">
            <summary>Warning Indicator Request State (1 for on)</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcWithState">
            <summary>
            DTC code + DTC state
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcWithState.Code">
            <summary>
            DTC code
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcWithState.State">
            <summary>
            DTC state (direct from KWP2000 message)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStatusOption">
            <summary>
            Options for ReadDiagnosticTroubleCodesByStatus service
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStatusOption.Identified">
            <summary>Error was detected</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcStatusOption.Supported">
            <summary>Error is possible</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup">
            <summary>
            DTC group coding
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup.Powertrain">
            <summary>All powertrain DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup.Chassis">
            <summary>All chassis DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup.Body">
            <summary>All Body DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup.Network">
            <summary>All Network DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.DtcGroup.All">
            <summary>All DTCs</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService">
            <summary>
            KWP 2000 service Read Ecu information subfunction DCX_ECU_Identification)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService"/> class.
            </summary>
            <param name="session">CAN TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.EcuOrigin">
            <summary>
            Extract ECU origin from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.Supplier">
            <summary>
            Extract supplier from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.DiagVersion">
            <summary>
            DIAG version string
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.GatewayIdentification">
            <summary>
            Extract Gateway Identification from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.HWVersion">
            <summary>
            Extract HW version from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.SWVersion">
            <summary>
            Extract SW version from response data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentDcxService.HWNumber">
            <summary>
            Extract HW number from response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService">
            <summary>
            KWP 2000 service Read Ecu information subfunction Code/Data/Boot SW information
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.ModuleDataLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.IdentificationOption)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService"/> class.
            </summary>
            <param name="session">CAN TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="opt">request subfunction must be SW identification option</param>
            <exception cref="T:System.ArgumentException">Invalid IdentificationOption for ReadEcuIdentSWService;opt</exception>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of modules
            </summary>
            <returns>true if length is okay</returns>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.ModuleCount">
            <summary>
            Number of modules contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.EcuOrigin">
            <summary>
            Extract ECU origin from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.GetSupplier(System.Byte)">
            <summary>
            Extract module supplier from response data
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>supplier code</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.GetDiagVersion(System.Int32)">
            <summary>
            Extract module DIAG version string from response
            </summary>
            <remarks>Use binary format? Extract development flag?</remarks>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>diag version</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.GetSWVersion(System.Int32)">
            <summary>
            Extract version from response data
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module version</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.ReadEcuIdentSWService.GetPartNumber(System.Int32)">
            <summary>
            Extract part number from response
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module part number</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartDiagSessionService">
            <summary>
            KWP2000 service: Start diagnostics session
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartDiagSessionService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,ET.FW.Hal.Can.Diagnostics.Kwp2000.SessionType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartDiagSessionService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="type">session type to activate</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.StartDiagSessionService.Type">
            <summary>
            Session type to switch to
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.SessionType">
            <summary>
            Diagnostics session type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.SessionType.Normal">
            <summary>Normal session</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.Kwp2000.SessionType.Extended">
            <summary>Extended Diagnostics session</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.WriteDataByLIDService">
            <summary>
            KWP 2000 service: Write Data By Local Identifier
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.Kwp2000.WriteDataByLIDService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.Kwp2000.WriteDataByLIDService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="lid">local identifier</param>
            <param name="data">data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.Kwp2000.WriteDataByLIDService.LID">
            <summary>
            Local Identifier
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.DiagnosticsService">
            <summary>
            Common base class for diagnostics service requests using CAN TP protocol.
            Class contains common implementation for KWP2000 and UDS protocol.
            </summary>
            <remarks>
            if RetryCount property is set, the service request is repeated on timeout
            RetryCount property is read from session, if session is of type DiagnosticsSession
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Byte,System.Nullable{System.Byte},System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.DiagnosticsService"/> class.
            </summary>
            <param name="session">TP session to use. If session is of type DiagnosticsSession, it controls the number of retries of this service</param>
            <param name="timeout">job timeout</param>
            <param name="serviceID">service ID</param>
            <param name="subfunction">service subfunction, null for none</param>
            <param name="parameters">additional parameters (optional)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan,System.Byte)">
            <summary>
            Constructor for services without subfunction
            </summary>
            <param name="session">TP session to use. If session is of type DiagnosticsSession, it controls the number of retries of this service</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.RetryCount">
            <summary>
            Number of retries for this service.
            </summary>
            <remarks>
            Value hast to be set before starting the service, it is decremented on every retry due to timeout
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.serviceID">
            <summary>
            Request service ID (as byte)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Subfunction">
            <summary>
            Subfunction / (UDS: LEV)
            </summary>
            <value>subfunction, null for none</value>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Parameters">
            <summary>
            service parameters (optional)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.NoResponseRequired">
            <summary>
            Flag for requests which require no (positive) response
            If flag is set, a response timeout causes the service to be successfully completed, otherwise a timeout causes service failure
            </summary>
            <remarks>
            Flag is set by derived service classes, if individual service parameter indicate it
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Start">
            <summary>
            Start service: send request, wait for response(s) and handle it
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.SendRequest">
            <summary>
            Sends the diagnostics service request.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Subfunction (opt.), Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.TimeoutDefault">
            <summary>
            Default timeout for response (based on P2 time, with additional delay due to communication and windows latencies)
            P2 time 25ms .. 50 ms
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.TimeoutNoResponse">
            <summary>
            Default timeout for requests which do not require a response response (based on min P3 time, with additional delay due to communication and windows latencies)
            P3 time 55ms .. 5s
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.currentTimeout">
            <summary>
            Current timeout
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.TimeoutPending">
            <summary>
            Extended response timeout after pending response from ECU (based on P3/P2* time, with additional delay due to communication and windows latencies)
            P3/P2* time 55ms .. 5s
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Session_StdOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for CAN standard protocol messages (used for timeout handling)
            </summary>
            <param name="sender">The TP session</param>
            <param name="e">event args containig the message</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Session_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanTpMessage})">
            <summary>
            Handler for TP messages of this session
            </summary>
            <param name="sender">the TP session</param>
            <param name="e">event args containig the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.TimeoutHandler(System.Object)">
            <summary>
            Response timeout handler
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Shutdown">
            <summary>
            Shutdown job: stop timer, disconnect from session output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Session">
            <summary>
            CAN TP session to use
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.timeoutTimer">
            <summary>
            Timer used for timeout checking
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.HandleResponse(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Handle received messages
            </summary>
            <param name="response">response message</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.Error">
            <summary>
            Error (negative response)
            </summary>
            <value>Undefined for no error code (could be timeout)</value>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.authenticateDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.currentService">
            <summary>
            Currently executed service (KWP2000 / UDS)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.ErrorText">
            <summary>
            Error as text 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.ResponseData">
            <summary>
            Response message payload data.
            Array contains complete payload, starting with ServiceID byte.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.ResponseValid">
            <summary>
            Check if service response data contains valid data
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.MinResponseBytes">
            <summary>
            Expected number of data bytes, should be set by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.CheckResponseLength">
            <summary>
            Check length of message payload
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.CheckResponseData">
            <summary>
            Check response data bytes (may be implemented by derived services for additional checks)
            </summary>
            <returns>true if data bytes are okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsService.ToString">
            <summary>
            return textual representation of object
            </summary>
            <returns>object as text</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession">
            <summary>
            CAN diagnostics session
            TP session with additional diagnostics session handling
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.DefaultTimeout">
            <summary>
            Default timeout for internal requests
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.#ctor(ET.FW.Hal.Can.ICanBus,ET.FW.Hal.Can.CanTpIDPair,System.String,System.Byte[])">
            <summary>
            The Constructor.
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="canIDs">CAN message ID pair for transmit/receive</param>
            <param name="ecuName"></param>
            <param name="vIN"></param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.#ctor(ET.FW.Hal.Can.ICanBus,ET.FW.Hal.Can.CanTpIDPair)">
            <summary>
            The Constructor.
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="canIDs">CAN message ID pair for transmit/receive</param>
            
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.#ctor(ET.FW.Hal.Can.ICanBus,System.UInt32,System.UInt32)">
            <summary>
            The Constructor.
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="requestID">Request CAN ID</param>
            <param name="responseID">Response CAN ID</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.#ctor(ET.FW.Hal.Can.ICanBus,System.UInt32)">
            <summary>
            Constructor for sessions without response identifier (e.g. global diagnostics identifier)
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="requestID">Request CAN ID</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.Dispose">
            <summary>
            Dispose session, end extended session if active
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.DiagProtocol">
            <summary>
            Diagnostics protocol for corresponding ECU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.IsExtendedSession">
            <summary>
            Flag to indicate active extended session
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.LastModeAfterExtendedSession">
            <summary>
            Flag to indicate active extended session
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.Retries">
            <summary>
            Default number of retries for sevices using this session
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.StartExtendedSession">
            <summary>
            Switch corresponding ECU to extended diagnostics session
            Execute "session control" request and start cyclic sending of "tester present" messages
            </summary>
            <returns>Job to monitor the operation</returns>
            <remarks>DiagProtocol property must have correct value for the ECU, otherwise session start fails.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.NoResponses">
            <summary>
            Flag for session witthout response identifier (e.g. for global requests)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.StartEnded(System.Object,ET.FW.Core.Jobs.JobStateEventArgs)">
            <summary>
            Ended handler for start extended session job
            </summary>
            <param name="sender">start session request</param>
            <param name="e">job state</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.StopExtendedSession">
            <summary>
            Switch corresponding ECU back to default session
            Execute "session control" request and stop cyclic sending of "tester present" messages
            </summary>
            <returns>Job to monitor the operation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.ExecuteLastMode">
            <summary>
            Executes request to set the LastMode
            </summary>
            <returns>Job to monitor the operation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.LastModeEnded(System.Object,ET.FW.Core.Jobs.JobStateEventArgs)">
            <summary>
            Ended handler for start extended session job
            </summary>
            <param name="sender">start session request</param>
            <param name="e">job state</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.StopTesterPresent">
            <summary>
            Executes the stop extended session.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.StopEnded(System.Object,ET.FW.Core.Jobs.JobStateEventArgs)">
            <summary>
            Ended handler for start extended session job
            </summary>
            <param name="sender">start session request</param>
            <param name="e">job state</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.SendMessage(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Send CAN TP (request) message
            Reset tester present timer in extended session
            </summary>
            <param name="msg">the message</param>
            <returns>
            Send result, which indicates if message could be sent, further errors are not monitored here
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.OnOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanTpMessage})">
            <summary>
            Raise message output event
            Reset tester present timer in extended session
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.OnStdOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Raise standard message output event
            Reset tester present timer in extended session
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.testerPresentTimer">
            <summary>
            Timer used for cyclic tester present message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.DiagnosticsSession.TesterPresentHandler(System.Object)">
            <summary>
            Tester present timer handler: send cyclic tester present message
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.EcuResetService">
            <summary>
            ECU reset service executes a Power On Reset
            </summary>
            <remarks>Service is identical for KWP2000 / UDS protocols</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Diagnostics.EcuResetService.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.Diagnostics.EcuResetService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">job timeout</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.EcuResetService.ResetMode">
            <summary>
            reset mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.EcuResetService.ResetMode.PowerOnReset">
            <summary> Hard reset </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.Nrc">
            <summary>
            NRC (negative response codes)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.ProtocolType">
            <summary>
            Diagnostics protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ProtocolType.Undefined">
            <summary>Undefined protocol</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ProtocolType.Kwp2000">
            <summary>KWP 2000</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ProtocolType.Uds">
            <summary>UDS (Unified Diagnostic Service)</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Diagnostics.ServiceID">
            <summary>
            Common service IDs for KWP2000 and UDS protocols
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.DiagnosticSessionControl">
            <summary>Switch current disgnostics session</summary>
            <remarks>
            UDS: Diagnostic Session Control
            KWP 2000: Start Diagnostic Session
            Subfunction coding is different for KWP2000/UDS!
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.EcuReset">
            <summary>Reset ECU</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.CommunicationControl">
            <summary>
            Communication control
            </summary>
            <remarks>
            UDS: Communication Control
            KWP 2000: Disable Normal Message Transmission
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.DynamiallyDefineDataIdentifier">
            <summary>
            Dynamially define data identifier
            </summary>
            <remarks>
            UDS: Dynamically Define Data Identifier
            KWP 2000: Dynamically Define Local Identifier
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.RoutineControl">
            <summary>
            Routine control
            </summary>
            <remarks>
            UDS: Routine Control
            KWP 2000: Start Routine By Local Identifier
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.TesterPresent">
            <summary>Tester present message, used to preserve extended session</summary>
            <remarks>Subfunction coding is different for KWP2000/UDS!</remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.NegativeResponse">
            <summary>Negative response</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Diagnostics.ServiceID.PositiveResponseFlag">
            <summary>Positive response uses request service ID with bit 6 set (serviceID | 0x40)</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.E2EObserver">
            <summary>
            Observer for CAN messages which validates E2E protection CRC fields
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.E2EObserver.Create(ET.FW.Hal.Can.Catalogs.ICanCatalog)">
            <summary>
            Creates an E2E observer instance for given catalog if necessary.
            E2E observer is created if catalog contains any E2E definitions and if the E2E definition profile is supported by observer implementation.
            </summary>
            <param name="catalog">The CAN catalog.</param>
            <returns>New E2E observer for given CAN catalog, null if no E2E protection is configured</returns>
        </member>
        <member name="F:ET.FW.Hal.Can.E2EObserver.profile">
            <summary>
            E2E profile implementation for CRC calculation 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.E2EObserver.#ctor(ET.FW.Hal.Can.Catalogs.ICanCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.E2EObserver"/> class.
            </summary>
            <param name="catalog">The CAN catalog.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.E2EObserver.CheckMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Checks E2E protection CRC of given message. If message is E2E protected and the CRC is invalid an <see cref="T:ET.FW.Core.Messaging.MessageError"/> is set to the message.
            </summary>
            <param name="message">The CAN message to check.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.E2EObserver.CheckMessage(ET.FW.Hal.Pdu.IPduMessage)">
            <summary>
            Checks E2E protection CRC of given message. If message is E2E protected and the CRC is invalid an <see cref="T:ET.FW.Core.Messaging.MessageError"/> is set to the message.
            </summary>
            <param name="message">The CAN message to check.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.IAutoIncrementHandler">
            <summary>
            Interface for handling of auto increment area(s) inside CAN messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.IAutoIncrementHandler.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented.
            </summary>
            <param name="canId">The CAN message identifier.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.IAutoIncrementHandler.UnRegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unregister/Stop the auto increment.
            </summary>
            <param name="canId">The CAN message identifier.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="M:ET.FW.Hal.Can.IAutoIncrementHandler.RegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.IAutoIncrementHandler.UnRegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Unregister/Stop the auto increment.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanCycleTimeMessage">
            <summary>
            The message for Cycle time.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanCycleTimeMessage.Id">
            <summary>
            CAN message ID (11 bit standard)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanCycleTimeMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanCycleTimeMessage.Text">
            <summary>
            Textual representation
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanMessageRouting">
            <summary>
            Public interface for configuration of message based CAN routing
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRouting.AddRoute(System.UInt32,ET.FW.Hal.Can.ICanStdProtocol,System.UInt32)">
            <summary>
            Add new route from associated CAN channel to target protocol
            </summary>
            <param name="srcMessageID">
            CAN ID of source message
            </param>
            <param name="targetProtocol">
            CAN standard protocol to transmit routed messages
            </param>
            <param name="targetMessageID">
            CAN ID for target message transmission (normally same as srcMessageID)
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRouting.RemoveRoute(System.UInt32,ET.FW.Hal.Can.ICanStdProtocol,System.UInt32)">
            <summary>
            Remove route from associated CAN channel of target protocol
            </summary>
            <param name="srcMessageID">
            CAN ID of source message
            </param>
            <param name="targetProtocol">
            CAN standard protocol to transmit routed messages
            </param>
            <param name="targetMessageID">
            CAN ID for target message transmission (normally same as srcMessageID)
            </param>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanErrorCode">
            <summary>
            Enum for the CAN Error Codes.
            ErrorCodes from 1 to 255 are common ErrorCodes,
            those with values greater than 255 are CAN-sepcific.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.MessageCorrupt">
            <summary>
            Message is corrupt, HW signalled errors in message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.MessageIncomplete">
            <summary>
            Message not complete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.DestinationNotSet">
            <summary>
            Destination is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.SourceNotSet">
            <summary>
            Source is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.NoProtocol">
            <summary>
            No protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.NoCatalog">
            <summary>
            No catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.ExceptionOccured">
            <summary>
            An exception occured
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.WrongMessageType">
            <summary>
            Wrong message-type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.WrongHwTimestamp">
            <summary>
            Wrong Hardware Timestamp
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.InavlidE2ECrc">
            <summary>
            End To End Protection CRC error
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanErrorCode.Unknown">
            <summary>
            Unknown Error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanErrorDecoder">
            <summary>
            Decoder for CAN message ErrorCodes.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanErrorDecoder.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4">
            <summary>
            Autosar NM node implementation
            </summary>
            <remarks>
            Node state may become wrong if timeout and receive event handling overlap
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.RepeatMessageTime">
            <summary>
            Time after RepeatMessage is left
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.NMTimeoutTime">
            <summary>
            Time after PrepareBusSleep is entered
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.WaitBusSleepTime">
            <summary>
            Time after BusSleep is entered.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.syncRoot">
            <summary>
            Locking over all timer objects
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.#ctor(ET.FW.Hal.Can.ICanChannelAccess,System.UInt32,System.UInt32)">
            <summary>
            The Constructor.
            </summary>
            <param name="channel">channel access.</param>
            <param name="basicAddress">nm basic address.</param>
            <param name="stationAddress">nm station address.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.IsInNetworkMode">
            <summary>
            Indicates if the nm node is in network mode.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.RepeatMessageBit">
            <summary>
            Switches the network to the repeat msg state (only in the network mode).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.AwakeIgnitionOn">
            <summary>
            NM userdata parameter.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.NetworkManagementMode">
            <summary>
            Current nm mode.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.BusSleepModeEnter">
            <summary>
            BusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.PrepareBusSleepModeEnter">
            <summary>
            PrepareBusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.NetworkModeEnter">
            <summary>
            NetworkMode mode enter activities.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.NetworkModeState">
            <summary>
            Current NetworkMode state.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.RepeatMessageStateEnter">
            <summary>
            RepeatMessage state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.NormalOperationStateEnter">
            <summary>
            NormalOperation state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.ReadySleepStateEnter">
            <summary>
            ReadySleep state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.OnNMTimeout(System.Object)">
            <summary>
            OnRxIndication activities.
            </summary>
            <param name="stateInfo">The state info.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.OnMessageReceived(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            StandardCAN_UplinkOutput activities.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.timeLastNMMessage">
            <summary>
            Time, the last NM message reception/transmissin was notified
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosarV4.Dispose">
            <summary>
            Disposes the nm node.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.NetworkManagementModeV4">
            <summary>
            Autosar NM modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementModeV4.BusSleep">
            <summary>
            Bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementModeV4.PrepareBusSleep">
            <summary>
            Prepare bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementModeV4.Network">
            <summary>
            Network mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.NetworkModeStateV4">
            <summary>
            Network mode states (substates of NetworkManagementMode.Network)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeStateV4.NormalOperation">
            <summary>
            Normal operation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeStateV4.RepeatMessage">
            <summary>
            Repeat message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeStateV4.ReadySleep">
            <summary>
            Ready sleep
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosar">
            <summary>
            Passive Autosar Network Management implementation
            This implementation supports only observing nodes.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosar.#ctor(ET.FW.Hal.Can.ICanChannelAccess)">
            <summary>
            The Constructor.
            </summary>
            <param name="channelAccess">The channel access the NM is responsable for</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosar.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosar.CreateSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a simulated node. Not supported here!
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>null, simulation is not supported here</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosar.CreateObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates an observing node.
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>The simulated NM node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosarV4">
            <summary>
            Autosar NM node implementation
            </summary>
            <remarks>
            Node state may become wrong if timeout and receive event handling overlap
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosarV4.#ctor(ET.FW.Hal.Can.ICanChannelAccess)">
            <summary>
            The Constructor.
            </summary>
            <param name="channelAccess">The channel access the NM is responsable for</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosarV4.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosarV4.CreateSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a simulated node. Not supported here!
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>null, simulation is not supported here</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementAutosarV4.CreateObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates an observing node.
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>The simulated NM node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementOsek">
            <summary>
            Passive OSEK Network Management implementation
            This implementation supports only observing nodes.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementOsek.#ctor(ET.FW.Hal.Can.ICanChannelAccess)">
            <summary>
            The Constructor.
            </summary>
            <param name="channelAccess">The channel access the NM is responsable for</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementOsek.Type">
            <summary>
            The NM type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementOsek.CreateSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a simulated node. Not supported here!
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>null, simulation is not supported here</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.ObservingNetworkManagementOsek.CreateObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates an observing node.
            </summary>
            <param name="nmBasicAddress">The NM basic address.</param>
            <param name="nmStationAddress">The NM node station address.</param>
            <returns>The simulated NM node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1">
            <summary>
            Base class for all CanNetworkManagement services.
            </summary>
            <typeparam name="TNMProtocol">NM protocol specific state enum</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.CurrentNodes">
            <summary>
            All current (active) Nm nodes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.currentNodes">
            <summary>
            Internal access to the current nodes.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.AddSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Add a new NM node.
            </summary>
            <param name="nmBasicAddress">The nm basic address in the network.</param>
            <param name="nmStationAddress">The nm node address.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.CreateSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a simulated node.
            </summary>
            <param name="nmBasicAddress">The nm basic address.</param>
            <param name="nmStationAddress">The nm node station address.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.AddObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Add a new NM node.
            </summary>
            <param name="nmBasicAddress">The nm basic address in the network.</param>
            <param name="nmStationAddress">The nm node address.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.CreateObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a observing node.
            </summary>
            <param name="nmBasicAddress">The nm basic address.</param>
            <param name="nmStationAddress">The nm node station address.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.RemoveNode(ET.FW.Hal.Can.CanNMNode)">
            <summary>
            Remove a NM node.
            </summary>
            <param name="node">NMNode to deregister.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.State">
            <summary>
            Current nm bus state.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{`0})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containing new state</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementAutosarBase">
            <summary>
            Base class for Autosar based Can Network Managment implementations.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementAutosarBase.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementAutosarBase.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{ET.FW.Hal.Can.NMStateAutosar})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containig new state</param>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementOsekBase">
            <summary>
            Base class for Osek based Can Network Managment implementations.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementOsekBase.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementOsekBase.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{ET.FW.Hal.Can.NMStateOsek})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containig new state</param>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone">
            <summary>
            Dummy Network Management implementation for no NM
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.#ctor">
            <summary>
            NM Constructor.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{ET.FW.Hal.Can.NMStateNone})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containig new state</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.CreateSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a simulated node.
            </summary>
            <param name="nmBasicAddress">The nm basic address.</param>
            <param name="nmStationAddress">The nm node station address.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNetworkManagementNone.CreateObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Creates a observing node.
            </summary>
            <param name="nmBasicAddress">The nm basic address.</param>
            <param name="nmStationAddress">The nm node station address.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMNoneNode">
            <summary>
            Represents a single network management (NM) node for CAN logging.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMNoneNode.#ctor(System.Boolean)">
            <summary>
            Node Constructor.
            </summary>
            <param name="observing">Observing flag value</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMNoneNode.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMNoneNode.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions">
            <summary>
            Internal helper class which provides the NM message definitions.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions.#ctor(System.String,System.UInt32)">
            <summary>
            Prevents a default instance of the <see cref="T:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions"/> class from being created.
            </summary>
            <param name="name">Name of the message.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions.GetOsekDefinition">
            <summary>
            Osek NM message definition.
            </summary>
            <returns>Message definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions.GetOsekDefinition(System.UInt32)">
            <summary>
            Gets the OSEK NM message definition.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Message definition for OSEK NM</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMMessageDefinitions.GetAutosarDefinition(System.UInt32)">
            <summary>
            Autosar NM message definition.
            </summary>
            <param name="id">CAN identifier.</param>
            <returns>
            Message definition.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar">
            <summary>
            Autosar NM node implementation
            </summary>
            <remarks>
            Node state may become wrong if timeout and receive event handling overlap
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.RepeatMessageTime">
            <summary>
            Time after RepeatMessage is left
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.NMTimeoutTime">
            <summary>
            Time after PrepareBusSleep is entered
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.WaitBusSleepTime">
            <summary>
            Time after BusSleep is entered.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.syncRoot">
            <summary>
            Locking over all timer objects
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.#ctor(ET.FW.Hal.Can.ICanChannelAccess,System.UInt32,System.UInt32)">
            <summary>
            The Constructor.
            </summary>
            <param name="channel">channel access.</param>
            <param name="basicAddress">nm basic address.</param>
            <param name="stationAddress">nm station address.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.IsInNetworkMode">
            <summary>
            Indicates if the nm node is in network mode.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.RepeatMessageBit">
            <summary>
            Switches the network to the repeat msg state (only in the network mode).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.AwakeIgnitionOn">
            <summary>
            NM userdata parameter.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.NetworkManagementMode">
            <summary>
            Current nm mode.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.BusSleepModeEnter">
            <summary>
            BusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.PrepareBusSleepModeEnter">
            <summary>
            PrepareBusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.NetworkModeEnter">
            <summary>
            NetworkMode mode enter activities.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.NetworkModeState">
            <summary>
            Current NetworkMode state.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.RepeatMessageStateEnter">
            <summary>
            RepeatMessage state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.NormalOperationStateEnter">
            <summary>
            NormalOperation state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.ReadySleepStateEnter">
            <summary>
            ReadySleep state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.OnNMTimeout(System.Object)">
            <summary>
            OnRxIndication activities.
            </summary>
            <param name="stateInfo">The state info.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.OnMessageReceived(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            StandardCAN_UplinkOutput activities.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.timeLastNMMessage">
            <summary>
            Time, the last NM message reception/transmissin was notified
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeAutosar.Dispose">
            <summary>
            Disposes the nm node.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.NetworkManagementMode">
            <summary>
            Autosar NM modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementMode.BusSleep">
            <summary>
            Bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementMode.PrepareBusSleep">
            <summary>
            Prepare bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkManagementMode.Network">
            <summary>
            Network mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.NetworkModeState">
            <summary>
            Network mode states (substates of NetworkManagementMode.Network)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeState.NormalOperation">
            <summary>
            Normal operation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeState.RepeatMessage">
            <summary>
            Repeat message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NetworkManagement.NetworkModeState.ReadySleep">
            <summary>
            Ready sleep
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek">
            <summary>
            CAN nm observing node 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.#ctor(ET.FW.Hal.Can.ICanChannelAccess,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek"/> class.
            </summary>
            <param name="channel">CAN channel access</param>
            <param name="basicAddress">The basic address.</param>
            <param name="stationAddress">The station address.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.OnMessageReceived(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Internal Uplink notification
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.OnNMTimeout(System.Object)">
            <summary>
            NM timeout handler
            Switches bus off when timer elapses in SleepAcknowledge mode or in Limp Home mode with Sleep Indication set
            </summary>
            <param name="stateInfo">The state info.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.Destination">
            <summary>
            The destination id.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.LimpHome">
            <summary>
            Flag to indicate Limp Home State
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMObservingNodeOsek.Dispose">
            <summary>
            Disposes the NmNode with timers and event notifications
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions">
            <summary>
            Internal helper class which provides the NM signal definitions.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions"/> class from being created.
            </summary>
            <param name="name">The name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.Nw_Id">
            <summary>
            Nw_Id Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Ud_Srv">
            <summary>
            NM_Ud_Srv Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Sleep_Ind">
            <summary>
            NM_Sleep_Ind Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Sleep_Ack">
            <summary>
            NM_Sleep_Ack Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Ud_Launch">
            <summary>
            NM_Ud_Launch Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Successor">
            <summary>
            NM_Successor Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.NM_Mode">
            <summary>
            NM_Mode Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.WakeupCnt">
            <summary>
            WakeupCnt Signal definition (OSEK)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.RepeatMessageRequest">
            <summary>
            RepeatMessageRequest signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.SourceNodeIdentifier">
            <summary>
            SourceNodeIdentifier signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.WakeupRsn">
            <summary>
            WakeupRsn signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.AwakeDiagActv">
            <summary>
            AwakeDiagActv signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.NetworkManagement.CanNMSignalDefinitions.AwakeIgnitionOn">
            <summary>
            AwakeIgnitionOn signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanNMEvent`1">
            <summary>
            CAN NM event base class
            </summary>
            <typeparam name="TNMState">The type of the NM state.</typeparam>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMEvent`1.NMProtocol">
            <summary>
            Gets the type of the network management.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMEvent`1.Id">
            <summary>
            NM node ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMEvent`1.NMState">
            <summary>
            The networkmanagement state as byte (value meaning depends on NMProtocol)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMEvent`1.EventText">
            <summary>
            Event text
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanNMOsekEvent">
            <summary>
            CAN network managment event (Osek)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMOsekEvent.NMProtocol">
            <summary>
            Get type of network management: OSEK
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMOsekEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanNMEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMOsekEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanNMEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanNMAutosarEvent">
            <summary>
            CAN natwork managment event (Autosar)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMAutosarEvent.NMProtocol">
            <summary>
            Get type of network management: OSEK
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMAutosarEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanNMAutosarEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMAutosarEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanNMAutosarEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanNMNode">
            <summary>
            Represents a single network management (NM) node.
            </summary>
            <remarks>Non generic base functionality.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMNode.#ctor(System.UInt32,System.UInt32)">
            <summary>
            The Constructor.
            </summary>
            <param name="basicAddress">The network basic address.</param>
            <param name="stationAddress">The station address of the node.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.Id">
            <summary>
            Nm Id.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.BasicAddress">
            <summary>
            Network Management basic address (NWM-Basisadresse)
            </summary>
            <remarks>Valid value range: 0..536870911</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.StationAddress">
            <summary>
            Network Management Station Address (NWM-Stationsadresse)
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.Name">
            <summary>
            Descriptive name of this node
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMNode.Wakeup">
            <summary>
            Wakes the node up
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.StayAwake">
            <summary>
            Set stay awake
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.Observing">
            <summary>
            Gets or sets the value indicating whether this node is an observing node.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode.StayAwakeImpl">
            <summary>
            Stay awake implementation.
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Can.CanNMNode.PropertyChanged">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a 
            property is changed on a component.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMNode.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Can.CanNMNode.BusSleepIndication">
            <summary>
            This occurs when the node signals its sleep readiness.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMNode.OnBusSleepIndication">
            <summary>
            This function will be called when the node signals its sleep readiness.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanNMNode`1">
            <summary>
            Represents a single network management (NM) node based on <c>NMStateType</c>.
            </summary>
            <typeparam name="NMStateType">The nm protocol type.</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Can.CanNMNode`1.#ctor(System.UInt32,System.UInt32)">
            <summary>
            The Constructor.
            </summary>
            <param name="basicAddress">The network basic address.</param>
            <param name="stationAddress">The station address of the node.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanNMNode`1.State">
            <summary>
            Current nm node state based on <c>NMStateType</c>.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMStateOsek">
            <summary>
            Network management node states OSEK.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.Sleep">
            <summary>
            Sleep mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.Alive">
            <summary>
            Alive event state.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.Ring">
            <summary>
            Stay awake mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.SleepIndication">
            <summary>
            Sleep indication.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.SleepAck">
            <summary>
            Sleep acknowledge.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateOsek.LimpHome">
            <summary>
            Limp home.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMStateAutosar">
            <summary>
            Network management node states Autosar.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateAutosar.BusSleepMode">
            <summary>
            Bus sleep mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateAutosar.RepeatMessage">
            <summary>
            Repeat message mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateAutosar.NormalOperation">
            <summary>
            Normal operation mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateAutosar.ReadySleep">
            <summary>
            Ready sleep.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateAutosar.PrepareBusSleepMode">
            <summary>
            Prepare bus sleep mode (sleep acknowledge).
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMStateNone">
            <summary>
            Network management node states None.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMStateNone.Active">
            <summary>
            Always Active
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CanObserver">
            <summary>
            CAN Observer: Check received CAN standard messages for correct timing according to DBC
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.CanObserver.CalcTolerance">
            <summary>
            Additional tolerance for measurement and calculation accuracy
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.#ctor(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage},ET.FW.Hal.Can.Observer.IErrorHandler)">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="protocol">Protocol underneath</param>
            <param name="errorHandler">error handler, providing callbacks for different errors</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.Protocol">
            <summary>
            Observed CAN standard protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.Catalog">
            <summary>
            Access CAN catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.ErrorHandler">
            <summary>
            Error handler is notified on all detected errors
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.Dispose">
            <summary>
            Dispose the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.ET#FW#Hal#Can#ICanMessageRepositoryClient#Reset(System.DateTime)">
            <summary>
            Notification: Repository resets itself
            </summary>
            <param name="time">Timestamp (of message which triggered reset)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.ReStart(System.DateTime)">
            <summary>
            Trigger CAN-Observer restart: all messages before given timestamp are ignored
            Method should be called if CAN wakeup is detected, to ignore messages from last active period
            </summary>
            <param name="newStartTime">re-startTime (ET-Clock time)</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.CanObserver.startTime">
            <summary>
            Timestamp of last (re-)start
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.ObserveNM">
            <summary>
            Flag to control observation of network management messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.ObserveDiag">
            <summary>
            Flag to control observation of diagnostics messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.UpperCycleTolerance">
            <summary>
            Upper cycle time tolerance in percent
            </summary>
            <remarks>
            Maximum allowed cycle time is:  CycleTime * (1 + (UpperCycleTolerance / 100))
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.LowerCycleTolerance">
            <summary>
            Lower cycle time tolerance in percent
            </summary>
            <remarks>
            Minimum allowed cycle time is:  CycleTime * (1 - (LowercCycleTolerance / 100))
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.MessageInitialReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Object@)">
            <summary>
            Callback from CAN message repository for first reception of CAN message
            filter observed messages and create message observer instances for the different send types
            </summary>
            <param name="message">CAN message</param>
            <param name="definition">Message definition from catalog</param>
            <param name="tag">Client specific tag</param>
            <returns>true to switch on further notifications for this message, false to ignore given message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.CheckMessageDefinition(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Check message definition for mismatches between message and contained signals
            </summary>
            <param name="message">Received CAN message</param>
            <param name="definition">Message definition from catalog</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserver.MessageUpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Boolean,System.Object@)">
            <summary>
            Callback from CAN message repository for repeated reception of CAN message
            Call update method of message observer to check the message
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="tag">client specific tag for message ID</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserver.Timer">
            <summary>
            Service for timeout watching
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CanObserverMessage">
            <summary>
            CAN Observer output message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverMessage.Id">
            <summary>
            CAN message ID (11 bit standard or 29 bit extended) of related CAN message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverMessage.Text">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverMessage.Type">
            <summary>
            Type of observer message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverMessage.Translate">
            <summary>
            Get textual representation of message text
            </summary>
            <returns>Message text</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverMessage.TranslateMessage">
            <summary>
            Translate the Message
            </summary>
            <returns>The MessageTranslation</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol">
            <summary>
            Software protocol wrapper for CAN observer
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.Dispose">
            <summary>
            Dispose the protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.ObserveNM">
            <summary>
            Parameter to control observation of network management messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.ObserveDiag">
            <summary>
            Flag to control observation of diagnostics messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.UpperCycleTolerance">
            <summary>
            Upper cycle time tolerance in percent
            </summary>
            <remarks>
            Maximum allowed cycle time is:  CycleTime * (1 + (UpperCycleTolerance / 100))
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.LowerCycleTolerance">
            <summary>
            Lower cycle time tolerance in percent
            </summary>
            <remarks>
            Minimum allowed cycle time is:  CycleTime * (1 - (LowercCycleTolerance / 100))
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.Info(System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Handle info text
            </summary>
            <param name="text">info text to handle</param>
            <param name="message">related CAN message</param>
            <param name="definition">Message definition from Catalog</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.Info(System.String,System.DateTime)">
            <summary>
            Handle info text
            </summary>
            <param name="text">Info text to handle</param>
            <param name="time">Timestamp of message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.TimingError(System.String,System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Handle observed timing error on CAN bus
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.RepeatError(System.String,System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Int32)">
            <summary>
            Handle repeat count errors (message was repeated to often)
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="message">Newly received message</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="repeatCount">Current number of repetitions</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.CreateMessage(System.String,ET.FW.Hal.Can.Observer.ObserverMessageType,ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Create output message
            </summary>
            <param name="text">message text</param>
            <param name="type">Type of message</param>
            <param name="canMessage">CAN message which caused the oberver message</param>
            <returns>newly created message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.TimeoutError(System.String,System.String,System.DateTime,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Core.Messaging.RxTx)">
            <summary>
            Handle timeout due to missing message
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="time">Timestamp of timeout detection</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="rxTx">message direction</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CanObserverSoftwareProtocol.MessageText(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Create string for given CAN message
            </summary>
            <param name="message">message to translate</param>
            <returns>message string</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicAndSpontanObserver">
            <summary>
            CAN message observer for messages with send type CyclicAndSpontan
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicAndSpontanObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicAndSpontanObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicAndSpontanObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check cycle time depending on repeat count
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicIfActiveAndSpontanWithDelayObserver">
            <summary>
            CAN message observer for messages with send type CyclicIfActiveAndSpontanWithDelay
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveAndSpontanWithDelayObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveAndSpontanWithDelayObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveAndSpontanWithDelayObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicIfActiveFastObserver">
            <summary>
            CAN message observer for messages with send type CyclicIfActiveFast
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveFastObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveFastObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveFastObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check repeat count and cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicIfActiveObserver">
            <summary>
            CAN message observer for messages with send type CyclicIfActive
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicIfActiveObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check repeat count and cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicObserver">
            <summary>
            CAN message observer for messages with send type CyclicX
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.CyclicWithRepeatOnDemandObserver">
            <summary>
            CAN message observer for messages with send type CyclicWithRepeatOnDemand
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicWithRepeatOnDemandObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicWithRepeatOnDemandObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.CyclicWithRepeatOnDemandObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.DelayObserver">
            <summary>
            Observer for one CAN message, observing min delay time
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.DelayObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.DelayObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check minimum delay time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.ICanObserverMessage">
            <summary>
            CAN Observer output message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.ICanObserverMessage.Id">
            <summary>
            CAN message ID (11 bit standard or 29 bit extended) of related CAN message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.ICanObserverMessage.Text">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.ICanObserverMessage.Type">
            <summary>
            Type of observer message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.ObserverMessageType">
            <summary>
            Type of observer message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.ObserverMessageType.Info">
            <summary>
            Information message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.ObserverMessageType.TimingError">
            <summary>
            Error in message (cycle) times
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.ObserverMessageType.RepeatError">
            <summary>
            Error with number of message repititions
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.ObserverMessageType.TimeoutError">
            <summary>
            Timeout due to missing message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.IErrorHandler">
            <summary>
            Interface to signal CAN Observer errors
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.IErrorHandler.TimingError(System.String,System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Handle timing errors
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.IErrorHandler.RepeatError(System.String,System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Int32)">
            <summary>
            Handle repeat count errors (message was repeatred to often)
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="message">Newly received message</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="repeatCount">Current number of repetitions</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.IErrorHandler.TimeoutError(System.String,System.String,System.DateTime,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Core.Messaging.RxTx)">
            <summary>
            Handle timeout due to missing message
            </summary>
            <param name="error">Error message</param>
            <param name="addInfo">Additional error information</param>
            <param name="time">Timestamp of timeout detection</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="rxTx">message direction</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.IErrorHandler.Info(System.String,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition)">
            <summary>
            Handle info text
            </summary>
            <param name="text">info text to handle</param>
            <param name="message">related CAN message</param>
            <param name="definition">Message definition from Catalog</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.IErrorHandler.Info(System.String,System.DateTime)">
            <summary>
            Handle info text
            </summary>
            <param name="text">Info text to handle</param>
            <param name="time">Timestamp of message</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.MessageObserver">
            <summary>
            Base class for message observers
            Provides some base values, helper methods for timing check and helpers for timeout handling for the derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.CycleTimeUpperTolerance">
            <summary>
            Max. cycle time upper tolerance
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.CycleTimeLowerTolerance">
            <summary>
            Max. cycle time lower tolerance
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.ActiveCycleTimeUpperTolerance">
            <summary>
            Max. active cycle time upper tolerance
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.ActiveCycleTimeLowerTolerance">
            <summary>
            Max. active cycle time lower tolerance
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.MaxCycleTime">
            <summary>
            Maximum tolerated cycle time
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.MinCycleTime">
            <summary>
            Minimum tolerated cycle time
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.MaxActiveCycleTime">
            <summary>
            Maximum tolerated cycle time
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.MinActiveCycleTime">
            <summary>
            Minimum tolerated cycle time
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.RepeatCount">
            <summary>
            Number of times, the message was received with unchanged payload;
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.RxTx">
            <summary>
            Direction of observed CAN message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CalcCycleTolerance(System.TimeSpan,System.UInt32)">
            <summary>
            Calculate cycle time tolerance
            </summary>
            <param name="cycleTime">cycle time</param>
            <param name="tolerance">cycle time tolerance in percent</param>
            <returns>calculated tolerance</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.Boolean)">
            <summary>
            New message with observed ID was received: Update RepeatCount, calc time diff to last message and call internal check method
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received, handle it
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckForDefaultPayload(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Check if payload of given CAN message is default value.
            Helper method for derived classes.
            </summary>
            <param name="message">CAN message to check</param>
            <returns>true if payload is default payload, false otherwise</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckForActivePayload(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Checks if message is "active"
            </summary>
            <param name="message">The CAN message to check.</param>
            <returns>true if payload indicates an active message.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckCycleTime(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan)">
            <summary>
            Check if duration since last reception matches configured cycle time (check min and max time)
            Helper method for derived classes.
            </summary>
            <param name="currentMessage">currently receiver message</param>
            <param name="lastMessage">previously received message</param>
            <param name="delta">duration between previous and current message reception</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckMaxCycleTime(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan)">
            <summary>
            Check if duration since last reception is not longer than configured cycle time
            Helper method for derived classes.
            </summary>
            <param name="currentMessage">currently receiver message</param>
            <param name="lastMessage">previously received message</param>
            <param name="delta">duration between previous and current message reception</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckActiveCycleTime(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan)">
            <summary>
            Check if duration since last reception matches configured active cycle time (check min and max time)
            </summary>
            <param name="currentMessage">currently receiver message</param>
            <param name="lastMessage">previously received message</param>
            <param name="delta">duration between previous and current message reception</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CheckMaxActiveCycleTime(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan)">
            <summary>
            Check if duration since last reception is not longer as configured activecycle time 
            </summary>
            <param name="currentMessage">currently receiver message</param>
            <param name="lastMessage">previously received message</param>
            <param name="delta">duration between previous and current message reception</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.StopTimeout">
            <summary>
            Stop timeout timer if registerd
            </summary>
            <returns>true if timeout timer was active before -> no timeout occured</returns>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.timeout">
            <summary>
            Time of registered timeout
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.timeoutElapsed">
            <summary>
            Flag is set if timeout handler is called and reset in next message update
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.StartCycleTimeout(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Register timeout handler for double cycle time
            </summary>
            <param name="message">Timeout start message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.CycleTimeoutHandler(System.Object,ET.FW.Hal.Can.Observer.MessageTimerEventArgs)">
            <summary>
            Handler for cyclic message timeout
            </summary>
            <param name="sender">event source: timer</param>
            <param name="args">event arguments containing timestamp</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.StartActiveCycleTimeout(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Register timeout handler for double active cycle time
            </summary>
            <param name="message">Timeout start message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageObserver.ActiveCycleTimeoutHandler(System.Object,ET.FW.Hal.Can.Observer.MessageTimerEventArgs)">
            <summary>
            Handler for cyclic message timeout
            </summary>
            <param name="sender">event source: timer</param>
            <param name="args">event arguments containing timestamp</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.Definition">
            <summary>
            Message definition from catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageObserver.CanObserver">
            <summary>
            CAN observer
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Observer.MessageObserver.ErrorHandler">
            <summary>
            Handler for detected errors
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.MessageTimerEventArgs">
            <summary>
            Wakeup notification event arguments
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimerEventArgs.#ctor(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Construct event args
            </summary>
            <param name="timestamp">ET clock timestamp</param>
            <param name="hwTimestamp">optional HW timestamp</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageTimerEventArgs.Timestamp">
            <summary>
            Wakeup trigger time (ETClock)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageTimerEventArgs.HWTimestamp">
            <summary>
            Wakeup trigger time (HW timestamp)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.SpontanWithRepetitionObserver">
            <summary>
            CAN message observer for messages with send type SpontanWithRepetition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.SpontanWithRepetitionObserver.#ctor(ET.FW.Hal.Can.Catalogs.CanMessageDefinition,ET.FW.Hal.Can.Observer.CanObserver)">
            <summary>
            Constructor for message specific delay time observer.
            Calculate and buffer some message specific values
            </summary>
            <param name="definition">message definition from catalog</param>
            <param name="observer">Central CAN observer</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.SpontanWithRepetitionObserver.InitialReceived(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Message was received for the first time
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.SpontanWithRepetitionObserver.UpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            New message with observed ID was received: Check cycle time
            </summary>
            <param name="currentMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="delta">duration between previous and current message reception</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="firstMessageAfterTimeout">Flag indicates that timeout was reported since last message update</param>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.MessageTimer`1">
            <summary>
            Timer which notifies its clients on provided (message) times, can be used offline.
            Timer uses HW time if available, ET time otherwise
            </summary>
            <typeparam name="TMessage">Type of message to be observed to extract times</typeparam>
            <remarks>Class is not thread safe</remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.Observer.MessageTimer`1.Notify">
            <summary>
            Delegate for timer notifications
            </summary>
            <param name="sender">event source: timer</param>
            <param name="args">event arguments containing timestamp</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimer`1.#ctor(ET.FW.Core.Messaging.IMessageSource{`0})">
            <summary>
            Construct timer for given message source (e.g. protocol)
            </summary>
            <param name="messageSource">source of messages which provide actual timestamps</param>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageTimer`1.messageSource">
            <summary>
            Message source, used for time setting
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimer`1.Register(System.DateTime,ET.FW.Hal.Can.Observer.MessageTimer{`0}.Notify)">
            <summary>
            Register new client object, it will be notified when its wakeupTime is elapsed
            </summary>
            <param name="wakeupTime">Notification time</param>
            <param name="handler">Wakeup handler</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimer`1.Deregister(System.DateTime,ET.FW.Hal.Can.Observer.MessageTimer{`0}.Notify)">
            <summary>
            Deregister client object, object will no longer be notified for given time,
            Other notification times of same object are not affected
            </summary>
            <param name="wakeupTime">Notification time, must be identical to time given at Register</param>
            <param name="handler">Wakeup handler, to be removed</param>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimer`1.DeregisterAll">
            <summary>
            Deregister all clients
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.Observer.MessageTimer`1.clients">
            <summary>
            List of delegates for client notification, sorted by wakeup times
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.Observer.MessageTimer`1.MessageSource_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{`0})">
            <summary>
            Handle new message from source: extract time and check if clients need to be notified
            </summary>
            <param name="sender">message source</param>
            <param name="e">event args containing the message</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanSignalChangedMessage">
            <summary>
            The implementation of the message for signal changed event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.#ctor">
            <summary>
            Create a new instance if the <see cref="T:ET.FW.Hal.Can.CanSignalChangedMessage"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.UId">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.Payload">
            <summary>
            Access data bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.Timestamp">
            <summary>
            Message timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.HWTimestamp">
            <summary>
            Orignal timestamp of the Hardware (only set if available)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.RxTx">
            <summary>
            Received/transmitted message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.Protocol">
            <summary>
            Assigned protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.Translate">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.TranslateMessage">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.ET#FW#Core#Messaging#IMessage#Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.ET#FW#Core#Messaging#IMessage#Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.MessageError">
            <summary>
            Proprty for an Error detected with the message.<para></para>
            MessageError == null means no error has been detected at the time the comparison is made.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.HasError">
            <summary>
            Returns, whether an error has been detected for this Message.
            </summary>
            <returns>True if has error</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.GetCacheKey">
            <summary>
            Returns key for caching.
            </summary>
            <returns>Key for caching</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.Id">
            <summary>
            CAN message ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalChangedMessage.ChangedSignals">
            <summary>
            The list of changed signals.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalChangedMessage.ET#FW#Hal#Can#ICanSignalChangedMessage#Fill(ET.FW.Hal.Can.ICanMessage,System.Collections.Generic.IEnumerable{ET.FW.Hal.Can.Catalogs.ICanSignal})">
            <summary>
            Fill the CanSignalChangedMessage with data from the given CanMessage.
            </summary>
            <param name="canMessage">The original CanMessage to get the data.</param>
            <param name="changedSignals">List of changed signals</param>
            <returns><c>true</c> if the operation was completed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanStdProtocol">
            <summary>
            Hardware protocol for CAN standard messages
            Protocol supports single and cyclic message transmission
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.#ctor(ET.FW.Hal.Can.ICanStdTransmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.CanStdProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to be used by protocol.</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanStdProtocol.canTransmitter">
            <summary>
            Specialized transmitter for sending normal and cyclic messages via hardware port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdProtocol.MessageRouting">
            <summary>
            Message routing instance for this protocol. Object handles routing of messages received from this protocol to other protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.CreateMessage(System.UInt32,System.Byte[])">
            <summary>
            Typesafe creator for CAN messages with message content as parameters.
            </summary>
            <param name="canId">CAN ID</param>
            <param name="payload">message data</param>
            <returns>Newly created specialized CAN message object</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.SendCyclicMessage(ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Message</param>
            <param name="transmissionCount">The count of transmissions of the message. 0xFFFFFFFF for unlimited transmission</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.SendCyclicCanFDMessage(ET.FW.Hal.Can.ContainerPduInfo,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN FD message with specific send parameter.
            </summary>
            <param name="info">Container pdu info for Container pdu. null if it is a normal FD message </param>
            <param name="message">The message/payload to send - Contained pdu for container pdu message</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Message</param>
            <param name="transmissionCount">The count of transmissions of the message. 0xFFFFFFFF for unlimited transmission</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.StopSend(System.UInt32)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="canId">The can id of the message to stop.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automatically incremented.
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.UnRegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unregistered/Stop the auto increment.
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.RegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.UnRegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Unregistered/Stop the auto increment.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdProtocol.E2EProtection">
            <summary>
            Access handler for E2E protections
            </summary>
            <value>
            E2E protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdProtocol.SecOcProtection">
            <summary>
            Access handler for SecOC protections
            </summary>
            <value>
            SecOC protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdProtocol.EnableE2EObserver">
            <summary>
            Parameter which controls usage of E2E protection observer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanStdProtocol.e2EObserver">
            <summary>
            E2E observer instance, set if E2E protection CRC check is enabled and E2E protection is configured for the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.OnOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Raise message output event.
            Before the message is signaled E2E CRC check is performed
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdProtocol.Catalog">
            <summary>
            Optional Catalog for message re-translation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.SendVssCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VSS transmission.
            </summary>
            <param name="canId">The can id of the message to stop.</param>
            <param name="containerId">contaner id</param>
            <param name="IsExtended">is extended can id</param>
            <param name="canVssKey">Can Vss Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.SendVssOffsetCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VSS transmission.
            </summary>
            <param name="canId">The can id of the message</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended pdu id or not</param>
            <param name="canRealTmOffsetKey">Can Real Time Offset Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.SendVinCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Send Vin message
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="containerId">continer id</param>
            <param name="IsExtended">extended or not</param>
            <param name="vinBytes">Vin in bytes</param>
            <param name="canVinKey">can Vin Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cach</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cach</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanSuppressIdenticalSoftwareProtocol">
            <summary>
            Protocol for handling of multiple identical Can Messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSuppressIdenticalSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSuppressIdenticalSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpCombiProtocol">
            <summary>
            Abstraction of different TpProtocols for unique behavior
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpCombiProtocol.registeredIDs">
            <summary>
            Dictionary containing all registered CAN ID pairs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor setting for testbench.otmt.xml configuration.
            </summary>
            <param name="name">protocol name</param>
            <param name="downlink">standard protocol object</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.#ctor(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage},ET.FW.Hal.Can.ICanTpProtocol)">
            <summary>
            Constructor setting protocols
            </summary>
            <param name="stdProtocol">Standardprotocol for CanMessages</param>
            <param name="hardProtocol">Hardwareprotocol for Tp</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocol.BlockSize">
            <summary>Sets, gets the blocksize to send in FlowControl in case of simulation</summary>		
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocol.Catalog">
            <summary>
            CAN Catalog for message translation, TP definitions
            </summary>
            <remarks>
            All CAN TP ID pairs from catalog are registered for passive TP
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocol.StdProtocol">
            <summary>
            Standard CAN-Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocol.StMin">
            <summary>Sets, gets the st min value to send in FlowControl in case of simulation</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.RegisterTpIDs(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Register CAN ID pair for TP communication
            </summary>
            <param name="ids">CAN ID pair</param>
            <param name="active">
            true for active: Framework is source/destination of communication
            false for passive: communication is monitored only
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.SendMessage(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Send CAN TP (request) message
            </summary>
            <param name="message">the message</param>
            <returns>
            Result which indicates if message could be sent
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.SimulateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary> 
            Simulate message or error event (used for offline mode)
            </summary>
            <param name="message">simulated message or event</param>
            <returns>true if message could be processed</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.AddReceiver(ET.FW.Hal.Can.CanTpCombiProtocolReceiver)">
            <summary>
            Initialize and add new receiver
            </summary>
            <param name="receiver">Receiver to add</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocol.AddTpIds(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Add TP ID pair
            </summary>
            <param name="ids">TP ID pair</param>
            <param name="active">Flag for active TP</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpCombiProtocolReceiver">
            <summary>
            Class for extended handling of reception of one TP data block 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ConsecutiveTimeout">
            <summary>Timeout for consecutiveframes</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.FlowControlTimeout">
            <summary>Timeout for flowcontrol</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.TimeoutTolerance">
            <summary>Timeout tolerance</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.#ctor(ET.FW.Hal.Can.ICanTpProtocol,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage},System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            the Constructor
            </summary>
            <param name="hardProtocol">hard protocol for TP messages</param>
            <param name="stdProtocol">protocol for TP messages</param>
            <param name="source">source ID</param>
            <param name="destination">destination ID</param>
            <param name="isOnline">Is online mode</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ExpectingDelegate">
            <summary>
            Delegate for expected messages
            </summary>
            <param name="message">The message.</param>
            <returns>
            true =&gt; Expected message handled -&gt; dont check again
            false =&gt; Check again
            </returns>
        </member>
        <member name="E:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.MessageReceived">
            <summary>Raised when a message was received</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ConsecutiveFrameTimerHandler">
            <summary>Gets the timerhandle for consecutive frames</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.FlowControlTimerHandler">
            <summary>Gets the timerhandle for consecutive frames</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.HandleStdMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle errorobservation of TP frame
            </summary>
            <param name="message">CAN message</param>
            <returns>TP message, if it is complete, otherwise null</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.CreateTpMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Adding CanMessages to the created TpMessage
            </summary>
            <param name="frame">TP frame to extract information from (timestamp)</param>
            <returns>newly created TP message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.HandleConsecutiveFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle errorobservation of multi frame TP message
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>TP message, if frame was the last, null if further frames are expected</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.HandleFirstFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle errorobservation of first frame of multi frame TP message
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>null, because TP message is not finished yet</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.HandleFlowControl(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle errorobservation of CAN TP flow control frame
            </summary>
            <param name="message">CAN message / frame</param>
            <returns>null, because flow control messages contain no TP data</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.HandleSingleFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle errorobservation of single frame TP messages 
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>TP message from given single standard message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ConsecutiveFrameTimerElapsed(System.DateTime)">
            <summary>
            the Consecutive frame timer elapsed.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ExpectingConsecutiveFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Expectings the consecutive frame.
            </summary>
            <param name="message">The message.</param>
            <returns>false on failure(timeout)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ExpectingFlowControl(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Expectings the flow control.
            </summary>
            <param name="message">The message.</param>
            <returns>false on failure(timeout)</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.ExpectingNoMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Expectings the no message.
            </summary>
            <param name="message">The message.</param>
            <returns>true on Single and first Frame</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.FlowControlTimerElapsed(System.DateTime)">
            <summary>
            Flows the control timer elapsed.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.GetCanTpErrorEvent(System.DateTime,ET.FW.Hal.Can.CanTpError)">
            <summary>
            Gets the can tp error event.
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="error">The error.</param>
            <returns>the new message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.RaiseMessageReceived(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Raises the message received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.RemoveConsecutiveFrameTimerHandler">
            <summary>
            Removes the consecutive frame timer handler.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.RemoveFlowControlTimerHandler">
            <summary>
            Removes the flow control timer handler.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.SetExpectingConsecutiveFrame">
            <summary>
            Sets the expecting consecutive frame.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.SetExpectingFlowControl">
            <summary>
            Sets the expecting flow control.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpCombiProtocolReceiver.StdProtocolOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
             the Standards protocol output.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ET.FW.Core.Messaging.MessageEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpErrorEvent">
            <summary>
            Errors event for CAN TP communication
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.Destination">
            <summary>
            Message destination Identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.Source">
            <summary>
            Message source Identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.Error">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.EventText">
            <summary>
            Textual event description (used e.g. for Translate() )
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.RequestID">
            <summary>
            TP request ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpErrorEvent.ResponseID">
            <summary>
            TP response ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpErrorEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanTpErrorEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpErrorEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanTpErrorEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpIDPair">
            <summary>
            Pair of CAN IDs for sending and receiving of data via CAN TP 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpIDPair.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor, create and initialitze an CAN ID pair
            </summary>
            <param name="txID">CAN ID for sent data (Diagnostics: request ID)</param>
            <param name="rxID">CAN ID for received data(Diagnostics: response ID)</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpIDPair.TxID">
            <summary>
            CAN ID for sent messages 
            Request ID for diagnostics tester
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpIDPair.RxID">
            <summary>
            CAN ID for received messages
            Response ID for diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpIDPair.Valid">
            <summary>
            Check if both CAN IDs are valid (not 0)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpIDPair.ToString">
            <summary>
            Get string representation of this object
            </summary>
            <returns>object as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpIDPair.Equals(System.Object)">
            <summary>
            Check for equality
            </summary>
            <param name="obj">other object to compare</param>
            <returns>true if other object is equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpIDPair.GetHashCode">
            <summary>
            Calculate hash
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpMessage">
            <summary>
            CAN TP message (ET Framework CAN TP message based on AutomotiveCanTpMessage)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.#ctor">
            <summary>
            Default Constructor.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Constructor with parameters ti initialize message fields
            </summary>
            <param name="destination">destination CAN ID</param>
            <param name="source">Source CAN ID</param>
            <param name="payload">Data block</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.Destination">
            <summary>
            Message destination Identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.Source">
            <summary>
            Message source Identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.RequestID">
            <summary>
            TP request ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.ResponseID">
            <summary>
            TP response ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the CanTpMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the CanTpMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.ET#FW#Hal#Can#ICanTpMessage#Clone">
            <summary>
            Duplicate this message
            </summary>
            <returns>Shallow copy of source message</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpMessage.MessageParts">
            <summary>List of Can-messages this message consists of</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpMessage.GetCacheKey">
            <summary>
            Gets cache key
            </summary>
            <returns>Cache key</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpProtocol">
            <summary>
            Hardware protocol for CAN TP messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Can.ICanTpMessage},ET.FW.Hal.Can.ICanTpChannelHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.CanTpProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter for the protocol</param>
            <param name="channelHandler">Helper for handling of can channels</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpProtocol.BlockSize">
            <summary>Sets, gets the blocksize to send in FlowControl in case of simulation</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpProtocol.StMin">
            <summary>Sets, gets the st min value to send in FlowControl in case of simulation</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpProtocol.Events">
            <summary>
            Property which provides CAN TP event output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpProtocol.channelHandler">
            <summary>
            Handler for active TP channels
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpProtocol.RegisterTpIDs(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Register CAN ID pair for TP communication
            </summary>
            <param name="ids">CAN ID pair</param>
            <param name="active">
            true for active: Framework is source/destination of communication
            false for passive: communication is monitored only
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cach</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cach</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpReceiveJob">
            <summary>
            Receive job implementation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpReceiveJob.#ctor(ET.FW.Hal.Can.CanTpSession,System.TimeSpan)">
            <summary>
            Constructor, with parameters to inittialize the job.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">receive timeout</param>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpReceiveJob.session">
            <summary>
            TP session to use
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpReceiveJob.Start">
            <summary>
            Start job, register for incoming responses
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpReceiveJob.Abort">
            <summary>
            Abort job
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpReceiveJob.session_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanTpMessage})">
            <summary>
            Event handler for incoming responses: wait for response message
            </summary>
            <param name="sender">sender (session)</param>
            <param name="e">event arguments including the message</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpSession">
            <summary>
            CAN TP session/channel, handles communication with one ECU (one pair of request and response IDs)
            Only messages (responses/requests) for this session are signalled via output event
            </summary>
            <remarks>
            Session supports two different modes:
            - active mode: Framwork participates in communication
            - passive mode, communication of two other components is monitored.
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSession.ecuName">
            <summary>
            ecu name
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSession.Vin">
            <summary>
            Vin Number
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.#ctor(ET.FW.Hal.Can.ICanBus,ET.FW.Hal.Can.CanTpIDPair,System.Boolean,System.String,System.Byte[])">
            <summary>
            Constructor with parameters for initialization
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="canIDs">CAN message ID pair for transmit/receive</param>
            <param name="active">true for active TP (framework handles flow control)</param>
            <param name="nameOfECU"></param>
            <param name="vin"></param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.#ctor(ET.FW.Hal.Can.ICanBus,ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Constructor with parameters for initialization
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="canIDs">CAN message ID pair for transmit/receive</param>
            <param name="active">true for active TP (framework handles flow control)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.#ctor(ET.FW.Hal.Can.ICanBus,System.UInt32,System.UInt32)">
            <summary>
            Constructor.
            This constructor creates an active TP channel
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="txID">CAN ID for sent data (Diagnostics: request ID)</param>
            <param name="rxID">CAN ID for received data(Diagnostics: response ID)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.#ctor(ET.FW.Hal.Can.ICanBus,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Constructor with separate IDs and activity flag
            </summary>
            <param name="bus">CAN bus to use for communication</param>
            <param name="txID">CAN ID for sent data (Diagnostics: request ID)</param>
            <param name="rxID">CAN ID for received data(Diagnostics: response ID)</param>
            <param name="active">true for active TP (framework handles flow control)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.Dispose">
            <summary>
            Shutdown the TP session
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSession.Bus">
            <summary>
            CAN bus used by this session
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSession.Protocol">
            <summary>
            CAN TP protocol instance to use
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSession.TpEventSource">
            <summary>Source for tp events</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSession.StdProtocol">
            <summary>
            CAN standard protocol which handles TP segments
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSession.CanIDs">
            <summary>
            CAN message IDs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSession.Active">
            <summary>
            Flag for active TP mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.CreateMessage">
            <summary>
            Create TX message for this session
            </summary>
            <returns>the newly created TP message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.SendMessage(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Send CAN TP (request) message
            </summary>
            <param name="msg">the message</param>
            <returns>
            Send name, which indicates if message could be sent, further errors are not monitored here
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.SendRequest(ET.FW.Hal.Can.ICanTpMessage,System.TimeSpan,ET.FW.Core.Jobs.IJob{ET.FW.Hal.Can.ICanTpMessage}@)">
            <summary>
            Send request message and create job to handle response
            </summary>
            <param name="request">request message</param>
            <param name="responseTimeout">timeout for response</param>
            <param name="responseJob">job for async handling of response</param>
            <returns>Send name, which indicates if message could be sent, further errors are not monitored here</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.ReceiveResponse(System.TimeSpan)">
            <summary>
            Wait for response message (should be called before sending of request to ensure response reception)
            </summary>
            <param name="timeout">Receive timeout.</param>
            <returns>job object, which will hold the response message after reception</returns>
        </member>
        <member name="E:ET.FW.Hal.Can.CanTpSession.Errors">
            <summary>
            Event handler which signals CAN TP errors related to this session
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Can.CanTpSession.StdOutput">
            <summary>
            Event signals TP message segements received or transmitted on CAN standard protocol 
            </summary>
            <remarks>
            Event is useful to monitor if TP transfer is still in progress. (e.g. for timeout handling)
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.ProtocolOutputHandler(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanTpMessage})">
            <summary>
            Event handler for protocol output
            </summary>
            <param name="sender">TP protocol</param>
            <param name="e">event arguments including TP message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.EventsOutputHandler(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanTpEvent})">
            <summary>
            Event handler for CanTp events
            </summary>
            <param name="sender">event protocol</param>
            <param name="e">event argument including CanTp event message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.StdProtocol_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Event handler for CAN standard messages
            </summary>
            <param name="sender">std protcol</param>
            <param name="e">arguments containig the message</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.OnStdOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Raise message output event
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSession.ToString">
            <summary>
            Get string representation of this object
            </summary>
            <returns>object as string</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpSoftwareProtocol">
            <summary>
            CAN TP software protocol
            Protocol is only for decoding of TP segments, sending is not supported!
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocol.BlockSize">
            <summary>Not used because sending is not possible for this protocol.</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocol.StMin">
            <summary>Not used because sending is not possible for this protocol.</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocol.RegisterTpIDs(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Register CAN ID pair for TP communication
            </summary>
            <param name="ids">CAN ID pair</param>
            <param name="active">
            true for active: Framework is source/destination of communication
            false for passive: communication is monitored only
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocol.DeregisterTpIDs(ET.FW.Hal.Can.CanTpIDPair)">
            <summary>
            Deregister CAN TP ID pair
            </summary>
            <param name="ids">CAN ID pair</param>
            <returns>true on siccess</returns>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocol.registeredIDs">
            <summary>
            Dictionary containing all registered CAN ID pairs
            Each pair is stored twice with rx and tx ID as key
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocol.SendMessage(ET.FW.Hal.Can.ICanTpMessage)">
            <summary>
            Send message, not supported here.
            </summary>
            <param name="message">message to be sent</param>
            <returns>Error: sending not supported</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
            <remarks>
            Method is called for received and sent(!) messages, so both message types must be handled here!
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocol.receivers">
            <summary>
            Dictionary of (active) TP receivers per message CAN ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocol.Catalog">
            <summary>
            CAN Catalog for message translation, TP definitions
            </summary>
            <remarks>
            All CAN TP ID pairs from catalog are registered for passive TP
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver">
            <summary>
            Class handels reception of one TP data block 
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.ErrorOccured">
            <summary>Raised when an error occured</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameType">
            <summary>
            Type of message (bit 4..7 of first data byte)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameType.SingleFrame">
            <summary>Single frame message</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameType.FirstFrame">
            <summary>First frame of multi frame message</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameType.ConsecutiveFrame">
            <summary>Frame of multi frame message</summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameType.FlowControl">
            <summary>Flow control message</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.#ctor(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanTpMessage},System.UInt32,System.UInt32)">
            <summary>
            Protocol constructor
            </summary>
            <param name="protocol">protocol for TP messages</param>
            <param name="source">source ID</param>
            <param name="destination">destination ID</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.Protocol">
            <summary>
            Protocol for TP messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.Source">
            <summary>
            Source CAN ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.Destination">
            <summary>
            Destination CAN ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.GetFrameType(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Gets the type of the frame.
            </summary>
            <param name="message">The message.</param>
            <returns>the frametype</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.HandleStdMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle TP frame (CAN standard message) for our ID
            </summary>
            <param name="message">CAN message</param>
            <returns>TP message, if it is complete, otherwise null</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.HandleSingleFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle single frame TP messages (data block is packed into one message)
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>TP message from given single standard message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.HandleFirstFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle first frame of multi frame TP message
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>null, because TP message is not finished yet</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.HandleConsecutiveFrame(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle frame of multi frame TP message
            </summary>
            <param name="frame">CAN message / frame</param>
            <returns>TP message, if frame was the last, null if further frames are expected</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.HandleFlowControl(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Handle CAN TP flow control frame
            </summary>
            <param name="message">CAN message / frame</param>
            <returns>null, because flow control messages contain no TP data</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.CreateTpMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Create TP message without payload
            </summary>
            <param name="frame">TP frame to extract information from (timestamp)</param>
            <returns>newly created TP message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.GetCanTpErrorEvent(System.DateTime,ET.FW.Hal.Can.CanTpError)">
            <summary>
            Gets the can tp error event.
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="error">The error.</param>
            <returns>the new message</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.FrameCount">
            <summary>
            Number of received data frames for current block
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.BlockLen">
            <summary>
            (Expected) length of received data block
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.Data">
            <summary>
            Received data block (for multi segment messages)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpSoftwareProtocolReceiver.RaiseErrorOccured(ET.FW.Hal.Can.ICanTpErrorEvent)">
            <summary>
            Called on an new error
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Core.Messaging.UplinkOnlyProtocol`1"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.Events">
            <summary>
            Property which provides CAN TP event output
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.RegisterTpIDs(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Register CAN ID pair for TP communication
            Protocol is used for offline handling, so method call is ignored.
            </summary>
            <param name="ids">CAN ID pair</param>
            <param name="active">parameter is ignored here</param>
            <returns>always true, method call is ignored</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.SimulateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary> 
            Simulate message or error event (used for offline mode)
            </summary>
            <param name="message">simulated message or event</param>
            <returns>true if message could be processed</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.BlockSize">
            <summary>Not used because sending is not possible for this protocol.</summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.StMin">
            <summary>Not used because sending is not possible for this protocol.</summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cach</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanTpUplinkOnlyProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cach</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTransmitObject">
            <summary>
            Represents a transmit object which was started cyclicly.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTransmitObject.Message">
            <summary>
            Gets the message which was transmitted.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTransmitObject.Cycle">
            <summary>
            Gets the transmit cycle.
            </summary>
            <value>The cycle.</value>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTransmitObject">
            <summary>
            Represents a transmit object which was started cyclicly.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTransmitObject.Message">
            <summary>
            Gets the message which was transmitted.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanTransmitObject.Cycle">
            <summary>
            Gets the transmit cycle.
            </summary>
            <value>The cycle.</value>
        </member>
        <member name="T:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Core.Messaging.UplinkOnlyProtocol`1"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.CreateMessage(System.UInt32,System.Byte[])">
            <summary>
            Typesafe creator for CAN messages with message content as parameters.
            </summary>
            <param name="canId">CAN ID</param>
            <param name="payload">message data</param>
            <returns>Newly created specialized CAN message object</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32,System.Object@)">
            <summary>
            Register a Message with a area where a value is automatically incremented
            </summary>
            <param name="msgId">the message</param>
            <param name="startPos">cycle time for sending</param>
            <param name="length">The length.</param>
            <param name="handle">auto increment handle, needed for unregistered</param>
            <returns>
            Send result, which indicates if message sending could be started, further errors are not monitored here
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.UnRegisterAutoIncrement(System.Object)">
            <summary>
            Unregistered the auto increment.
            Protocol is used for offline handling, so method call is ignored.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SendCyclicMessage(ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Message</param>
            <param name="repeatCount">The repeat count.</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation. In our case always Sending not supported
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SendCyclicCanFDMessage(ET.FW.Hal.Can.ContainerPduInfo,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN FD message with specific send parameter.
            </summary>
            <param name="info">Container pdu info for Container pdu. null if it is a normal FD message </param>
            <param name="message">The message/payload to send - Contained pdu for container pdu message</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Message</param>
            <param name="transmissionCount">The count of transmissions of the message. 0xFFFFFFFF for unlimited transmission</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.StopSend(System.UInt32)">
            <summary>
            Stops a cyclic transmission. This is not supported for this protocol!
            </summary>
            <param name="canId">The can id of the message to stop.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.E2EProtection">
            <summary>
            Access handler for E2E protections, not supported here
            </summary>
            <value>
            Always null, because up-link has no E2E handler
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SecOcProtection">
            <summary>
            Access handler for SecOC protections
            </summary>
            <value>
            SecOC protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.MessageRouting">
            <summary>
            Message routing instance for this protocol. Not supported here.
            </summary>
            <value>
            Always null, not supported.
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.EnableE2EObserver">
            <summary>
            Parameter which controls usage of E2E protection observer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.e2EObserver">
            <summary>
            E2E observer instance, set if E2E protection CRC check is enabled and E2E protection is configured for the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.OnOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Raise message output event.
            Before the message is signaled E2E CRC check is performed
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.Catalog">
            <summary>
            Optional Catalog for message re-translation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented. This is not supportet for this protocol!
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.UnRegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unregistered/Stop the auto increment. This is not supported for this protocol!
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.RegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automatically incremented.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.UnRegisterAutoIncrementForContainerPduMessage(System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Unregistered/Stop the auto increment.
            </summary>
            <param name="containerId">Container CAN Id</param>
            <param name="pduId">Contained Pdu identifier</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SendVssCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VSS command
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended can id or not</param>
            <param name="canVssKey">Can Vss Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SendVssOffsetCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VssOffsetCommand command
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">continer id</param>
            <param name="IsExtended">extended or not</param>
            <param name="canRealTmOffsetKey">can Real Time offset Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.SendVinCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Send Vin message
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">continer id</param>
            <param name="IsExtended">extended or not</param>
            <param name="vinBytes">vin no</param>
            <param name="canVinKey">vin pdu specific key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cach</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanStdUplinkOnlyProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cach</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanSignalSoftwareProtocol2">
            <summary>
            Protocol for handling of multiple identical Can signals.
            </summary>
            <remarks>Alternativ implementation using CAN message repository.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.EnableE2EProtectionSignals">
            <summary>
            Flag to enable handling of E2E protection signals, notrmally this signals are ignored
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.CheckSignal(ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Checks if signal should be handled here
            </summary>
            <param name="definition">The signal definition.</param>
            <returns>true to enable handling of signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.GenerateCanSignalMessage(ET.FW.Hal.Can.ICanMessage,System.Collections.Generic.IEnumerable{ET.FW.Hal.Can.Catalogs.ICanSignal})">
            <summary>
            Create CAN Signal message for protocol output
            </summary>
            <param name="canMessage">associated can message</param>
            <param name="changedSignals">list of changed signals</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.Dispose">
            <summary>
            Dispose the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.ET#FW#Hal#Can#ICanMessageRepositoryClient#Reset(System.DateTime)">
            <summary>
            Notification: Repository resets itself
            </summary>
            <param name="time">Timestamp (of message which triggered reset)</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.MessageInitialReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Object@)">
            <summary>
            Callback from CAN message repository for first reception of CAN message
            Setup CAN signals dictionary to detect futitr value changes, some signals (SQC, CRC) are ignored
            </summary>
            <param name="message">CAN message</param>
            <param name="definition">Message definition from catalog</param>
            <param name="tag">Client specific tag</param>
            <returns>true to switch on further notifications for this message, false to ignore given message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol2.MessageUpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Boolean,System.Object@)">
            <summary>
            Callback from CAN message repository for repeated reception of CAN message
            </summary>
            <param name="newMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="tag">client specific tag for message ID</param>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanBus">
            <summary>
            CAN bus API
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanBus.StdProtocol">
            <summary>
            Protocol for transmitting/receiving of CAN standard messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanBus.TpProtocol">
            <summary>
            Protocol for transport protocol messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanBus.EventProtocol">
            <summary>
            Protocol for CAB event/error pseudo messages
            </summary>
            <remarks>Protocoll handles standard and TP events</remarks>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanBus.NetworkManagement">
            <summary>
            Gets the network management.
            </summary>
            <value>The network management.</value>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanChannelAccess">
            <summary>
            Common Interface for CAN channel accesses
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanChannelAccess.NetworkManagement">
            <summary>
            Gets the network management.
            </summary>
            <value>The network management.</value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanChannelAccess.StdProtocol">
            <summary>
            CAN Standard Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanChannelAccess.EventProtocol">
            <summary>
            CAN Event protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanErrorEvent">
            <summary>
            CAN bus error event interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanErrorEvent.Error">
            <summary>
            Gets the type of the error.
            </summary>
            <value>The type of the error.</value>
        </member>
        <member name="T:ET.FW.Hal.Can.CanError">
            <summary>
            Represents a CAN error message.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.StateNormal">
            <summary>
            Determinates normal state of the CAN cell.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.TXCounterWarning">
            <summary>
            Determinates that the amount of TX CAN errors reached the treshold warning level.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.TXCounterErrorPassive">
            <summary>
            Determinates that the amount of TX CAN errors reached the treshold error level.
            The can cell will it self into passive state.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.TXCounterBusOff">
            <summary>
            Determinates that the CAN bus is offline.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.RXCounterWarning">
            <summary>
            Determinates that the amount of RX CAN errors reached the treshold warning level.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.RXCounterErrorPassive">
            <summary>
            Determinates that the amount of RX CAN errors reached the treshold error level.
            The can cell will it self into passive state.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.ProtStuffError">
            <summary>
            Determinates a CAN protocol stuffing error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.ProtFormError">
            <summary>
            Determinates a CAN protocol form error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.ProtAckError">
            <summary>
            Determinates a CAN protocol ack error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.ProtBitError">
            <summary>
            Determinates a CAN protocol bit error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.ProtCrcError">
            <summary>
            Determinates a CAN protocol CRC error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.OverrunError">
            <summary>
            Overrun error (Vector XL)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanError.InvalidHwDataError">
            <summary>
            Invalid Data received from Hardware (e.g. DLC > 8 from Moccabox)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanEvent">
            <summary>
            Base interface for all CAN events/error messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanMessage">
            <summary>
            Public interface of the ET Framework standard CAN message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanMessage.Id">
            <summary>
            CAN message ID (11 bit standard)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanMessageRepository">
            <summary>
            Interface of repository for all CAN message values of one CAN network. Repository can be used by different clients to monitor message content, timing etc.
            </summary>
            <remarks>
            Clients should implement <see cref="T:ET.FW.Core.Events.IEventDecoupling"/> for decoupled handling of callback events
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRepository.AddClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Register new client for message amd network callbacks
            </summary>
            <param name="client">Client to be notified</param>
            <remarks>
            Client should implement <see cref="T:ET.FW.Core.Events.IEventDecoupling"/> for decoupled handling of callback events
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRepository.RemoveClient(ET.FW.Hal.Can.ICanMessageRepositoryClient)">
            <summary>
            Remove previously registered client
            </summary>
            <param name="client">Client to be removed</param>
            <returns>true, if client registration was found and removed</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanMessageRepository.Item(System.UInt32)">
            <summary>
            Access newest message with given identifier which was received
            </summary>
            <param name="canID">CAN Identifier of message to fetch from repository</param>
            <returns>CAN message, if already received since last network startup, otherwise <c>null</c></returns>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanMessageRepository.Catalog">
            <summary>
            Associated CAN catalog
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanNetworkManagement">
            <summary>
            Network management
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNetworkManagement.CurrentNodes">
            <summary>
            All current (active) Nm nodes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanNetworkManagement.AddSimulatingNode(System.UInt32,System.UInt32)">
            <summary>
            Add a new simulating NM node.
            </summary>
            <param name="nmBasicAddress">The nm basic address in the network.</param>
            <param name="nmStationAddress">The nm node address.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanNetworkManagement.AddObservingNode(System.UInt32,System.UInt32)">
            <summary>
            Add a new observing NM node. (Observes HW NM devices)
            </summary>
            <param name="nmBasicAddress">The nm basic address in the network.</param>
            <param name="nmStationAddress">The nm node address.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanNetworkManagement.RemoveNode(ET.FW.Hal.Can.CanNMNode)">
            <summary>
            Remove a NM node.
            </summary>
            <param name="node">NMNode to deregister.</param>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNetworkManagement.Type">
            <summary>
            Nm type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNetworkManagement.Protocol">
            <summary>
            Nm protocol.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNetworkManagement.State">
            <summary>
            Global NM state
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMType">
            <summary>
            Networkmanagement type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMType.Undefined">
            <summary>
            The nm type is undefined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMType.Direct">
            <summary>
            Direct nm with special nm messages
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMType.Indirect">
            <summary>
            Indirect nm without special nm messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMProtocolType">
            <summary>
            Networkmanagement protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMProtocolType.None">
            <summary>
            No nm used
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMProtocolType.Osek">
            <summary>
            OSEK nm protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMProtocolType.Autosar">
            <summary>
            Autosar nm protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMProtocolType.AutosarV4">
            <summary>
            Autosar nm protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.NMBusState">
            <summary>
            Fundamental bus states
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMBusState.Undefined">
            <summary>
            State could not be determined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMBusState.Asleep">
            <summary>
            Bus is asleep (no messages)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.NMBusState.Awake">
            <summary>
            Bus is awake (messages are fired)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanNMEvent">
            <summary>
            CAN network management events interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNMEvent.NMProtocol">
            <summary>
            Gets the NM protocol.
            </summary>
            <value>The NM protocol.</value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNMEvent.Id">
            <summary>
            The node ID of then event sender.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanNMEvent`1">
            <summary>
            CAN network management events interface
            </summary>
            <typeparam name="TNMState">NM state type, depending on protocol</typeparam>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanNMEvent`1.NMState">
            <summary>
            The NM state depending on NM protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanMessageRepositoryClient">
            <summary>
            Interface for usage of the CAN message repository
            The interface provides differenet callback methods to report received messages and network states
            Each client can associate individual tags with each message (identifier) to support message handling in the callback method
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRepositoryClient.MessageInitialReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Object@)">
            <summary>
            Callback method, called if a CAN message ist initially received after network start
            Client can use this message to decide if it wants further update notifications and to set a message ID specific tag
            </summary>
            <param name="message">Message object, containig initial data</param>
            <param name="definition">Message definition from catalog</param>
            <param name="tag">client specific tag, can be set, replaced or modified</param>
            <returns><c>true</c>if client wants further update notifications for message ID, <c>false</c> if client ignores the message</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRepositoryClient.MessageUpdateReceived(ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.ICanMessage,ET.FW.Hal.Can.Catalogs.CanMessageDefinition,System.Boolean,System.Object@)">
            <summary>
            Callback method, called if message is received again and client switched on updates for the message ID
            </summary>
            <param name="newMessage">Newly received message</param>
            <param name="lastMessage">Old message, which was received before</param>
            <param name="definition">Message definition from Catalog</param>
            <param name="payloadChanged">Flag indicates, that new message payload is different from last message payload</param>
            <param name="tag">client specific tag for message ID</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanMessageRepositoryClient.Reset(System.DateTime)">
            <summary>
            Callback method, called when repository resets its content.
            </summary>
            <param name="time">Timestamp (of message which triggered reset)</param>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanStdProtocol">
            <summary>
            Specialized protocol for standard CAN messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.SendCyclicMessage(ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="transmissionCount">The count of transmissions of the message. 0xFFFFFFFF for unlimited transmission</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.SendCyclicCanFDMessage(ET.FW.Hal.Can.ContainerPduInfo,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN FD message with specific send parameter.
            </summary>
            <param name="info">Container pdu info for Container pdu. null if it is a normal FD message </param>
            <param name="message">The message/payload to send - Contained pdu for container pdu message</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="transmissionCount">The count of transmissions of the message. 0xFFFFFFFF for unlimited transmission</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.StopSend(System.UInt32)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="canId">The can id of the message to stop.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.CreateMessage(System.UInt32,System.Byte[])">
            <summary>
            Typesafe creator for CAN messages with message content as parameters.
            </summary>
            <param name="canId">CAN ID</param>
            <param name="payload">message data</param>
            <returns>Newly created specialized CAN message object</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanStdProtocol.E2EProtection">
            <summary>
            Access handler for E2E protections
            </summary>
            <value>
            E2E protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanStdProtocol.SecOcProtection">
            <summary>
            Access handler for SecOC protections
            </summary>
            <value>
            SecOC protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanStdProtocol.MessageRouting">
            <summary>
            Message routing instance for this protocol. Object handles routing of messages received from this protocol to other protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.SendVssCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send Vss message
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended can id or not</param>
            <param name="canVssKey">Can Vss Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.SendVssOffsetCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VssOffset message
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">continer id</param>
            <param name="IsExtended">extended or not</param>
            <param name="canRealTmOffsetKey">can Real Time offset Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.SendVinCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Send Vin message
            </summary>
            <param name="canId">can id</param>
            <param name="containerId">continer id</param>
            <param name="IsExtended">extended or not</param>
            <param name="vinBytes">vin no</param>
            <param name="canVinKey">vin pdu specific key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdProtocol.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanStdTransmitter">
            <summary>
            Interface for hardware port which sends standard CAN messages and handles cyclic CAN messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.SendCyclicMessage(ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="repeatCount">The repeat count of the message. The message is send once and then the count of repetitions (repeatCount = 0 means the message is send once)</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.SendCyclicCanFDMessage(ET.FW.Hal.Can.ContainerPduInfo,ET.FW.Hal.Can.ICanMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Can.CyclicTransmissionChangeMode,System.TimeSpan)">
            <summary>
            Sends/register a CAN FD message with specific send parameter.
            </summary>
            <param name="info">Container pdu info for Container pdu. null if it is a normal FD message </param>
            <param name="message">The message/payload to send - Contained pdu for container pdu message</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="repeatCount">The repeat count of the message. The message is send once and then the count of repetitions (repeatCount = 0 means the message is send once)</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.StopSend(System.UInt32)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="canId">The can id of the message to stop.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.SendVssCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VSS messages.
            </summary>
            <param name="canId">The can id of the message to stop.</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended or not</param>
            <param name="canVssKey">can Vss Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.SendVssOffsetCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[])">
            <summary>
            Send VSS Real Offset messages.
            </summary>
            <param name="canId">The can id of the message.</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended can or not</param>
            <param name="canOffsetKey">can Offset Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.SendVinCommand(System.UInt32,System.UInt32,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Send Vin message
            </summary>
            <param name="canId">The Can Id of the message</param>
            <param name="containerId">container id</param>
            <param name="IsExtended">extended can id or not</param>
            <param name="vinBytes">Vin in bytes</param>
            <param name="canVinKey">can Vin Key</param>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanStdTransmitter.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ContainerPduInfo">
            <summary>
            Container Pdu Information
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ContainerPduInfo.Id">
            <summary>
            Container pdu message ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ContainerPduInfo.IsFullHeader">
            <summary>
            Pdu Id is Full header(4 bytes) or 3 bytes
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CyclicTransmissionChangeMode">
            <summary>
            Different modes for payload change of cyclic transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CyclicTransmissionChangeMode.Next">
            <summary>
            Payload is changed with next regular transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CyclicTransmissionChangeMode.Spontanous">
            <summary>
            An extra message transmission with new payload is sent immediately and the value is stored. 
            The cycle time is not changed!
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CyclicTransmissionChangeMode.Immediately">
            <summary>
            An extra message transmission with new payload is sent immediately and the value is stored. 
            The cycle time and the repetition are changed!
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CyclicTransmissionChangeMode.NextImmediately">
            <summary>
            Payload is changed with next regular transmission
            The cycle time and the repetition are changed!
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTpErrorEvent">
            <summary>
            CAN TP error events interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpErrorEvent.Error">
            <summary>
            Gets the TP error.
            </summary>
            <value>The TP error.</value>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpErrorEvent.Destination">
            <summary>
            Destination CAN ID (CAN ID in each message)
            e.g. request ID for diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpErrorEvent.Source">
            <summary>
            Source CAN ID (CAN ID for other direction)
            e.g. response ID for diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpErrorEvent.RequestID">
            <summary>
            Request ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpErrorEvent.ResponseID">
            <summary>
            Response ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanTpError">
            <summary>
            CAN Tp Error codes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.OutOfMemory">
            <summary>
            Out of memory during receiving of the first frame.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadSingleFrame">
            <summary>
            Bad single frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadFirstFrameLength">
            <summary>
            Bad length of the first frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadFirstFrame">
            <summary>
            Bad first frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadConsecutiveFrameLength">
            <summary>
            Bad length of the consecutive frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadConsecutiveFrameSequence">
            <summary>
            Bad sequence number of the consecutive frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadMessageLength">
            <summary>
            Bad message length. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadFlowStatus">
            <summary>
            Bad flow status of the TP driver. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.UnexpectedFrame">
            <summary>
            Unexpected frame received. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.UnexpectedCtrlInfo">
            <summary>
            Unexpected control information. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.ConsecutiveFrameTimeout">
            <summary>
            Timeout for the consecutive frame.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.FlowControlTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.FlowControlCTSTimeout">
            <summary>
            Timeout for the flow control clear to send.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.TimeSpanSmallerStMinFromFlowControl">
            <summary>
            STMin given from FlowControl was not used
            for ConsecutiveFrame
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.BadFrameLength">
            <summary>
            Bad length of the frame. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.CanTpError.MessageCreationFailure">
            <summary>
            Message creation failure. 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTpEvent">
            <summary>
            CAN TP events interface
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTpMessage">
            <summary>
            API interface for CAN TP messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpMessage.Destination">
            <summary>
            Destination CAN ID (CAN ID in each message)
            e.g. request ID for Tx messages from diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpMessage.Source">
            <summary>
            Source CAN ID (CAN ID for other direction)
            e.g. response ID for Tx messages from diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanTpMessage.Clone">
            <summary>
            Duplicate message, creating a shallow copy
            </summary>
            <returns>duplicate of message</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpMessage.RequestID">
            <summary>
            Request ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpMessage.ResponseID">
            <summary>
            Response ID (11 bit standard or 29 bit extended)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTpProtocol">
            <summary>
            Specialized protocol for TP messages with additional API for handling of TP IDs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanTpProtocol.RegisterTpIDs(ET.FW.Hal.Can.CanTpIDPair,System.Boolean)">
            <summary>
            Register CAN ID pair for TP communication
            </summary>
            <param name="ids">CAN ID pair</param>
            <param name="active">
            true for active: Framework is source/destination of communication (-> framework sends flow control for received messages)
            false for passive: communication is monitored only
            </param>
            <returns>true on success</returns>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpProtocol.BlockSize">
            <summary>Sets, gets the blocksize to send in FlowControl in case of simulation</summary>		
        </member>
        <member name="P:ET.FW.Hal.Can.ICanTpProtocol.StMin">
            <summary>Sets, gets the st min value to send in FlowControl in case of simulation</summary>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanTpChannelHandler">
            <summary>
            Interface for handler for CAN channels. Handler controls TP channels for active TP handling.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanTpChannelHandler.SetTpParameter">
            <summary>
            Setting TpParameter blocksize, stmin and consecutive frame timeout
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanTpChannelHandler.AddTpIDs(ET.FW.Hal.Can.CanTpIDPair)">
            <summary>
            Start/add TP channel with given IDs
            </summary>
            <param name="ids">CAN IDs for TP channel</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanTpChannelHandler.RemoveTpIDs(ET.FW.Hal.Can.CanTpIDPair)">
            <summary>
            Stop/remove TP channel with given IDs
            </summary>
            <param name="ids">CAN IDs of TP channel</param>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.CanSignalSoftwareProtocol">
            <summary>
            Protocol for handling of multiple identical Can signals.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CanMessageEntry">
            <summary>
            Entry of CAN message dictionary
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CanMessageEntry.MessageDefinition">
            <summary>
            Message definition from catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CanMessageEntry.Message">
            <summary>
            Last message received
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CanMessageEntry.Signals">
            <summary>
            Dictionary containing last signal values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol.Catalog">
            <summary>
            Gets or sets the Catalog for message re-translation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="P:ET.FW.Hal.Can.CanSignalSoftwareProtocol.EnableE2EProtectionSignals">
            <summary>
            Flag to enable handling of E2E protection signals, notrmally this signals are ignored
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CheckSignal(ET.FW.Hal.Can.Catalogs.ICanSignal)">
            <summary>
            Checks if signal should be handled here
            </summary>
            <param name="signal">The signal to get the definition.</param>
            <returns>true to enable handling of signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CheckSignal(ET.FW.Hal.Can.Catalogs.CanSignalDefinition)">
            <summary>
            Checks if signal should be handled here
            </summary>
            <param name="definition">The signal definition.</param>
            <returns>true to enable handling of signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.Init">
            <summary>
            Initialize protocol, create message dictionary
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol, some signals (SQC, CRC) are ignored
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
            <remarks>
            Method is called for received and sent(!) messages, so both message types must be handled here!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.CheckValue(ET.FW.Hal.Can.Catalogs.ICanSignal,ET.FW.Core.Messaging.MessageError@)">
            <summary>
            check given signal value
            </summary>
            <param name="signal">the singal to check</param>
            <param name="messageError">The message error.</param>
        </member>
        <member name="M:ET.FW.Hal.Can.CanSignalSoftwareProtocol.GenerateCanSignalMessage(ET.FW.Hal.Can.CanSignalSoftwareProtocol.CanMessageEntry,System.Collections.Generic.IEnumerable{ET.FW.Hal.Can.Catalogs.ICanSignal})">
            <summary>
            Create CAN Signal message for protocol output
            </summary>
            <param name="messageEntry">Message data</param>
            <param name="changedSignals">List of changed signals</param>
        </member>
        <member name="T:ET.FW.Hal.Can.ICanSignalChangedMessage">
            <summary>
            The message for signal changed event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanSignalChangedMessage.Id">
            <summary>
            CAN message ID (11 bit standard)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanSignalChangedMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.ICanSignalChangedMessage.ChangedSignals">
            <summary>
            The list of changed signals.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.ICanSignalChangedMessage.Fill(ET.FW.Hal.Can.ICanMessage,System.Collections.Generic.IEnumerable{ET.FW.Hal.Can.Catalogs.ICanSignal})">
            <summary>
            Fill the CanSignalChangedMessage with data from the given CanMessage.
            </summary>
            <param name="canMessage">The original CanMessage to get the data.</param>
            <param name="changedSignals">List of changed signals</param>
            <returns><c>true</c> if the operation was completed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Can.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.Messages.Error("An error occured");
            </code></example>
        </member>
        <member name="P:ET.FW.Hal.Can.Log.Can">
            <summary>
            Logger with code "Can"
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Log.CanTP">
            <summary>
            Logger with code "CanTP"
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Log.CanNM">
            <summary>
            Logger with code "CanNM"
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.Log.CanDiag">
            <summary>
            Logger with code "CanDiag"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.OfflineCanChannelAccess">
            <summary>
            CAN channel access for offline mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.OfflineCanChannelAccess.#ctor(ET.FW.Core.Hal.IEquipment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Can.OfflineCanChannelAccess" /> class.
            </summary>
            <param name="equipment">The equipment.</param>
            <param name="portName">Name of the port.</param>
            <param name="name">The name.</param>
            <param name="portType">Port type for channel access</param>
        </member>
        <member name="P:ET.FW.Hal.Can.OfflineCanChannelAccess.NetworkManagement">
            <summary>
            Access to network management
            </summary>
            <value>Always null</value>
        </member>
        <member name="P:ET.FW.Hal.Can.OfflineCanChannelAccess.StdProtocol">
            <summary>
            CAN Standard Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Can.OfflineCanChannelAccess.EventProtocol">
            <summary>
            CAN Event protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.OfflineCanChannelAccess.CreateHardwareProtocol(System.String,System.String)">
            <summary>
            Provide offline hardware protocol of given type
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Matching protocol or null if not available
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Can.UsbDevice">
            <summary>
            Usb device
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.NoDevice">
            <summary>
            No device
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.DeviveA">
            <summary>
            Device A
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.DeviveB">
            <summary>
            Device B
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.DeviveC">
            <summary>
            Device C
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.DeviveD">
            <summary>
            Device D
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.IgnoreDevice">
            <summary>
            Ignore device
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbDevice.Undefined">
            <summary>
            Undefined state or unknown device
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.SwResult">
            <summary>
            Status SW_Result
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.SwResult.Success">
            <summary>
            Is successful
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.SwResult.FailedSameDevice">
            <summary>
            Failed, because same device for both host
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.SwResult.Unknown">
            <summary>
            Unknown or undefined result
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol">
            <summary>
            CAN standard protocol for USB switch
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.DefaultSwitchDelay">
            <summary>
            Default switch delay
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.CreatePayload(ET.FW.Hal.Can.UsbDevice,ET.FW.Hal.Can.UsbDevice)">
            <summary>
            Create payload
            </summary>
            <param name="host1Usb">usb for host1</param>
            <param name="host2Usb">usb for host2</param>
            <returns>The payload bytes</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="P:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.CanId">
            <summary>
            USB-Switch CAN-ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.SwitchHost1UsbDevice(ET.FW.Hal.Can.UsbDevice)">
            <summary>
            Switch USB device for host1
            </summary>
            <param name="usb">USb device</param>
            <returns>Send message result</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.SwitchHost2UsbDevice(ET.FW.Hal.Can.UsbDevice)">
            <summary>
            Switch USB device for host2
            </summary>
            <param name="usb">USb device</param>
            <returns>Send message result</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.CreateMessage(System.UInt32,System.Byte[])">
            <summary>
            Typesafe creator for CAN messages with message content as parameters.
            </summary>
            <param name="canId">CAN ID</param>
            <param name="payload">message data</param>
            <returns>Newly created specialized CAN message object</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.SwitchHostUsbDevice(ET.FW.Hal.Can.UsbDevice,ET.FW.Hal.Can.UsbDevice)">
            <summary>
            Switch USB device for host 1 and 2
            </summary>
            <param name="host1Usb">USb device dor host1</param>
            <param name="host2Usb">USb device dor host2</param>
            <returns>Send message result</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.TranslatePayloadCommand(System.Byte[])">
            <summary>
            Translate command payload
            </summary>
            <param name="payload">The payload</param>
            <returns>The translated string of payload</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.TranslatePayloadStatus(System.Byte[])">
            <summary>
            Translate status payload
            </summary>
            <param name="payload">The payload</param>
            <returns>The translated string of payload</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.TranslateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate message content to textual representation.
            This implementation calls catalogs Translate method or returns an empty string.
            </summary>
            <param name="message">message to translate</param>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.TranslateMessageToObject(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate message content to textual representation
            </summary>
            <param name="message">message to translate</param>
            <returns>The translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.SendMessage(ET.FW.Hal.Can.ICanMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">Message to send</param>
            <returns>Send result</returns>
        </member>
        <member name="M:ET.FW.Hal.Can.UsbSwitchCanSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Can.ICanMessage})">
            <summary>
            Downlink out handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Message EventArgs</param>
        </member>
    </members>
</doc>
