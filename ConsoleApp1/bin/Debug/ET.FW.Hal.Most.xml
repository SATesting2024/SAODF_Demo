<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.FW.Hal.Most</name>
    </assembly>
    <members>
        <member name="T:ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer">
            <summary>
            Container for referenced parameter in MOST-Catalog (like some error-parameter)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer.CatalogParameter">
            <summary>
            The referenced parameter out of the most-xml-catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer.OptypePositions">
            <summary>
            Parameter Positions for different Optypes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer.#ctor(ET.FW.Hal.Most.Catalogs.CatalogParameter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            construct the referenced parameter container
            </summary>
            <param name="catalogParameter">referenced real xml-catalog-parameter</param>
            <param name="optypePositions">optype positions</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.StreamCase">
            <summary>
            Helper Class for StreamCases
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.StreamCase.Parameters">
            <summary>
            Gets or sets the inside parameters
            </summary>
            <value>The parameters</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.StreamCase.IsRealStream">
            <summary>
            Gets or sets a value indicating whether this instance is a real stream.
            </summary>
            <value>
            true if this instance is real stream
            </value>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.StreamCase.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.StreamCase"/> class.
            </summary>
            <param name="ntg">Valid ntg.</param>
            <param name="xmlStreamCase">XML-Node to start parse</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.StreamCase.#ctor(ET.FW.Hal.Most.Catalogs.eNTG)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.StreamCase"/> class.
            </summary>
            <param name="ntg">Valid ntg.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.XmlParam">
            <summary>
            Inner Parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.XmlParam.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Add the structural information for this parameter into the list of parameters
            </summary>
            <param name="message">Message where the payload is</param>
            <param name="pos">Posiiton inside payload where this parameter starts</param>
            <param name="recursion">Recursion "stack"</param>
            <param name="parameter">List of parameters this one should be added to</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.XmlParam.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Check for equality of most-catalog-parameters
            </summary>
            <param name="oparam">the xml-parameter to check with</param>
            <returns>true if values are identical</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.XmlParam.Name">
            <summary>
            Name of this most-catalog-parameter out of the most fcat
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.XmlParam.CatalogParamType">
            <summary>
            Most-Type of this parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.XmlParam.GetParaInfos(System.Int32)">
            <summary>
            Get the Type and the name of this Parameter as string for the error outputs
            </summary>
            <param name="pos">position to give out</param>
            <returns>formated string for Parmeter type, name and pos of error</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.BitDescription">
            <summary>
            Class that holds information about the true and false values of an bit
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.BitDescription.TrueDesc">
            <summary>
            True-Value-Description for bit
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.BitDescription.FalseDesc">
            <summary>
            False-Value-Description for bit
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.BitDescription.#ctor(System.String,System.String)">
            <summary>
            build a bit-description
            </summary>
            <param name="givenTrueDesc">true value</param>
            <param name="givenFalseDesc">false value</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.eNTG">
            <summary>
            known NTGs
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.NTG45">
            <summary>
            ntg 4.5
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.NTG5">
            <summary>
            ntg 5
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.NTG55">
            <summary>
            ntg 5.5
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.NTG6">
            <summary>
            ntg 6.0
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.NTG7">
            <summary>
            ntg 7.0
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.GEN20X">
            <summary>
            Gen20X
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.INIC">
            <summary>
            INIC Chip
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.eNTG.Unknown">
            <summary>
            unknown ntg
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.CatalogNode">
            <summary>
            abstract class to use for catalog-nodes of fblock, function, optypes and parameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogNode.Name">
            <summary>
            Name of the CatalogNode
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogNode.Description">
            <summary>
            Description of the CatalogNode
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogNode.ValidFor">
            <summary>
            List of NTGs this is valid for
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogNode.#ctor">
            <summary>
            Catalog node for FBlock, Function, Optpye or Parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogNode.#ctor(System.String)">
            <summary>
            Catalog node for FBlock, Function, Optpye or Parameter
            </summary>
            <param name="nodeName">Name of the node</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.CatalogParser">
            <summary>
            Class used to hold one or more parsed MOST-Function-Catalogs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.FBlocksById">
            <summary>
            Dictionary of all FBlocks accessible by id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.FBlocksByName">
            <summary>
            Dictionary of all FBlocks accessible by name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.RefParameter">
            <summary>
            Dictionary of global Most-Catalog-Parameter-Definitions used for referenced Parameters-Definitions
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.OptypeNames4Method">
            <summary>
            List of Optypes for Methods as String 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.OptypeNames4Property">
            <summary>
            List of Optypes for Properties as String 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.OptypeIds4Method">
            <summary>
            List of Optypes for Methods as String 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParser.OptypeIds4Property">
            <summary>
            List of Optypes for Properties as String 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.CatalogParser"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParser.Reset">
            <summary>
            Clear the parsed entries out of this instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParser.Parse(System.Xml.XmlDocument)">
            <summary>
            Parses the specified XML doc into the MostCatalog.
            If called a second time the information is merged with the previous information.
            To clear all entries before parsing call Clear
            </summary>
            <param name="xmlDoc">The MOST Function Catalog as XML document</param>
            <returns>true if parsing was successfull</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.CatalogStreamParameter">
            <summary>
            Catalog-Parameter inside a stream
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogStreamParameter.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.CatalogParameter"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="name">Name of the Parameter</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogStreamParameter.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String,System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.CatalogParameter"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="name">Name of the Parameter</param>
            <param name="xmlTopLevelParam">XML-Node of the Top-Level-Parameter</param>
            <param name="prefix">Prefix (for further parsing in xml)</param>
            <param name="allreadyDeep">Hirarchial information inside xml</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogStreamParameter.Repeat">
            <summary>
            Flag to signal if this StreamParameter is reapeated or not
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.DataInterpreter">
            <summary>
            Helper to interpret several data things
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.DataInterpreter.DotSplitStringToInt(System.String)">
            <summary>
            build an array of int out of textual representation like 4..9
            handles hexadecimal representations
            </summary>
            <param name="value">The value.</param>
            <returns>array of integers</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.DataInterpreter.DotSplitDecToInt(System.String)">
            <summary>
            build an array of int out of textual representation like 4..9
            does not handle hexadecimal representations
            </summary>
            <param name="value">The value.</param>
            <returns>array of integers</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.DataInterpreter.ByteArrayTo12BitList(System.Byte[],System.Int32)">
            <summary>
            Get every 12 Bits as short out of an byte-array
            </summary>
            <param name="data">source bytearray</param>
            <param name="pos">startposition in bytearray</param>
            <returns>List of shorts</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.FBlock">
            <summary>
            FBlock whitch holds information to retranslate a binary message into the textual representation.
            Each FBlock can be valid for multiple NTGs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.FBlock.Id">
            <summary>
            Gets the Id of the FBlock
            </summary>
            <value>The Id of the FBlock</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.FBlock.FunctionsById">
            <summary>
            Array of Functions in this FBlock
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.FBlock.FunctionsByName">
            <summary>
            Dictionary of Functionnames in this FBlock
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.FBlock.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String,System.Int32,System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.FBlock"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="fblockName">Name of the Fblock</param>
            <param name="fblockId">Id of the FBlock</param>
            <param name="xmlFBlock">XML node where the FBlock starts</param>
            <param name="refParams">Dictionary of global referenced MostCatalogParameters</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.FBlock.Parse(ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer})">
            <summary>
            Parses the specified FBlock
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="xmlFBlock">XML node where the parameter starts</param>
            <param name="refParams">Dictionary of global referenced MostCatalogParameters</param>
            <returns>true if parsing was sucessfull</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.FcatLoader">
            <summary>
            MostCatalog loader based on Fcat files
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.FcatLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Implementation of the ICatalogLoader interface
            Does a fresh import of one Catalog into an empty CatalogParser to enable disassembly
            </summary>
            <param name="configuration">Catalog configuration</param>
            <param name="fullSourcePath">Full qualified source path</param>
            <returns>MOST catalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.FcatLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog
            Does a fresh import of one Catalog into an empty CatalogParser to enable disassembly
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">The stream of the source</param>
            <returns>MOST catalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.Function">
            <summary>
            Function whitch holds information to retranslate a binary message into the textual representation.
            Each Function can be valid for multiple NTGs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.PosXRelevant">
            <summary>
            Gets or sets a value indicating whether [pos X relevant].
            </summary>
            true if pos X is relevant
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.PosYRelevant">
            <summary>
            Gets or sets a value indicating whether [pos Y relevant].
            </summary>
            true if pos Y is relevant
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.OpTypes">
            <summary>
            Valid OpTypes of this Function
            </summary>
            <value>OpTypes used with this function</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.Parameters">
            <summary>
            All parameters inside this function
            </summary>
            <value>Parameters used in this function</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.Method">
            <summary>
            Gets or sets a value indicating whether this Function is method.
            </summary>
            true if method; otherwise, false
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Function.ClassDefName">
            <summary>
            Xml-Class-Defintion Name
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Function.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String,System.Int32,System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.Function"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="functionName">Name of the function</param>
            <param name="iId">The id.</param>
            <param name="xmlFunction">XML node where the parameter starts</param>
            <param name="refParams">Dictionary of global referenced MostCatalogParameters</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Function.Parse(ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer})">
            <summary>
            Parses this function starting at XML node
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="xmlFunction">XML node where the parameter starts</param>
            <param name="refParams">Dictionary of global referenced MostCatalogParameters</param>
            <returns>true if parsing was sucessful</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Function.BuildParameter(ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode,System.String,System.Collections.Generic.Dictionary{System.String,ET.FW.Hal.Most.Catalogs.ReferencedParameterContainer})">
            <summary>
            Build up all the parameter used by this function
            </summary>
            <param name="ntg">ntg this function is used with</param>
            <param name="xmlTopLevelParam">the top-level parameter</param>
            <param name="prefix">Prefix of this parameter inside xml</param>
            <param name="refParams">referenced parameter</param>
            <returns>true if build was successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.OpTypeProperty">
            <summary>
            OpTypes for Function-Properties
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Set">
            <summary>
            property set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Get">
            <summary>
            property get
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.SetGet">
            <summary>
            property setget
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Increment">
            <summary>
            property increment
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Decrement">
            <summary>
            property decrement
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.GetInterface">
            <summary>
            property getinterface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Reserved">
            <summary>
            property reserved
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Status">
            <summary>
            property status
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Interface">
            <summary>
            property interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeProperty.Error">
            <summary>
            property error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty">
            <summary>
            OpTypes for referenced Function-Properties
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdSet">
            <summary>
            referenced property command set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdGet">
            <summary>
            referenced property command get
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdSetGet">
            <summary>
            referenced property command setget
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdIncrement">
            <summary>
            referenced property command increment
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdDecrement">
            <summary>
            referenced property command decrement
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdGetInterface">
            <summary>
            referenced property command getinterface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PCmdReserved">
            <summary>
            referenced property command reserved
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PReportStatus">
            <summary>
            referenced property command reportstatus
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PReportInterface">
            <summary>
            referenced property command reportinterface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefProperty.PReportError">
            <summary>
            referenced property command report error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.OpTypeMethod">
            <summary>
            OpTypes for Function-Methods
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Start">
            <summary>
            optype method start
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Abort">
            <summary>
            optype method abort
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.StartResult">
            <summary>
            optype method startresult
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.GetInterface">
            <summary>
            optype method getinterface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.StartResultAck">
            <summary>
            optype method startresultack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.AbortAck">
            <summary>
            optype method abortack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.StartAck">
            <summary>
            optype method startack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.ErrorAck">
            <summary>
            optype method errorack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.ProcessingAck">
            <summary>
            optype method processingack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Processing">
            <summary>
            optype method processing
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Result">
            <summary>
            optype method result
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.ResultAck">
            <summary>
            optype method resultack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Interface">
            <summary>
            optype method interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeMethod.Error">
            <summary>
            optype method error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod">
            <summary>
            OpTypes for referenced Function-Methods
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdStart">
            <summary>
            optype referenced method start
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdAbort">
            <summary>
            optype referenced method abort
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdStartResult">
            <summary>
            optype referenced method startresult
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdGetInterface">
            <summary>
            optype referenced method getinterface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdStartResultAck">
            <summary>
            optype referenced method startresultack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdAbortAck">
            <summary>
            optype referenced method abortack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MCmdStartAck">
            <summary>
            optype referenced method startack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportErrorAck">
            <summary>
            optype referenced method errorack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportProcessingAck">
            <summary>
            optype referenced method processingack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportProcessing">
            <summary>
            optype referenced method processing
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportResult">
            <summary>
            optype referenced method result
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportResultAck">
            <summary>
            optype referenced method resultack
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportInterface">
            <summary>
            optype referenced method interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.OpTypeRefMethod.MReportError">
            <summary>
            optype referenced method error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.SpecialValues">
            <summary>
            Const Values for limits
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.SpecialValues.HashNull">
            <summary>
            value for "nothing"
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.SpecialValues.MaxStreamElements">
            <summary>
            defined max stream elements
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.SpecialValues.MaxArrayElements">
            <summary>
            defined max array elements
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.SpecialValues.ParameterMaxLengthInBytes">
            <summary>
            defined max parameter length
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.SpecialValues.StringMaxLengthInChar">
            <summary>
            defined max string length
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer">
            <summary>
            MOST Alloc answer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer.Alloc_Grant">
            <summary>
            alloc granted
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer.Alloc_Busy">
            <summary>
            alloc not possible because busy
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer.Alloc_Deny">
            <summary>
            alloc denied
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer.Alloc_Wrong">
            <summary>
            alloc wron
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTAllocAnswer.Wrong_Target">
            <summary>
            alloc wrong target
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer">
            <summary>
            MOST DeAlloc answer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer.DeAlloc_Grant">
            <summary>
            grant the deallocation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer.DeAlloc_Busy">
            <summary>
            dealloc not possible becaus busy
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer.DeAlloc_Deny">
            <summary>
            dealloc denied
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer.DeAlloc_Wrong">
            <summary>
            dealloc wrong
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.MOSTDeAllocAnswer.Wrong_Target">
            <summary>
            dealloc not possible because wrong target
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.MostCatalog">
            <summary>
            Holds the parsed MOST-Catalog information and enables disassembly.
            Can hold more than one Catalog to generate Intellisense Classes,
            but only uses the first parsed Catalog to disassemble.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.MostCatalog.CatalogParser">
            <summary>
            Catalog-Parser which holds all the xml-Katalog Informations
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.OpTypeName(System.Int32,System.Boolean)">
            <summary>
            Get the text of an OpType-Name depending on Function-Method or Function-Property
            </summary>
            <param name="optype">OpType to get Name from</param>
            <param name="isMethod">Is it a function-method</param>
            <returns>name of the given optype</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.OpTypeRefName(System.Int32,System.Boolean)">
            <summary>
            Get the text of an OpType-Reference-Name depending on Function-Method or Function-Property
            </summary>
            <param name="optype">The optype.</param>
            <param name="method">Is it a function-method</param>
            <returns>name of the given optype</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.GetStructure(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Builds up a structured representation of the Message with human readable elements
            </summary>
            <param name="message">Most Message to get structure of</param>
            <returns>List of structured parameters</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.GetStructure(ET.FW.Hal.Most.Messages.IMostMessage)">
            <summary>
            Builds up a structured representation of the MOST message with human readable elements
            </summary>
            <param name="message">MOST message to get structure of</param>
            <returns>List of structured parameters</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.GetStructure(ET.FW.Hal.Most.Messages.IMostSystemMessage)">
            <summary>
            Builds up a structured representation of the Message with human readable elements
            </summary>
            <param name="message">MOST system message to get structure of</param>
            <returns>List of structured parameters</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate implementation
            </summary>
            <param name="givenMessage">Message with filled binary data</param>
            <returns>Textual representation of binary message</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.TranslateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate implementation
            </summary>
            <param name="givenMessage">Message with filled binary data</param>
            <returns>MessageTranslation representing the binary message</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.Translate(ET.FW.Hal.Most.Parameter.MostParameter)">
            <summary>
            Translate single message parameter (parameter value may itself be a parameter list)
            </summary>
            <param name="parameter">Message parameter to translate</param>
            <returns>Textual representation of parameter</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.Print(System.Collections.Generic.IList{ET.FW.Hal.Most.Parameter.IMostParameter},System.Int32,System.Text.StringBuilder,System.Char,System.Boolean)">
            <summary>
            Print out the given most-parameter-list
            </summary>
            <param name="myList">list of parameter</param>
            <param name="part">position insede parameter list to start</param>
            <param name="sb">build the output inside</param>
            <param name="separator">separator between elements</param>
            <param name="sayname">flag to say the name of the parameter</param>
            <returns>position inside parameter list</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.MostCatalog.MostAdr(System.Byte[],System.Int32)">
            <summary>
            Converts Most Adress stored in a bytearray to a String
            </summary>
            <param name="data">Bytearray with data</param>
            <param name="startPos">Start position</param>
            <returns>Address String</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.OpType">
            <summary>
            Holds information about one OpType inside a function but for multiple NTGs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.OpType.Method">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ET.FW.Hal.Most.Catalogs.OpType"/> is method.
            </summary>
            <value><c>true</c> if method; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.OpType.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.OpType.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.OpType"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="optypeId">The OpType id.</param>
            <param name="method">if set to <c>true</c> [method].</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.OpType.AddNTGParamName(ET.FW.Hal.Most.Catalogs.eNTG,System.String,System.Int32)">
            <summary>
            Adds a parameter for a valid ntg
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="paramName">Name of the parameter</param>
            <param name="paramPos">The param position</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.OpType.ParamNames">
            <summary>
            Gets the parameter names.
            </summary>
            <value>The parameter names.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.OpType.NTGParamNames">
            <summary>
            Gets or sets the parameter names valid for a specified ntg.
            </summary>
            <value>The parameter names.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.CatalogParamType">
            <summary>
            Parameter Types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TStream">
            <summary>
            Stream of any other Types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TArray">
            <summary>
            Array of any other Types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TRecord">
            <summary>
            Record of any other Types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TBool">
            <summary>
            Bool type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TNumber">
            <summary>
            Integer type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TEnum">
            <summary>
            Enum type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TString">
            <summary>
            String with one of certain encodings
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TBitField">
            <summary>
            Bitfield type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TVoid">
            <summary>
            Wildcard type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TRLE">
            <summary>
            RunLengthEncoded type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TShortStream">
            <summary>
            Special Stream with only base types inside
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TSimpleString">
            <summary>
            special parameter which has no representation in most-catalog and holds a simple string
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.CatalogParamType.TSimpleNumber">
            <summary>
            special parameter which has no representation in most-catalog and holds a simple number
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.CatalogParameter">
            <summary>
            Outer Parameter which is allways a shell for an inner Parameter (OParam)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParameter.#ctor">
            <summary>
            dafault constructor
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParameter.XmlParam">
            <summary>
            Parameter-Object out of XML-Katalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.CatalogParameter.CatalogParamType">
            <summary>
            shortcut for the CatalogParamType (enumvalue) inside the CatalogParameter named XmlParam
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParameter.Init(ET.FW.Hal.Most.Catalogs.eNTG)">
            <summary>
            Inits a parameter valid for the specified ntg
            </summary>
            <param name="ntg">Valid ntg</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParameter.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.CatalogParameter"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="name">Name of the Parameter</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParameter.#ctor(ET.FW.Hal.Most.Catalogs.eNTG,System.String,System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.CatalogParameter"/> class.
            </summary>
            <param name="ntg">Valid ntg</param>
            <param name="name">Name of the Parameter</param>
            <param name="xmlTopLevelParam">XML-Node of the Top-Level-Parameter</param>
            <param name="prefix">Prefix (for further parsing in xml)</param>
            <param name="allreadyDeep">Hirarchial information inside xml</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.CatalogParameter.EqualValues(ET.FW.Hal.Most.Catalogs.CatalogParameter)">
            <summary>
            Compares the inner values of the Parameter
            </summary>
            <param name="parameter">Parameter to compare with</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TSimpleString">
            <summary>
            Parameter used for strings
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleString.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">name of the parameter</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleString.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="param">parameter this one sould be compared with</param>
            <returns>allways false because this is just a dummy parameter for headerparts</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleString.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">MostMessage</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <returns>structural representation of the parameter</returns>
            <param name="parameter">Parameterlist</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TSimpleNumber">
            <summary>
            Parameter used for strings
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TSimpleNumber.NumberType">
            <summary>
            Type of this most-number
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleNumber.#ctor">
            <summary>
            Simple number with no corresponding most-catalog-parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleNumber.#ctor(System.String,ET.FW.Hal.Most.Catalogs.BasisType)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name">name of the parameter</param>
            <param name="numberType">type of the number like byte, word or long</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleNumber.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="param">parameter this one should be compared with</param>
            <returns>allways false because this is just a dummy parameter for headerparts</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TSimpleNumber.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">MostMessage</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <returns>structural representation of the parameter</returns>
            <param name="parameter">Parameterlist</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.PosData">
            <summary>
            Hold information about the Pos-data-dependencies
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.X">
            <summary>
            Pos-X value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.Y">
            <summary>
            Pos-Y value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.PosXRelevant">
            <summary>
            Gets or sets a value indicating whether [pos X relevant].
            </summary>
            <value><c>true</c> if [pos X relevant]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.PosYRelevant">
            <summary>
            Gets or sets a value indicating whether [pos Y relevant].
            </summary>
            <value><c>true</c> if [pos Y relevant]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.IsPosParam">
            <summary>
            Gets or sets a value indicating whether this instance is pos param.
            </summary>
            <value>
            	<c>true</c> if this instance is pos param; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.PosData.IsDataParam">
            <summary>
            Gets or sets a value indicating whether this instance is data param.
            </summary>
            <value>
            	<c>true</c> if this instance is data param; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.PosData.StorePos(System.Int32)">
            <summary>
            Stores the pos.
            </summary>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.PosData.DataFit(System.String)">
            <summary>
            Checks if the given data fitts
            </summary>
            <param name="strData">data to fit</param>
            <returns>true if data fitts</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.PosData.DataFit(System.Int32)">
            <summary>
            Checks if the given data fitts
            </summary>
            <param name="data">data to fit</param>
            <returns>true if data fitts</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.PosData.Add(System.String,System.Int32)">
            <summary>
            Adds the specified data.
            </summary>
            <param name="parname">name of the parameter to add</param>
            <param name="data">data of the parameter to add</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.PosData.Get(System.String)">
            <summary>
            Gets the last added data
            </summary>
            <param name="parname">name of the parameter</param>
            <returns>last added data</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.Recursion">
            <summary>
            Hold information about the recursion while disassembly
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Recursion.PosData">
            <summary>
            Gets or sets the pos data
            </summary>
            <value>The pos data</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.Recursion.Counter">
            <summary>
            Gets the recursion counter
            </summary>
            <value>The recursionn counter</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Recursion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.Recursion"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Recursion.Increment">
            <summary>
            Increments the recursion-counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.Recursion.Decrement">
            <summary>
            Decrements the recursion counter
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TArray">
            <summary>
            Inner Parameter for Arrays
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TArray.MaxItems">
            <summary>
            Maximum number of items of this array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TArray.Parameter">
            <summary>
            catalog parameter this array consist of
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TArray.#ctor(System.String,ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TArray"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="ntg">Valid ntg</param>
            <param name="xmlParamType">XML node where the parameter starts</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TArray.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the inner values of the Parameter
            </summary>
            <param name="oparam">Parameter to compare with</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TArray.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TBitField">
            <summary>
            Parameter used as bool
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TBitField.TBitRange">
            <summary>
            A helper class to keep track of the bit arrangement inside a bitfield.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.TBitRange.bitsStart">
            <summary>
            where the bits of a range start
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.TBitRange.bitsSize">
            <summary>
            how much bits there are
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.TBitRange.bitsDescription">
            <summary>
            the semantics of this bit
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBitField.TBitRange.#ctor(System.Byte,System.Byte,ET.FW.Hal.Most.Catalogs.BitDescription)">
            <summary>
            Constructor
            </summary>
            <param name="start">where the new range starts</param>
            <param name="size">how long the new range is</param>
            <param name="description">what semantics the bit(s) have</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.Bits">
            <summary>
            List of TBitRange (values for true and false)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.Width">
            <summary>
            Width of this bitfield
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBitField.HasMask">
            <summary>
            Is the mask in fron of bitfield there
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBitField.#ctor(System.String,ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TBitField"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="ntg">ntg to differ for masks</param>
            <param name="xmlParamType">XML-Node to start parse</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBitField.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The inner Parameter.</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBitField.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TBool">
            <summary>
            Parameter used as bool
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBool.Bits">
            <summary>
            Sorted List of BitDescription (values for true and false)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TBool.Width">
            <summary>
            Width of this bool-bitfield
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBool.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TBool"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="xmlParamType">XML-Node to start parse</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBool.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The inner Parameter.</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TBool.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TEnum">
            <summary>
            Parameter used for enums
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TEnum.Values">
            <summary>
            Key/Values of the enum
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TEnum.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TEnum"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="xmlParamType">XML-Node to start parse.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TEnum.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The inner Parameter.</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TEnum.GetKeyValues">
            <summary>
            Gets the key values.
            </summary>
            <returns>values as list</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TEnum.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Converts the binary message into structural representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">parameter to fill</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.BasisType">
            <summary>
            Basis Datatypes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TVoid">
            <summary>
            Wildcard for nothing
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TUByte">
            <summary>
            Unsigned byte
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TSByte">
            <summary>
            Signed byte
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TUWord">
            <summary>
            Unsigned word
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TSWord">
            <summary>
            Signed word
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TULong">
            <summary>
            unsigned long
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Catalogs.BasisType.TSLong">
            <summary>
            signed long
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TNumber">
            <summary>
            Inner Parameter for any integer datatype
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TNumber.Exponent">
            <summary>
            exponent of number
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TNumber.Step">
            <summary>
            valid steps
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TNumber.Width">
            <summary>
            width in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TNumber.RangeMin">
            <summary>
            lower limit of value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TNumber.RangeMax">
            <summary>
            upper limit of value
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TNumber"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TNumber.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TNumber"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="xmlParamType">XML node where the parameter starts</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TNumber.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the inner values of the Parameter
            </summary>
            <param name="oparam">Parameter to compare with</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TNumber.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TRecord">
            <summary>
            Inner Parameter for Records
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TRecord.Parameters">
            <summary>
            Parameters inside this record
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRecord.#ctor(System.String,ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TRecord"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="ntg">Valid ntg</param>
            <param name="xmlParamType">XML node where the parameter starts</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRecord.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the inner values of the Parameter
            </summary>
            <param name="oparam">Parameter to compare with</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRecord.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TRLE">
            <summary>
            Inner Parameter for RunLengthEncoded bytes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRLE.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TRLE"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="xmlParamType">XML node where the parameter starts</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRLE.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the inner values of the Parameter
            </summary>
            <param name="oparam">Parameter to compare with</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TRLE.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TStream">
            <summary>
            Parameter used for Streams
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TStream.StreamCases">
            <summary>
            Stream cases defined by posdescriptions
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TStream.Length">
            <summary>
            Maximum length of this stream in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TStream.DependentOn">
            <summary>
            Parametername this parameter depends on
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TStream.ShortStream">
            <summary>
            Is this stream a most-short-stream
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TStream.#ctor(System.String,ET.FW.Hal.Most.Catalogs.eNTG,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TStream"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="ntg">The ntg.</param>
            <param name="xmlParamType">XML-Node to start parse</param>
            <param name="isShortStream">if set to <c>true</c> [is short stream].</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TStream.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The inner Parameter.</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TStream.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TString">
            <summary>
            Parameter used for strings
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Catalogs.TString.MaxChars">
            <summary>
            maximum number of characters in this string
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TString.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Catalogs.TString"/> class.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="xmlParamType">XML-Node to start parse.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TString.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The oparam.</param>
            <returns>true if values are identical</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TString.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">Most Message</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <param name="parameter">Parameter list</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TString.SetTerminatorErrors(System.Int32,ET.FW.Hal.Most.Parameter.IMostParameter,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Additional error handling.
            </summary>
            <param name="pos">payload pos</param>
            <param name="para">most paramter</param>
            <param name="hasTerminator">string terminator flag</param>
            <param name="numberOfFooterBytes">character size</param>
            <param name="startpos">payload start pos</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Catalogs.TVoid">
            <summary>
            Void parameter used as wildcard
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TVoid.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Void parameter used as wildcard
            </summary>
            <param name="xmlParamType">XML-Node to start parse</param>
            <param name="name">Name of the parameter</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TVoid.EqualValues(ET.FW.Hal.Most.Catalogs.XmlParam)">
            <summary>
            Compares the relevant inner values of the parameters
            </summary>
            <param name="oparam">The inner Parameter.</param>
            <returns>true if inner values are equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Catalogs.TVoid.Structure(ET.FW.Hal.Most.Messages.IMostMessage,System.Int32@,ET.FW.Hal.Most.Catalogs.Recursion,ET.FW.Hal.Most.Parameter.IMostStructure)">
            <summary>
            Gets the Structure of the binary message into textual representation
            </summary>
            <param name="message">MostMessage</param>
            <param name="pos">Position to start inside the payload</param>
            <param name="recursion">Recursion information</param>
            <returns>structural representation of the parameter</returns>
            <param name="parameter">Parameterlist</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMost25SyncAllocationTableEvent">
            <summary>
            MOST 25 allocation table (changed) event.
            Event contains complete MOST 25 allocation table (60 byes) as payload and optionally four special bytes (MPR, MDR, Byte 62 and 63)
            </summary>
            <remarks>It seems that this event is only provided by NIC chips, not by INIC based equipment</remarks>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMost25SyncAllocationTableEvent.Mpr">
            <summary>
            MPR of the allocation table event (optional)
            </summary>
            <value>MPR value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMost25SyncAllocationTableEvent.Mdr">
            <summary>
            MDR of the allocation table event (optional)
            </summary>
            <value>MDR value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMost25SyncAllocationTableEvent.Byte62">
            <summary>
            Byte 62 of the allocation table event (optional)
            </summary>
            <value>Byte 62 value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMost25SyncAllocationTableEvent.Byte63">
            <summary>
            Byte 63 of the allocation table event (optional)
            </summary>
            <value>Byte 63 value, <c>null</c> if not provided</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostAllocateEvent">
            <summary>
            Allocation event, signals allocation of one channel of sync allocation table
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocateEvent.Label">
            <summary>
            Label of the channel newly allocated
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocateEvent.ChannelWidth">
            <summary>
            Width of the channel newly allocated
            </summary>
            <value>The width of the channel.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocateEvent.FreeBytes">
            <summary>
            Remaining free bytes of the resource allocation table
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostDeallocateEvent">
            <summary>
            Deallocation event, signals deallocation of one channel of sync allocation table
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostDeallocateEvent.Label">
            <summary>
            Label of the channel deallocated
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostDeallocateEvent.FreeBytes">
            <summary>
            Remaining free bytes of the resource allocation table
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostErrorEvent">
            <summary>
            Interface for common MOST error event, used to signal different MOST error conditions e.g. equipment specific status messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent">
            <summary>
            MOST 25 allocation table (changed) event.
            Event payload contains complete MOST 25 allocation table (60 byes) and optionally four special bytes (MPR, MDR, Byte 62 and 63)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.Mpr">
            <summary>
            MPR of the allocation table event (optional)
            </summary>
            <value>MPR value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.Mdr">
            <summary>
            MDR of the allocation table event (optional)
            </summary>
            <value>MDR value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.Byte62">
            <summary>
            Byte 62 of the allocation table event (optional)
            </summary>
            <value>Byte 62 value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.Byte63">
            <summary>
            Byte 63 of the allocation table event (optional)
            </summary>
            <value>Byte 63 value, <c>null</c> if not provided</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.Most25SyncAllocationTableEvent.EventText">
            <summary>
            Event as text
            </summary>
            <value>The event message.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostAllocateEvent">
            <summary>
            Allocation event, signals allocation of one channel of sync allocation table
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocateEvent.Label">
            <summary>
            Label of the channel newly allocated
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocateEvent.ChannelWidth">
            <summary>
            Width of the channel newly allocated
            </summary>
            <value>The width of the channel.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocateEvent.FreeBytes">
            <summary>
            Remaining free bytes of the resource allocation table
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocateEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocateEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocateEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostAllocateEvent using the specified writer.
            </summary>
            <param name="writer">Binary stream writer for serialization</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocateEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostAllocateEvent using the the specified reader.
            </summary>
            <param name="reader">Binary stream reader for seserialization</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostDeallocateEvent">
            <summary>
            Deallocation event, signals deallocation of one channel of sync allocation table
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostDeallocateEvent.Label">
            <summary>
            Label of the channel deallocated
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostDeallocateEvent.FreeBytes">
            <summary>
            Remaining free bytes of the resource allocation table
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostDeallocateEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostDeallocateEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostDeallocateEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this MostDeallocateEvent using the specified writer.
            </summary>
            <param name="writer">Binary stream writer for serialization</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostDeallocateEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes this MostDeallocateEvent using the the specified reader.
            </summary>
            <param name="reader">Binary stream reader for seserialization</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostErrorEvent">
            <summary>
            Common MOST error event
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostErrorEvent.Text">
            <summary>
            Event description in plain text
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostErrorEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostErrorEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostErrorEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostErrorEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostErrorEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostErrorEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostHighErrorEvent">
            <summary>
            MostHigh Error Events
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostHighErrorEvent.#ctor">
            <summary>
            Initializes a new instance of the MostHighErrorEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostHighErrorEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostHighErrorEvent class.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostHighErrorEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostHighErrorEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostHighErrorEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the Event using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostHighErrorEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the Event using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostHighErrorEvent">
            <summary>
            Public interface for Most High  Error Events
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostHighErrorEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostHighErrorEventType">
            <summary>
            Represents MOST High error event messages.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.Ok">
            <summary>
            Everything OK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolError">
            <summary>
            Signal that the data received is incomplete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.UnknownCommand">
            <summary>
            Signal that the data received is incomplete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.DataIncomplete">
            <summary>
            Signal that the data received is incomplete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.DataCorrupted">
            <summary>
            Signal that there are invalid Data 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ControlmessageToShort">
            <summary>
            Controlmessage to short 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorNoValidConnection">
            <summary>
            Message received without valid connection
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorNoValidPacket">
            <summary>
            Frame ACK received without a valid packet
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorHoldConnectionRxWithoutConnection">
            <summary>
            A HoldConnectionRX command received without a valid MostHigh connection
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorMultipleFramesRequestWithoutConnection">
            <summary>
            MultipleFramesRequest command received without a valid MostHigh connection
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorHoldConnectionTxWithoutConnection">
            <summary>
            HoldConnectionTx command received without a valid MostHigh connection 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorFrameAcknowledgeWithoutConnection">
            <summary>
            FrameAcknowledge command received without a valid MostHigh connection
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.ProtocolErrorHandleStartConnectionWithoutConnection">
            <summary>
            StartConnection command received without a valid MostHigh connection
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.DataCorruptedMultipleFramesRequestNoBlock">
            <summary>
            MultipleFramesRequest command, but no valid MostHigh Block found
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostHighErrorEventType.DataCorruptedFrameAcknowledgeNoBlock">
            <summary>
            FrameAcknowledge command, but no valid MostHigh Block found
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostEvent">
            <summary>
            base class for all the Most-events like address, light-lock
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostEvent.Event">
            <summary>
            type of the event to be used in switch-case statements
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostEvent.TranslateMessage">
            <summary>
            Translate the message
            </summary>
            <returns>The MessageTranslation</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostEvent.Translate">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>the translation</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostAddressEvent">
            <summary>
            Interface for MOST address (changed) events
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAddressEvent.NodeAddress">
            <summary>
            Node address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAddressEvent.GroupAddress">
            <summary>
            Group address
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostAllocationEvent">
            <summary>
            Interface of MOST allocation changed event
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.IsAllocateEvent">
            <summary>
            Gets or sets a value indicating whether this instance is a Allocate event or a Deallocate evnt.
            </summary>
            <value>
            	<c>true</c> if this instance is a Allocate event; otherwise, <c>false</c> if this instance is a Deallocate event.
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.Label">
            <summary>
            Gets or sets the label of the resource allocation event.
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.ChannelWidth">
            <summary>
            Gets or sets the width of the channel allocated by this resource allocation event..
            </summary>
            <value>The width of the channel.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.FreeBytes">
            <summary>
            Gets or sets the free bytes of the resource allocation event.
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.Mpr">
            <summary>
            Gets or sets the MPR of the resource allocation event.
            </summary>
            <value>The MPR value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.Mdr">
            <summary>
            Gets or sets the MDR of the resource allocation event.
            </summary>
            <value>The MDR value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.Byte62">
            <summary>
            Gets or sets the byte 62 of the resource allocation event.
            </summary>
            <value>The byte 62 value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostAllocationEvent.Byte63">
            <summary>
            Gets or sets the byte 63 of the resource allocation event.
            </summary>
            <value>The byte 63 value.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostEvent">
            <summary>
            common base interface for all MOST events
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostEventType">
            <summary>
            Represents MOST event messages.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.LightLock">
            <summary>
            Light and/or lock event message.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Mpr">
            <summary>
            Maximum position register changed event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Npr">
            <summary>
            Node position register changed event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.NodeAddress">
            <summary>
            Logical address event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Sbc">
            <summary>
            Boundary event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Allocation">
            <summary>
            Most resource allocation event (obsolete)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Ndr">
            <summary>
            NDR changed event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Mdr">
            <summary>
            MDR changed event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.AllocTable">
            <summary>
            MOST 25 sync allocation table event
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Allocate">
            <summary>
            Allocation event
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Deallocate">
            <summary>
            Deallocation event
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Events.MostEventType.Error">
            <summary>
            Common MOST error event
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostLightLockEvent">
            <summary>
            Intzerface for MOST light and lock state changed events
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostLightLockEvent.LockState">
            <summary>
            Light and lock state
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostMdrEvent">
            <summary>
            Interface of MOST MDR (maximum delay register) changed event 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostMdrEvent.Mdr">
            <summary>
            MDR value
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostMprEvent">
            <summary>
            Interface of MOST MPR (maximum position register) changed event 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostMprEvent.Mpr">
            <summary>
            MPR value
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostNdrEvent">
            <summary>
            Interface of MOST NDR (node delay register) changed event 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostNdrEvent.Ndr">
            <summary>
            NDR value
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostNprEvent">
            <summary>
            Interface of MOST NPR (node position register) changed event 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostNprEvent.Npr">
            <summary>
            NPR value
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.IMostSbcEvent">
            <summary>
            Interface of MOST SBC (MOST boundary) changed event 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.IMostSbcEvent.Sbc">
            <summary>
            SBC value
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostAddressEvent">
            <summary>
            MOST address (changed) events
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAddressEvent.#ctor">
            <summary>
            Initializes a new instance of the MostAddressEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAddressEvent.#ctor(System.UInt16,System.Byte)">
            <summary>
            Initializes a new instance of the MostAddressEvent class.
            </summary>
            <param name="nodeAddress">The node address.</param>
            <param name="groupAddress">The group address.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAddressEvent.NodeAddress">
            <summary>
            Gets or sets the node address.
            </summary>
            <value>The node address.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAddressEvent.GroupAddress">
            <summary>
            Gets or sets the group address.
            </summary>
            <value>The group address.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAddressEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAddressEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAddressEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostAddressEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAddressEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostAddressEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostAllocationEvent">
            <summary>
            MOST allocation changed event
            Obsolete event, replaced by more specialized event classes Most25SyncAllocationTable, MostAllocateEvent and MostDeallocateEvent
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.IsAllocateEvent">
            <summary>
            Gets or sets a value indicating whether this instance is a Allocate event or a Deallocate evnt.
            </summary>
            <value>
            	<c>true</c> if this instance is a Allocate event; otherwise, <c>false</c> if this instance is a Deallocate event.
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Label">
            <summary>
            Gets or sets the label of the resource allocation event.
            </summary>
            <value>The label value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.ChannelWidth">
            <summary>
            Gets or sets the width of the channel allocated by this resource allocation event..
            </summary>
            <value>The width of the channel.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.FreeBytes">
            <summary>
            Gets or sets the free bytes of the resource allocation event.
            </summary>
            <value>The free bytes.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocationEvent.#ctor">
            <summary>
            Initializes a new instance of the MostAllocationEvent class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Mpr">
            <summary>
            Gets or sets the MPR of the resource allocation event.
            </summary>
            <value>The MPR value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Mdr">
            <summary>
            Gets or sets the MDR of the resource allocation event.
            </summary>
            <value>The MDR value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Byte62">
            <summary>
            Gets or sets the byte 62 of the resource allocation event.
            </summary>
            <value>The byte 62 value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Byte63">
            <summary>
            Gets or sets the byte 63 of the resource allocation event.
            </summary>
            <value>The byte 63 value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostAllocationEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocationEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostAllocationEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocationEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostAllocationEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostAllocationEvent.DeserializeMessage(System.IO.BinaryReader,ET.FW.Core.Messaging.IProtocol)">
            <summary>
            Deserializes obsolete message type and copies content to newer more specialized type
            </summary>
            <param name="reader">Binary reader for deserialization</param>
            <param name="protocol">MOST event protocol</param>
            <returns>The newly created specialized allocation changed event</returns>
            <remarks>MOST 25 allocation table fields: Payload, Mpr, Mdr, Byte62 and Byte63 could be ignored, because the were never used online</remarks>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostLightLockEvent">
            <summary>
            MOST light and lock event class
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostLightLockEvent.LockState">
            <summary>
            Light and lock state
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostLightLockEvent.#ctor">
            <summary>
            Initializes a new instance of the MostLightLockEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostLightLockEvent.#ctor(ET.FW.Hal.Most.MostLockState)">
            <summary>
            Initializes a new instance of the MostLightLockEvent class.
            </summary>
            <param name="lockState">State of the net.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostLightLockEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostLightLockEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostLightLockEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostLightLockEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostLightLockEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostLightLockEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostMdrEvent">
            <summary>
            MOST MDR (Maximum delay register) changed event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMdrEvent.#ctor">
            <summary>
            Initializes a new instance of the MostMdrEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMdrEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostMdrEvent class.
            </summary>
            <param name="mdr">The MDR.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMdrEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMdrEvent.Mdr">
            <summary>
            Gets or sets the MDR.
            </summary>
            <value>The MDR.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMdrEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMdrEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostMdrEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMdrEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostMdrEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostMprEvent">
            <summary>
            MOST MPR (Maximum position register) changed event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMprEvent.#ctor">
            <summary>
            Initializes a new instance of the MostMprEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMprEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostMprEvent class.
            </summary>
            <param name="mpr">The MPR.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMprEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMprEvent.Mpr">
            <summary>
            Gets or sets the MPR.
            </summary>
            <value>The MPR.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostMprEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMprEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostMprEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostMprEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostMprEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostNdrEvent">
            <summary>
            MOST NDR (node delay register) changed event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNdrEvent.#ctor">
            <summary>
            Initializes a new instance of the MostNdrEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNdrEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostNdrEvent class.
            </summary>
            <param name="ndr">The NDR.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNdrEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNdrEvent.Ndr">
            <summary>
            Gets or sets the NDR.
            </summary>
            <value>The NDR.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNdrEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNdrEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostNdrEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNdrEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostNdrEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostNprEvent">
            <summary>
            MOST NPR (node position register) changed event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNprEvent.#ctor">
            <summary>
            Initializes a new instance of the MostNprEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNprEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostNprEvent class.
            </summary>
            <param name="npr">The NDR.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNprEvent.Npr">
            <summary>
            Gets or sets the NPR.
            </summary>
            <value>The NPR.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNprEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostNprEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNprEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostNprEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostNprEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostNprEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Events.MostSbcEvent">
            <summary>
            MOST SBC (MOST boundary) changed event 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostSbcEvent.#ctor">
            <summary>
            Initializes a new instance of the MostSbcEvent class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostSbcEvent.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MostSbcEvent class.
            </summary>
            <param name="sbc">The SBC.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostSbcEvent.Sbc">
            <summary>
            Gets or sets the SBC value (MOST boundary).
            </summary>
            <remarks>Deprecated, use Current instead.</remarks>
            <value>The SBC.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostSbcEvent.Event">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Events.MostSbcEvent.EventText">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostSbcEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostSbcEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Events.MostSbcEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostSbcEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.IMost150ChannelAccess">
            <summary>
            Interface for MOST 150 channel access
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost150ChannelAccess.CmsProtocol">
            <summary>
            CMS Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost150ChannelAccess.AdsProtocol">
            <summary>
            Async protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost150ChannelAccess.EventProtocol">
            <summary>
            Event protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost150ChannelAccess.MepProtocol">
            <summary>
            MOST Ethernet Protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMost25ChannelAccess">
            <summary>
            Interface for MOST 25 channel access
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost25ChannelAccess.CmsProtocol">
            <summary>
            CMS Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost25ChannelAccess.SystemProtocol">
            <summary>
            System Control protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost25ChannelAccess.AdsProtocol">
            <summary>
            Async protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMost25ChannelAccess.EventProtocol">
            <summary>
            Event protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostChannelAccess">
            <summary>
            Commonm interface for MOST channel accesses (node and spy)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChannelAccess.Bandwidth">
            <summary>
            Gets the bandwith of the MOST bus (May be 25, 50 or 150MBit/s).
            </summary>
            <value>The bandwith in MBit/s.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostChannelAccessSpy">
            <summary>
            Interface for MOST spy channel accesses
            This interface is used as marker for spies, at the moment the spy has no additional functionality
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostChip">
            <summary>
            Interface for basic MOST node functionalities
            </summary>
            <remarks>
            Interface is used to hold common properties of MOST node and StressNIC
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChip.Timing">
            <summary>
            The MOST Device Mode
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChip.NodeAddress">
            <summary>
            Gets or sets the logical node address.
            </summary>
            <value>The logical node address.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.IMostChip.ActivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.IMostChip.DeactivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostEthernetMessage">
            <summary>
            Ethernet message with MOST specific extension: spy info
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostEthernetMessage.SpyInfo">
            <summary>
            Holds detailed MOST informations, which are read out by SpyNic chips.
            </summary>
            <value>
            Spy info if available, otherwise null
            </value>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostEthernetMessage">
            <summary>
            Ethernet message with MOST specific extension: spy info
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostEthernetMessage.SpyInfo">
            <summary>
            Holds detailed MOST informations, which are read out by SpyNic chips.
            </summary>
            <value>
            Spy info if available, otherwise null
            </value>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostEthernetMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostEthernetMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostEthernetMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostEthernetMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostAllocateMessage">
            <summary>
            Public interface for Allocate Messages (only Most 25)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostAmsMessage">
            <summary>
            Public interface for Most CMS Messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostBlock">
            <summary>
            Public interface of the ET Framework API MOST block
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostBlock.Destination">
            <summary>
            Target address (16 bit) 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostBlock.Source">
            <summary>
            Source address (16 bit)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostBlock.SpyInfo">
            <summary>
            Holds detailed MOST informations, which are read out by SpyNic chips.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostCmsMessage">
            <summary>
            Public interface for Most CMS Messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostControlDataMessage">
            <summary>
            Public interface for Most Control Data Messages (ADS or MDP ...)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostDataMessage">
            <summary>
            Public interface for Most Data Messages (ADS or MDP ...)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostDeallocateMessage">
            <summary>
            Public interface for De-Allocate Messages (only Most 25)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostHighMessage">
            <summary>
            Public interface for Most High Messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostRemoteGetSourceMessage">
            <summary>
            Public interface for Remote get Source Messages (only Most 25)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostRemoteReadMessage">
            <summary>
            Public interface for RemoteRead Messages (only Most 25)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostRemoteWriteMessage">
            <summary>
            Public interface for Remote Write Messages (only Most 25)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostSegment">
            <summary>
            Interface for MOST frame messages, allow access to segmentation info
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostSegment.MostSegmentationInfo">
            <summary>
            MOST segmentation info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostSystemMessage">
            <summary>
            Public interface of the ET Framework API MOST System Messages (which are only valid in Most25)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostSystemMessage.MostControlMessageType">
            <summary>
            MOST message type (8 bit)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostControlMessageType">
            <summary>
            Determinate the type of the MOST message.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.NormalMessage">
            <summary>
            Normal MOST control message type.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.RemoteRead">
            <summary>
            Reads a register value from a remote device.
            </summary>
            <remarks>Warning: This is feature is only supported by MOST-NIC based devices.</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.RemoteWrite">
            <summary>
            Reads a register value from a remote device.
            </summary>
            <remarks>Warning: This is feature is only supported by MOST-NIC based devices.</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.ResourceAllocate">
            <summary>
            Allocates a streaming channel.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.ResourceDeallocate">
            <summary>
            Deallocates a streaming channel.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.RemoteGetSource">
            <summary>
            Determinates the used streaming channel on a remote note.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostControlMessageType.NotSet">
            <summary>
            Determinates that the message type was not set. May occur if the hardware does not support detecting the MostMessageType.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostUserDataMessage">
            <summary>
            Public interface for Most User Data Messages (ADS or MDP ...)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostAllocateMessage">
            <summary>
            Implementaion of Most Allocate Message (only Most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostAllocateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostAllocateMessage" /> class.<para></para>
            Changed to public for DB
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostAmsMessage">
            <summary>
            Implementaion of Most Ams Message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostBlock">
            <summary>
            Implementation of Most Block base class (can be a MostMessage or a MostSystemMessage)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostBlock" /> class.<para></para>
            Changed to public for DB
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostBlock.Destination">
            <summary>
            Gets/Sets the destination.
            Destination must be set by the application for transmit messages.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostBlock.Source">
            <summary>
            Gets/Sets the source.
            Source is ignored for transmit messages.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostBlock.MostControlMessageType">
            <summary>
            Gets or sets the type of the most control message.
            </summary>
            <value>The type of the most control message.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostBlock.SpyInfo">
            <summary>
            Holds detailed MOST informations, which are read out by SpyNic chips.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostBlock.Copy(ET.FW.Hal.Most.Messages.IMostBlock,ET.FW.Hal.Most.Messages.MostBlock)">
            <summary>
            Copy data of one MOST block object to another already existing object
            Method performs a shallow copy!
            </summary>
            <param name="source">source block</param>
            <param name="destination">target block</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostBlock.ErrorDecoder">
            <summary>
            The used ErrorDecoder.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostCmsMessage">
            <summary>
            Implementaion of Most Cms Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostCmsMessage.MostSegmentationInfo">
            <summary>
            MOST segmentation info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostControlDataMessage">
            <summary>
            Implementaion of Most Control Data Message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostDataMessage">
            <summary>
            Implementaion of Most Data Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostDataMessage.MostSegmentationInfo">
            <summary>
            MOST segmentation info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostDeallocateMessage">
            <summary>
            Implementaion of Most Deallocate Message (only Most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostDeallocateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostDeallocateMessage" /> class.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostHighMessage">
            <summary>
            Implementaion of Most High Message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostRemoteGetSourceMessage">
            <summary>
            Implementaion of Most Remote Get Source Message (only most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostRemoteGetSourceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostRemoteGetSourceMessage" /> class.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostRemoteReadMessage">
            <summary>
            Implementaion of Most Remote Read Message (only Most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostRemoteReadMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostRemoteReadMessage" /> class.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostRemoteWriteMessage">
            <summary>
            Implementaion of Most Remote Write Message (only Most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostRemoteWriteMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostRemoteWriteMessage" /> class.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostSystemMessage">
            <summary>
            Implementaion of Most System Message (only Most25)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSystemMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostSystemMessage" /> class.<para></para>
            Changed protected internal to public for DB
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSystemMessage.#ctor(ET.FW.Hal.Most.Messages.MostControlMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostSystemMessage" /> class.
            </summary>
            <param name="type">control message type</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostSystemMessage.MostControlMessageType">
            <summary>
            Gets or sets the type of the most control message.
            </summary>
            <value>The type of the most control message.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSystemMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostSystemMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSystemMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostUserDataMessage">
            <summary>
            Implementaion of Most User Data Message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostSegmentationInfo">
            <summary>
            Class containing information, if the message is segmented and when segmented the needed information to recover whole payload.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSegmentationInfo.#ctor">
            <summary>
            Default Constructor: Initialize to default values
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSegmentationInfo.#ctor(ET.FW.Hal.Most.Messages.MostSegmentationInfo)">
            <summary>
            Copy Constructor: Initialize to values from other object
            </summary>
            <param name="other">Other segmentation info to be copied to new object</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostSegmentationInfo.TelId">
            <summary>
            Gets or sets the telegram id (4 Bit defined in MOST spec for control channel, may be differ for async channel).
            Possible Values:
            0 - single transfer
            1 - first segmented transfer
            2 - (n-1) segmented transfer
            3 - last segmented transfer
            </summary>
            <remarks>Value is not valid if set to byte.MaxValue</remarks>
            <value>The telegram id.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostSegmentationInfo.TelLen">
            <summary>
            Gets or sets the telegram length (4 Bit defined in MOST spec for control channel, may be differ for async channel).
            </summary>
            <remarks>Value is not valid if set to ushort.MaxValue</remarks>
            <value>The telegram length.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostSegmentationInfo.FrameCount">
            <summary>
            Gets or sets the frame count, if the message was fragmented.
            </summary>
            <remarks>Value is not valid if set to ushort.MaxValue</remarks>
            <value>The frame count.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostSegmentationInfo.FrameMaxCount">
            <summary>
            Gets or sets the maximum frame count, if the message was fragmented.
            </summary>
            <remarks>Value is not valid if set to ushort.MaxValue. Not supported by MOST AMS.</remarks>
            <value>The frame count.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSegmentationInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize Segmentation Info
            </summary>
            <param name="writer">writer for serialize</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostSegmentationInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize Segmentation Info
            </summary>
            <param name="reader">reader for deserialize</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.OPType">
            <summary>
            MOST operation type for properties and methods
            Values are not unique, because commands/reports for methods and properties use overlapping values
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Set">
            <summary> Set command (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Get">
            <summary> Get command (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.SetGet">
            <summary> SetGet command (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Increment">
            <summary> Increment command command (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Decrement">
            <summary> Decrement command (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.GetInterface">
            <summary> Get Interface command (property/method) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Status">
            <summary> Status report (property) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Interface">
            <summary> Interface report (property/method) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Error">
            <summary> Error report (property/method) </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Start">
            <summary> Start command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Abort">
            <summary> Abort command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.StartResult">
            <summary> StartResult command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.StartResultAck">
            <summary> Start Result Acknowledge command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.AbortAck">
            <summary> Abort Acknowledge command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.StartAck">
            <summary> Start Acknowledge command (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.ErrorAck">
            <summary> Error Acknowledge report (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.ProcessingAck">
            <summary> Processing Acknowledge report (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Processing">
            <summary> Processing report (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.Result">
            <summary> Result report (method)</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.OPType.ResultAck">
            <summary> Result Acknowledge report (method)</summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostTelId">
            <summary>
            TelID, signals if segment is first, middle or last frame
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.Single">
            <summary>
            Single Segment Message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.First">
            <summary>
            First frame
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.Middle">
            <summary>
            Middle frame
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.Last">
            <summary>
            Last frame
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.DataLengthMessage">
            <summary>
            DataLength message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.UserData">
            <summary>
            MHP-Userdata
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTelId.ControlData">
            <summary>
            MHP ControlData
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostMessageId">
            <summary>
            Represents the MOST message ID.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostMessageId"/> class.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.#ctor(System.Byte,System.Byte,System.UInt16,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostMessageId"/> class.
            </summary>
            <param name="fBlockId">The f block id.</param>
            <param name="instanceId">The instance id.</param>
            <param name="functionId">The function id.</param>
            <param name="opTypeId">The op type id.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.#ctor(ET.FW.Hal.Most.Messages.MostMessageId)">
            <summary>
            Copy Constructor: Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostMessageId"/> class.
            </summary>
            <param name="other">Other message ID to be copied to new object</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessageId.FBlockId">
            <summary>
            Gets or sets the function block ID.
            </summary>
            <value>The F block id.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessageId.InstanceId">
            <summary>
            Gets or sets the instance ID.
            </summary>
            <value>The instance id.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessageId.FunctionId">
            <summary>
            Gets or sets the function ID.
            </summary>
            <value>The function id.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessageId.OpTypeId">
            <summary>
            Gets or sets the operation type.
            </summary>
            <value>The op type id.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.Equals(ET.FW.Hal.Most.Messages.MostMessageId)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize Message Id
            </summary>
            <param name="writer">writer to serialize</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageId.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize Message Id
            </summary>
            <param name="reader">reader for deserialize</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostTransmissionStatus">
            <summary>
            Delivers more detailed information, why the transmission of the MOST message failed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlWrongTarget">
            <summary>Transmission failed. No response under chosen target address.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccess">
            <summary>Transmission of all telegrams successful.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlCrc">
            <summary>Transmission of a telegram failed. Incorrect CRC.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlBuf">
            <summary>Transmission of a telegram failed. Receive buffer of target device was full.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccessAndCrc">
            <summary>Combination in case of a group-/broadcast transmission. At least one device got the message correctly. At least one device rejected the message due to an incorrect CRC value.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccessAndBuf">
            <summary>Combination in case of a group-/broadcast transmission. At least one device got the message correctly. At least one device didn not receive it due to a full receive buffer.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlTimeout">
            <summary>Timeout error. No response from lower layer.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlNetOff">
            <summary>Transmission failed, since MOST network is switched off.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlFrmt">
            <summary>Protocol error in the Port Message.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSync">
            <summary>	Transmission failed due to an synchronization failure between INIC and PMS. The PMS has been re-synchronized.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlInternal">
            <summary>Internal error. Undefined status identifier.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlNoIcm">
            <summary>You tried to send a ICM message (Tgt_Adr = 1 and FBlock INIC), which is reserved for the services of the MOST NetServices only.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlProtectedMode">
            <summary>You have called MsgSend() while the EHC is not attached to the INIC. It is not allowed to call any API function beside the Kernel function MostService() and the timer management functions until the re-initialization is completed.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccessAndTimeout">
            <summary>Combination in case of a group-/broadcast transmission. Internal FBlocks received the message, while FBlocks on the network are not accessible due to a timeout error from the lower layer.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccessAndNetOff">
            <summary>Combination in case of a group-/broadcast transmission. Internal FBlocks received the message, while FBlocks on the network are not accessible while the network is switched off.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlSuccessAndSync">
            <summary>Combination in case of a group-/broadcast transmission. Internal FBlocks received the message, while FBlocks on the network are not accessible due to a synchronization failure between INIC and PMS.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlInvalidMessage">
            <summary>Not a valid CMS message.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostControlRetry">
            <summary>Reserved.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncSuccess">
            <summary>The packet was delivered successfully. The connection is held on until timeout (MHP_TIME_DELAY _END) or until connection is terminated by application.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorNac">
            <summary>Error during transmission: At least one frame was not acknowledged after considering timeouts and retries. The connection was terminated automatically.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorKilled">
            <summary>Error during transmission: The receiver device terminated the connection, before the packet has been transmitted completely.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorBuildCon">
            <summary>Error during establishing the connection: The Start Connection telegram was not received.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorPrio">
            <summary>Error during establishing the connection: The connection was rejected by the receiver, because the priority is to minor. The returned priority can be read out of the connection list entry (field Priority).</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorScale">
            <summary>Error during establishing the connection: The receiver sent an invalid scale value (0x00).</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorNoBuf">
            <summary>Error during connection establishing or transmission: The connection was terminated because an internal error occurred. After MHP_BUF_RETRY retries no internal wADS buffer was available.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncKilledTx">
            <summary>The transmission was canceled by the application of the sender prematurely.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncErrorNdf">
            <summary>Error during establishing the connection: The receiver sent an invalid NDF value (0x00).</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncLenZero">
            <summary>The order is denied ( MhpSend() ), since the packet length has been set to zero. The entry is removed from the connection list.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncEndReady">
            <summary>The entry is removed from the connection list. This is not an error report, but this event can be used to get the information, when the connection is closed.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncKilledRx">
            <summary>The receiver device terminated the connection, after the packet has been transmitted completely. The sender is in hold state currently.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncConfigNotOk">
            <summary>The connection is not established, or is going to be terminated, due to system state NotOK.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncLenTooBig">
            <summary>The total size of packet exceeds the upper limit. The entry is removed from the connection list.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncClose">
            <summary>The connection is closed, due to transition from NetOn to NetOff or re-initialization of the MHP module while the connection was open.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncAddressHandlerBusy">
            <summary>Function called failed, as the target address is 0xFFFF, and the Address Handler is busy.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncNcsNotOk">
            <summary>Function called failed, as the System Configuration State is NotOK.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncTxLenZero">
            <summary>Function called failed, as the Length field is zero. The entry is removed from the connection list.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.mostAsyncInvTotalPacketLength">
            <summary>	Function called failed, as the TotalPacketLength field exceeds the maximum size or the TotalPacketLength field is smaller than the Length field and not zero. The entry is removed from the connection list.</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MostTransmissionStatus.notSet">
            <summary>No further informations are available.</summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.IMostMessage">
            <summary>
            Public interface of the ET Framework API MOST message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostMessage.MostId">
            <summary>
            MOST message ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.IMostMessage.GetStructure">
            <summary>
            builds up structural retranslation of message
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.IMostMessage.Status">
            <summary>
            Gets or sets the status of the transmission of this message.
            </summary>
            <value>The status.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostMessage">
            <summary>
            MOST message, base class for some MOST message types
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Messages.MostMessage" /> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessage.MostId">
            <summary>
            Gets or sets the most specific identifier, which are definied in normal message type.
            </summary>
            <remarks>May be null, if the type of MOST message does not have no normal message type identifiers.</remarks>
            <value>The most id container class.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessage.MostSegmentationInfo">
            <summary>
            Gets or sets the most segmentation info.
            </summary>
            <value>The most segmentation info.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.Messages.MostMessage.Status">
            <summary>
            Gets or sets the detailed information, why the transmission of the MOST message failed.
            </summary>
            <value>The most transmission status.</value>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the MostMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the MostMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.GetStructure">
            <summary>
            builds up the structural retranslation
            </summary>
            <returns>message translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.GetSegmentationInfoTranslation">
            <summary>
            Get segmentation info translation
            </summary>
            <returns>segmentation translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.Translate">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>message translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.TranslateMessage">
            <summary>
            Translate binary message to textual representation
            </summary>
            <returns>message translation</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessage.Copy(ET.FW.Hal.Most.Messages.IMostMessage,ET.FW.Hal.Most.Messages.MostMessage)">
            <summary>
            Copy data of one MOST message object to another already existing object
            Method performs a shallow copy!
            </summary>
            <param name="source">source message</param>
            <param name="destination">target message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MatchPattern">
            <summary>
            pattern for relevance of match message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.Source">
            <summary>
            Match Source
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.Target">
            <summary>
            Match Target
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.FBlockId">
            <summary>
            Match FBlockID
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.InstanceId">
            <summary>
            Match InstanceId
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.FunctionId">
            <summary>
            Match Function
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.OpTypeId">
            <summary>
            Match OpType
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.Payload">
            <summary>
            Match Parameter
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.All24PayloadBytes">
            <summary>
            Dummy for all the 24 single settable payload bytes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b0">
            <summary>
            Payload byte 0
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b1">
            <summary>
            Payload byte 1 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b2">
            <summary>
            Payload byte 2 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b3">
            <summary>
            Payload byte 3 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b4">
            <summary>
            Payload byte 4 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b5">
            <summary>
            Payload byte 5 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b6">
            <summary>
            Payload byte 6 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b7">
            <summary>
            Payload byte 7 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b8">
            <summary>
            Payload byte 8 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b9">
            <summary>
            Payload byte 9 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b10">
            <summary>
            Payload byte 10 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b11">
            <summary>
            Payload byte 11 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b12">
            <summary>
            Payload byte 12 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b13">
            <summary>
            Payload byte 13 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b14">
            <summary>
            Payload byte 14 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b15">
            <summary>
            Payload byte 15 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b16">
            <summary>
            Payload byte 16 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b17">
            <summary>
            Payload byte 17 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b18">
            <summary>
            Payload byte 18 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b19">
            <summary>
            Payload byte 19 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b20">
            <summary>
            Payload byte 20 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b21">
            <summary>
            Payload byte 21 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b22">
            <summary>
            Payload byte 22 (zero-based)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Messages.MatchPattern.b23">
            <summary>
            Payload byte 23 (zero-based)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Messages.MostMessageExtensions">
            <summary>
            Extensions for MostMessage
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Messages.MostMessageExtensions.PatternCompare(ET.FW.Hal.Most.Messages.IMostMessage,ET.FW.Hal.Most.Messages.IMostMessage,ET.FW.Hal.Most.Messages.MatchPattern)">
            <summary>
            Extension method to compare MostMessages
            </summary>
            <param name="message">this message.</param>
            <param name="other">The other message.</param>
            <param name="pattern">Flags to define which fields to compare.</param>
            <returns>true for matching messages</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.CoaxialMode">
            <summary>
            Determinates the mode for the Coaxial Physical layer(cPHY) of the device
            </summary>
            <remarks>
            Enumeration is used for setting the proper mode
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.CoaxialMode.None">
            <summary>
            No mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.CoaxialMode.Simplex">
            <summary>
            Observing and/or participating in a simplex ring.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.CoaxialMode.Duplex">
            <summary>
            Observing and/or participating in a duplex link.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.CoaxialMode.DuplexEndpoint">
            <summary>
            Observing and/or participating at one end of a duplex link.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostErrorCodes">
            <summary>
            Enum for the Most-ErrorCodes<para></para>
            ErrorCodes from 1 to 255 are common ErrorCodes,<para></para>
            those with values greater than 255 are most-sepcific ErrorCodes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageCorrupt">
            <summary>
            Message is corrupt, HW signalled errors in message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageIncomplete">
            <summary>
            Message not complete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.DestinationNotSet">
            <summary>
            Destination is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.SourceNotSet">
            <summary>
            Source is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoProtocol">
            <summary>
            No protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoCatalog">
            <summary>
            No catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.ExceptionOccured">
            <summary>
            An exception occured
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.WrongMessageType">
            <summary>
            Wrong message-type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.WrongHwTimestamp">
            <summary>
            Wrong Hardware Timestamp
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageTooShort">
            <summary>
            Message too short. ErrorDescription is length of total MessageData.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageCorruptSpyAndPacketLength">
            <summary>
            Corrupt Length: PacketLength >= SpyLength.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageTooShortForTelLen">
            <summary>
            Message to short according to TelLen. ErrorDescription is TelLen and/or Length of the Message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.MessageCorruptSpyAndTelLength">
            <summary>
            SpyLength less or equal TelLength
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.ExceptionWhenCreatingMessageFromOTMT">
            <summary>
            Exception occured when creating a message from an OTMT-Trace
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.ExceptionWhenCreatingMessageFromOTMT2">
            <summary>
            Exception occured when creating a message from an OTMT2-Trace
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.PreterminatedMessage">
            <summary>
            Preterminated message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InvalidSystemMessageType">
            <summary>
            MOST 25 invalid control message type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InconsistentStructure">
            <summary>
            Parts of structure are invalid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.StructureException">
            <summary>
            Exception throwed by creating structure
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.TooFewBytes">
            <summary>
            Message has not enough bytes to fill the current parameter.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.TooManyBytes">
            <summary>
            Message has extra bytes after parsing the parameter list.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.StreamTooShort">
            <summary>
            Stream inside message has not enough bytes to fill the specified parameters.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InvalidCoding">
            <summary>
            Invalid data coding.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoMostID">
            <summary>
            No MostblockID
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoFBlock">
            <summary>
            No FBlock
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoFunctionID">
            <summary>
            No FunctionID
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NotAssignableMostPayload">
            <summary>
            Payload could not fully be read into the MostStructure.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InconsistentArray">
            <summary>
            Part of an Array is inconsistent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InconsistentRecord">
            <summary>
            Part of a Record is inconsistent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InconsistentStream">
            <summary>
            Part of a Stream is inconsistent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.InconsistentString">
            <summary>
            Part of a String is inconsistent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.ValueAboveRange">
            <summary>
            The given range is lower than the value, i.e. value larger than UpperLimit(Range).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.ValueBelowRange">
            <summary>
            The given range is higher than the value, i.e. value smaller than LowerLimit(Range).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.NoStringTerminatorFound">
            <summary>
            No string terminator found.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostErrorCodes.Unknown">
            <summary>
            Unknown Error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostErrorDecoder">
            <summary>
            Decoder for ErrorCodes with Most-Messages.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostErrorDecoder.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostInterface">
            <summary>
            Common base class for MOST interfaces (Node and Spy)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.MostInterface" /> class.
            </summary>
            <param name="name">bus name</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol},ET.FW.Core.Hal.IChannelAccess,System.Boolean)">
            <summary>
            Configure and initialize MOST bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <param name="channelAccess">optional channel access, null if no channel access configured </param>
            <param name="offline">is true if bus is used offline</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.ChannelIsRunning_Changed(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{System.Boolean})">
            <summary>
            Handles Running Changed event of channelAccess.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args instance containing the new value.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.Dispose">
            <summary>
            Shutdown API bus object
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.Bitrate">
            <summary>
            MOST bitrate in MBit/s (25/50/150)
            </summary>
            <value>bitrate, 0 if unknown</value>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.AdsProtocol">
            <summary>
            MOST ADS Protocol (base protocol for async messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.HighProtocol">
            <summary>
            MOST High Protocol (based on async messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.CmsProtocol">
            <summary>
            MOST CMS Protocol (base protocol for control messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.AmsProtocol">
            <summary>
            MOST AMS Protocol (protocol for segmented control messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.EventProtocol">
            <summary>
            Protocol for MOST event pseudo messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.SystemProtocol">
            <summary>
            MOST 25 System Protocol (for control system messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.MepProtocol">
            <summary>
            MOST 150 ethernet protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.eventProtocol_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Most.Events.IMostEvent})">
            <summary>
            Handler for received MOST bus event messages
            </summary>
            <param name="sender">event protocol</param>
            <param name="e">event args containing event message</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostInterface.HandleEventMessage(ET.FW.Hal.Most.Events.IMostEvent)">
            <summary>
            Handle events from MOST bus
            </summary>
            <param name="msg">event message to handle</param>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.LightLockState">
            <summary>
            MOST bus light and lock state
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.Mpr">
            <summary>
            Number of MOST devices (Maximum Position Register)
            -1 if not initialized
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.Npr">
            <summary>
            Own ring position (Node Position Register)
            -1 if not initialized
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostInterface.Sbc">
            <summary>
            Most boundary description (Synchronous Boundary Control)
            -1 if not initialized
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostLockState">
            <summary>
            Represents the physical state of the MOST bus.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.NoLight">
            <summary>
            The MOST ring is not closed (No light).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.Locked">
            <summary>
            The MOST bus is stable (Locked).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.ShortUnlock">
            <summary>
            The MOST bus was unstable for a short time. 
            </summary>
            <remarks>Depending on the implementation of the ChannelAccess, this event or LightNoLock is used.</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.CriticalUnlock">
            <summary>
            The MOST bus was unstable for a critical time periode.
            </summary>
            <remarks>Depending on the implementation of the ChannelAccess, this event or LightNoLock is used.</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.NoLock">
            <summary>
            The MOST ring is unstable (Unlocked). Light could be on.
            </summary>
            <remarks>Depending on the implementation of the ChannelAccess, this event or ShortUnlock/CriticalUnlock is used.</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostLockState.Undefined">
            <summary>
            No information available
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostMessageTranslation">
            <summary>
            Translation of a MostMessage including the structure of the message,
            if a structure could be created.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageTranslation.#ctor(System.String,ET.FW.Core.Common.FrameworkError)">
            <summary>
            Constructor
            </summary>
            <param name="translation"></param>
            <param name="error"></param>
        </member>
        <member name="P:ET.FW.Hal.Most.MostMessageTranslation.MostStructure">
            <summary>
            The Structure of the MostMessage, if one could be determined when translating the message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostNode">
            <summary>
            MOST Node implementation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.MostNode"/> class.
            </summary>
            <param name="name">MOST node bus name</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol},ET.FW.Core.Hal.IChannelAccess,System.Boolean)">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <param name="channelAccess">optional channel access, null if no channel access configured </param>
            <param name="offline">is true if bus is used offline</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.HandleEventMessage(ET.FW.Hal.Most.Events.IMostEvent)">
            <summary>
            Handle events from MOST bus
            </summary>
            <param name="msg">event message to handle</param>
        </member>
        <member name="F:ET.FW.Hal.Most.MostNode.nodeChannelAccess">
            <summary>
            Optional reference to node channel access
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostNode.NodeAddress">
            <summary>
            Node address
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.ActivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.DeactivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostNode.SetNodeAddress(System.UInt16)">
            <summary>
            Set new Node address
            </summary>
            <param name="nodeAddr">Logical node address to set</param>
            <returns> <c>true</c> on success</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.MostNode.MostStress">
            <summary>
            Gets the class, which implements MOST stress functionalities.
            </summary>
            <value></value>
        </member>
        <member name="P:ET.FW.Hal.Most.MostNode.LightControl">
            <summary>
            Gets the object, which implements LightControl
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostSpy">
            <summary>
            MOST Spy implementation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpy.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.MostSpy"/> class.
            </summary>
            <param name="name">bus name</param>
        </member>
        <member name="T:ET.FW.Hal.Most.OfflineMost150ChannelAccess">
            <summary>
            MOST 150 channel access for offline mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost150ChannelAccess.#ctor(ET.FW.Core.Hal.IEquipment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.OfflineMost150ChannelAccess"/> class.
            </summary>
            <param name="equipment">The equipment.</param>
            <param name="portName">Name of the port.</param>
            <param name="name">The name.</param>
            <param name="portType">Port type for channel access</param>
        </member>
        <member name="P:ET.FW.Hal.Most.OfflineMost150ChannelAccess.MepProtocol">
            <summary>
            MOST Ethernet Protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost150ChannelAccess.CreateHardwareProtocol(System.String,System.String)">
            <summary>
            Provide offline hardware protocol of given type
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Matching protocol or null if not available
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost150ChannelAccess.GetTypeOfHardwareProtocol(System.String,System.String)">
            <summary>
            Returns the Type of the Protocol, which is created by CreateHardwareProtocol
            with the corresponding parameters.<para></para>
            This method must be overridden by all those ChannelAccesses using protocols,
            which may define further dependencies via Attributes.
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Type of the protocol or null
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.OfflineMost25ChannelAccess">
            <summary>
            MOST 25 channel access for offline mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost25ChannelAccess.#ctor(ET.FW.Core.Hal.IEquipment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.OfflineMost25ChannelAccess"/> class.
            </summary>
            <param name="equipment">The equipment.</param>
            <param name="portName">Name of the port.</param>
            <param name="name">The name.</param>
            <param name="portType">Port type for channel access</param>
        </member>
        <member name="P:ET.FW.Hal.Most.OfflineMost25ChannelAccess.SystemProtocol">
            <summary>
            System Control protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost25ChannelAccess.CreateHardwareProtocol(System.String,System.String)">
            <summary>
            Provide offline hardware protocol of given type
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Matching protocol or null if not available
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMost25ChannelAccess.GetTypeOfHardwareProtocol(System.String,System.String)">
            <summary>
            Returns the Type of the Protocol, which is created by CreateHardwareProtocol
            with the corresponding parameters.<para></para>
            This method must be overridden by all those ChannelAccesses using protocols,
            which may define further dependencies via Attributes.
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Type of the protocol or null
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.OfflineMostChannelAccess">
            <summary>
            MOST channel access for offline mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMostChannelAccess.#ctor(ET.FW.Core.Hal.IEquipment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.OfflineMostChannelAccess" /> class.
            </summary>
            <param name="equipment">The equipment.</param>
            <param name="portName">Name of the port.</param>
            <param name="name">The name.</param>
            <param name="portType">Port type for channel access</param>
        </member>
        <member name="P:ET.FW.Hal.Most.OfflineMostChannelAccess.CmsProtocol">
            <summary>
            CMS Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.OfflineMostChannelAccess.AdsProtocol">
            <summary>
            Async protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.OfflineMostChannelAccess.EventProtocol">
            <summary>
            Event protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMostChannelAccess.CreateHardwareProtocol(System.String,System.String)">
            <summary>
            Provide offline hardware protocol of given type
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Matching protocol or null if not available
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.OfflineMostChannelAccess.GetTypeOfHardwareProtocol(System.String,System.String)">
            <summary>
            Returns the Type of the Protocol, which is created by CreateHardwareProtocol
            with the corresponding parameters.<para></para>
            This method must be overridden by all those ChannelAccesses using protocols,
            which may define further dependencies via Attributes.
            </summary>
            <param name="type">Type/class name of protocol to provide</param>
            <param name="name">Name of protocol instance</param>
            <returns>
            Type of the protocol or null
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.IMostStructure">
            <summary>
            Most parameter structure
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostStructure.HasError">
            <summary>
            Has error in structure
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostStructure.Error">
            <summary>
            Error of MOST structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.IMostStructure.SetError(ET.FW.Hal.Most.MostErrorCodes,System.String)">
            <summary>
            Set Error of structure
            </summary>
            <param name="id">Error id</param>
            <param name="description">Error description</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParameterError">
            <summary>
            Error class for MostParameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParameterError.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParameterError.#ctor(ET.FW.Hal.Most.MostErrorCodes,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">id of the error.</param>
            <param name="additionalInfo">Textual description of the error</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameterError.ErrorId">
            <summary>
            The kind of the error.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameterError.ErrorDescription">
            <summary>
            Property not being serialized for a DefaultDescription
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostStructure">
            <summary>
            List of IMostParameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostStructure.HasError">
            <summary>
            Has error is structure
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostStructure.Error">
            <summary>
            Error of MOST structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostStructure.SetError(ET.FW.Hal.Most.MostErrorCodes,System.String)">
            <summary>
            Sets error of structure
            </summary>
            <param name="id">error id</param>
            <param name="additionalInfo">error description</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostStructure.SetError(ET.FW.Hal.Most.Parameter.MostParameterError)">
            <summary>
            Sets error into parameter
            </summary>
            <param name="error">the parameter error</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.IMostParameter">
            <summary>
            Interface for Most Parameters
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.Definition">
            <summary>
            The parameter out of the most catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.PositionInPayload">
            <summary>
            Position of this parameter binary data inside payload of Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.LengthInPayload">
            <summary>
            Length of this parameter binary data inside payload of Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.HasError">
            <summary>
            Has error in MOST parameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.HasChildErrors">
            <summary>
            Has error in MOST child parameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.IMostParameter.Error">
            <summary>
            Error of MOST parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.IMostParameter.SetError(ET.FW.Hal.Most.MostErrorCodes,System.String)">
            <summary>
            Set Error of structure
            </summary>
            <param name="id">Error id</param>
            <param name="additionalInfo">Error description</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostBitfieldValue">
            <summary>
            Representation of the value(s) of one complete Bitfield
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostBitfieldValue.MaskRelevant">
            <summary>
            true if the Mask is relevant for this bitfield (post NTG 4.5)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostBitfieldValue.Mask">
            <summary>
            Mask of the Bitfield-Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostBitfieldValue.Bits">
            <summary>
            Bitfieldvalue as List of Bitvalues and their string-representation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostBitfieldValue.#ctor">
            <summary>
            constructor of a new Bitfieldvalue
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamBitfield">
            <summary>
            Bitfield Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamBitfield.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamBitfield.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,ET.FW.Hal.Most.Parameter.MostBitfieldValue,System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostBoolValue">
            <summary>
            Representation of the value(s) of one complete Bitfield
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostBoolValue.Bits">
            <summary>
            Bitfieldvalue as List of Bitvalues and their string-representation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostBoolValue.#ctor">
            <summary>
            constructor of a new Bitfieldvalue
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamBool">
            <summary>
            Bool Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamBool.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamBool.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,ET.FW.Hal.Most.Parameter.MostBoolValue,System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamContainer">
            <summary>
            Container Most Parameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamContainer.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamContainer.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,ET.FW.Hal.Most.Parameter.IMostStructure,System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamEnum">
            <summary>
            Enum Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamEnum.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamEnum.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.Collections.Generic.KeyValuePair{System.Int32,System.String},System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParameter">
            <summary>
            Parameter for user
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.Definition">
            <summary>
            The parameter out of the most catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.Name">
            <summary>
            Get the Name out of the underlying CatalogParameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.PositionInPayload">
            <summary>
            Position of this parameter binary data inside payload of Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.LengthInPayload">
            <summary>
            Length of this parameter binary data inside payload of Message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParameter.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.Int32,System.Int32)">
            <summary>
            constructor without value
            </summary>
            <param name="param">Most Catalog Parameter</param>
            <param name="pos">Position of this parameter inside payload of message</param>
            <param name="len">Length of parameterdata in payload of message</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.HasError">
            <summary>
            Has error by MOST paramater
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.HasChildErrors">
            <summary>
            Has error in MOST child parameter
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParameter.Error">
            <summary>
            Message error
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParameter.SetError(ET.FW.Hal.Most.MostErrorCodes,System.String)">
            <summary>
            Set Error of structure
            </summary>
            <param name="id">Error id</param>
            <param name="additionalInfo">Error description</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamNumber">
            <summary>
            Number Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamNumber.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamNumber.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamNumber.Exponent">
            <summary>
            Exponent of the Parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamNumber.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values and exponents
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="exponent">Value of the exponent</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamRle">
            <summary>
            Rle Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamRle.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamRle.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.Collections.Generic.List{System.Int16},System.Int32,System.Int32)">
            <summary>
            constructor for spontanious inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Parameter.MostParamString">
            <summary>
            String Most Parameter with Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Parameter.MostParamString.Value">
            <summary>
            the value of the parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamString.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.String,System.Int32,System.Int32)">
            <summary>
            constructor for spontaneous inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamString.#ctor(ET.FW.Hal.Most.Catalogs.XmlParam,System.String,System.Int32,System.Int32,System.Byte)">
            <summary>
            constructor for spontaneous inventions of parameter with values
            </summary>
            <param name="param">Most-Catalog-Parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="Pos">Position of this parameter inside payload of message</param>
            <param name="Len">Length of parameterdata in payload of message</param>
            <param name="encoding">How the MOST string was encoded on the bus</param>
        </member>
        <member name="F:ET.FW.Hal.Most.Parameter.MostParamString._MOSTEncoding">
            <summary>
            holds internal information about the used MOST encoding for this string
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Parameter.MostParamString.MOSTEncoding(System.String,System.String)">
            <summary>
            Composes a string with information about the used MOST encoding for this string.
            If the string wasn't used internally the given affixes are attached accordingly.
            </summary>
            <param name="prepend">String to prepend to verbose MOSTEncoding</param>
            <param name="append">String to append to verbose MOSTEncoding</param>
            <returns>Encoding with affixes</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostEthernetProtocol">
            <summary>
            Protocol for MOST Ethernet
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostMessageDecoder`1">
            <summary>
            Common interface for MOST message encoding/decoding
            </summary>
            <typeparam name="TMessage">(Base) type of messages to decode</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.IMostMessageDecoder`1.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Decode message data and create message
            </summary>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>MOST message object, null on error</returns>
            <typeparam name="TNewMessage">Result message type, must be of type TMessage or derived class</typeparam>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.AmsOverCmsProtocol">
            <summary>
            Protocol handling of MOST AMS Messages (over CMS)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.AmsOverCmsProtocol.#ctor(System.String,ET.FW.Hal.Most.Protocols.IMostCmsProtocol)">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.Most150CmsProtocol">
            <summary>
            Hardware protocol for MOST 150 CMS messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most150CmsProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostCmsMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.Most150CmsProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most150CmsProtocol.DecodeData(System.Byte[],ET.FW.Hal.Most.Messages.MostCmsMessage)">
            <summary>
            Extract MOST ID, Tel Len, Tel ID and payload from MOST 150 raw data bytes
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most150CmsProtocol.EncodeData(ET.FW.Hal.Most.Messages.IMostCmsMessage)">
            <summary>
            Pack MOST ID and payload to raw data bytes for transmission
            </summary>
            <param name="message">MOST message to encode</param>
            <returns>raw byte array</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.Most25CmsProtocol">
            <summary>
            Hardware protocol for MOST 25 CMS messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most25CmsProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostCmsMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.Most25CmsProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most25CmsProtocol.DecodeData(System.Byte[],ET.FW.Hal.Most.Messages.MostCmsMessage)">
            <summary>
            Extract MOST ID, Tel Len, Tel ID and payload from MOST 25 raw data bytes (Normal/CMS messages only)
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.Most25CmsProtocol.EncodeData(ET.FW.Hal.Most.Messages.IMostCmsMessage)">
            <summary>
            Pack MOST ID and payload to raw data bytes for transmission
            </summary>
            <param name="message">MOST message to encode</param>
            <returns>Raw byte array</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostAdsProtocol">
            <summary>
            Hardware protocol for async MOST messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostDataMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostAdsProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Decode ADS/MDP data and create message
            </summary>
            <typeparam name="TNewMessage">Result message type, must be MostDatatMessage or derived class</typeparam>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>MOST async message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.CreateMessage(ET.FW.Hal.Most.Messages.MostTelId)">
            <summary>
            Create empty MOST data message, message type is choosen according to given TelID.
            </summary>
            <param name="telId">TelID for new message</param>
            <returns>MOST data message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.CreateMessage(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Decode ADS/MDP data and create message of fitting type, message type is choosen according to TelID field.
            </summary>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>MOST data message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.DecodeData(System.Byte[],ET.FW.Hal.Most.Messages.MostDataMessage)">
            <summary>
            Extract MOST ID, Tel Len, Tel ID and payload from raw data bytes.
            Create message error if data cannot be decoded!
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.TelIdFromRawData(System.Byte[])">
            <summary>
            Extract Tel ID field from message raw data bytes
            </summary>
            <param name="data">message raw data</param>
            <returns>The TelID</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsProtocol.EncodeData(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Pack MOST ID and payload to raw data bytes for transmission
            </summary>
            <param name="message">MOST message to encode</param>
            <returns>raw byte array</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostAmsProtocol">
            <summary>
            Hardware protocol for MOST Application Message Service
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAmsProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostAmsMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostAmsProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostAmsSoftwareProtocol">
            <summary>
            Protocol handling of MOST AMS Messages (over CMS)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostAmsSoftwareProtocol.speedgrade">
            <summary>
            Speedgrade (25 or 150).
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAmsSoftwareProtocol.#ctor(System.String,ET.FW.Hal.Most.Protocols.IMostCmsProtocol)">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAmsSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Most.Messages.IMostCmsMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAmsSoftwareProtocol.SendMessage(ET.FW.Hal.Most.Messages.IMostAmsMessage)">
            <summary>
            Convert given message to downlink protocol message(s) and send them via downlink
            </summary>
            <param name="givenMessage">the message to be processed</param>
            <returns>
            Send result, which indicates if message could be sent, further errors are not monitored here
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostCmsProtocol">
            <summary>
            Hardware protocol for MOST CMS messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostCmsMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostCmsProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsProtocol.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Decode CMS data and create message
            </summary>
            <typeparam name="TNewMessage">Result message type, must be MostCmsMessage or derived class</typeparam>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>MOST CMS message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsProtocol.CreateMessage(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Decode CMS data and create message
            </summary>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>MOST CMS message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsProtocol.DecodeData(System.Byte[],ET.FW.Hal.Most.Messages.MostCmsMessage)">
            <summary>
            Extract MOST ID, Tel Len, Tel ID and payload from raw data bytes
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsProtocol.EncodeData(ET.FW.Hal.Most.Messages.IMostCmsMessage)">
            <summary>
            Pack MOST ID and payload to raw data bytes for transmission
            </summary>
            <param name="message">MOST message to encode</param>
            <returns>raw byte array</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
            <remarks>
            Older ETT-Files have MOST system messages assigned to CMS protocol.
            For this situation, system messages can be handled by this class too.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol.SimulateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            "Input" function for messages in offline mode
            </summary>
            <param name="message">Offline message to be simulates</param>
            <returns>true, if message could be handled</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol.SetSystemProtocol(ET.FW.Core.Messaging.Protocol{ET.FW.Hal.Most.Messages.IMostSystemMessage})">
            <summary>
            Set system protocol to be used for system messages
            </summary>
            <param name="sysProtocol">system protocol</param>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostCmsUplinkOnlyProtocol.systemProtocol">
            <summary>
            Optional syetm protocol, used if Simulate messaqge is called for a system message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostEthernetProtocol">
            <summary>
            Protocol for MOST Ethernet
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostEthernetProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostEthernetProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostEthernetUplinkOnlyProtocol">
            <summary>
            Uplink protocol for MOST ethernet
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostEthernetUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostEthernetUplinkOnlyProtocol"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostEventProtocol">
            <summary>
            Hardware protocol for MOST event messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostEventProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostEventProtocol"/> class.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostAdsProtocol">
            <summary>
            Interface for MOST Ads Protocol 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostAmsProtocol">
            <summary>
            Interface for MOST AMS Protocol 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostCmsProtocol">
            <summary>
            Interface for MOST CMS Protocol 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.IMostHighProtocol">
            <summary>
            Interface for MOST High Protocol 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighCommand">
            <summary>
            Most High Command
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.RequestConnection">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.StartConnection">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.EndConnection_Tx">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.EndConnection_Rx">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.FrameAck">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.Request">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.MultipleFramesRequest">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.AdjustRate">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.ReadyForData">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.HoldConnectionTx">
            <summary></summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighCommand.HoldConnectionRx">
            <summary></summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighTransmissionMode">
            <summary>
            Most High Transmission mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighTransmissionMode.BlockAck">
            <summary>
            Only the Block is Acknowledged
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighTransmissionMode.SingleFrameAck">
            <summary>
            Every Frame is Acknowledged
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighProtocol">
            <summary>
            Hardware protocol for MOST High Message Service
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostHighMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostHighProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighProtocol.Events">
            <summary>
            Property which provides MostEvent event output
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol">
            <summary>
            Protocol handling of MOST High Messages
            </summary>
            <remarks>See MOST HighProtocolSpecification_2v2.pdf, page 11 and 24</remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Most.Messages.IMostDataMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.AddResult">
            <summary>
            The add result of the current packet
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.AddResult.NotFinished">
            <summary>
            not finished
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.AddResult.PacketFinished">
            <summary>
            the packet is finished
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.AddResult.BlockFinished">
            <summary>
            the block is finished
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.AddResult.Corrupt">
            <summary>
            The msg was corrupt
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame">
            <summary>
            Most-High-Frame which contains a MostMessage and few additional interpretations
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.Message">
            <summary>
            the most Message which came in
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.Id">
            <summary>
            Frame ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.Total">
            <summary>
            Frame Total
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.IsCorrupt">
            <summary>
            Is this a corrupt frame
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.IsAcknowledged">
            <summary>
            Is this frame Acknowledged (only used for frame wise ACK)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.ByteCount">
            <summary>
            get the bytecount of the frame
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.#ctor(ET.FW.Hal.Most.Messages.IMostDataMessage,System.Int32@)">
            <summary>
            one frame which is the smallest part of a most-high-thing and basically consists of a most(CMS)Message
            </summary>
            <param name="msg">the Message</param>
            <param name="bytecount">cummulate the payload bytes, so we can do the array operations nicely</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Frame.GetInto(ET.FW.Hal.Most.Messages.IMostHighMessage,System.Int32@)">
            <summary>
            Get all the payloads into the given glued-Message
            </summary>
            <param name="msg">the msg</param>
            <param name="bytepos">position where to insert into payload-array</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block">
            <summary>
            Most-High-Block containing 1-n Frames which are IMostDataMessages
            and the 0-Frame which is a IMostDataMessage as well
            See MOST HighProtocolSpecification_2v2.pdf, page 11 and 24
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.Packet">
            <summary>
            Gets or sets the packet this block belongs to.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.frames">
            <summary>
            List of Frames (0-frame plus frames 1-n) which are IMostDataMessages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.MaximumFramesPerBlock">
            <summary>
            Is transmitted with the scale of the Start Connection command;
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.IsCorrupt">
            <summary>
            Is this a corrupt block
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.LastFrameReceivedAt">
            <summary>
            Timestamp of the Lastframe for errordetection
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.LastFrameId">
            <summary>
            Id of the Lastframe for Negative FrameACK
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.BlockCnt">
            <summary>
            ID of current block . Zero on first block. It is incremented on each new block
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.SegId">
            <summary>
            Segmentation ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.Options">
            <summary>
            Options of transmission 
            </summary>
            <value>
            The options.
            Bit 0-1
            01 - Acknowledge after transmisson of the the entire block (BlockAck Mode)
            02 - Acknowledge after transmisson of each singe frame (SingleFrameAck Mode)
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.CurrentTransmissionMode">
            <summary>
            Current mode of transmission (see HighProtocolSpecification_2v2 10.1.2)
            01 - Acknowledge after transmisson of the the entire block (BlockAck Mode)
            02 - Acknowledge after transmisson of each singe frame (SingleFrameAck Mode)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.#ctor(ET.FW.Hal.Most.Messages.IMostDataMessage,ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet)">
            <summary>
            Constructor of MostHighBlock
            </summary>
            <param name="msg">The MSG.</param>
            <param name="packet">The packet this block belongs to</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.InitBlock(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Inits a new the MOSt High block.
            </summary>
            <param name="msg">The message to proccess</param>
            <returns>the add result of the message</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.Add(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Add a frame to this block
            </summary>
            <param name="msg">the Message this frame consists of</param>
            <returns>result that signals if this was the last frame in this block</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.HandlePositivFrameAcknowledge">
            <summary>
            Handles the Positiv frame acknowledge for the frame wise ack.
            </summary>
            <returns>the status</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.HandleNegativeFrameAcknowledge">
            <summary>
            Handles the negative frame acknowledge for the frame wise ack.
            </summary>
            <returns>the status</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.GetInto(ET.FW.Hal.Most.Messages.MostHighMessage,System.Int32@)">
            <summary>
            Get all the payloads into the given glued-Message
            </summary>
            <param name="msg">the message</param>
            <param name="bytepos">position where to insert into payload-array</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.CheckFrames">
            <summary>
            Checks the if all frames are there an Acknowledged.
            </summary>
            <returns>true if all frames are there an acknowledged, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.HandleMultipleFramesRequest(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the multiple frames request.
            </summary>
            <param name="frameRequestMsg">The frame request MSG.</param>
            <returns>the result of the proccessing</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Block.FrameByteCount">
            <summary>
            get the bytecount for all Frames in this Block
            </summary>
            <returns>the bytecount</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet">
            <summary>
            Most-High-Packet containing 1-n Blocks
            See MOST HighProtocolSpecification_2v2.pdf, page 11 and 24
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.Connection">
            <summary>
            The connection this packet belongs to
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.CurrentTransmissionMode">
            <summary>
            Current mode of transmission (see HighProtocolSpecification_2v2 10.1.2)
            01 - Acknowledge after transmisson of the the entire block (BlockAck Mode)
            02 - Acknowledge after transmisson of each singe frame (SingleFrameAck Mode)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.blocks">
            <summary>
            List of Blocks
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.IsCorrupt">
            <summary>
            Is this a corrupt packet
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.RecalculateCorrupt">
            <summary>
            Check all blocks if the error still exists
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.RecentBlockCount">
            <summary>
            buffer the recent block count
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.#ctor(ET.FW.Hal.Most.Messages.IMostDataMessage,ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection)">
            <summary>
            Constructor of MostHighPacket
            </summary>
            <param name="msg">The message.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.Add(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Add a new Message to the packet
            </summary>
            <param name="msg">Most CMS Message to add</param>
            <returns>true if it was possible to add the Message, false otherwise</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.GetInto(ET.FW.Hal.Most.Messages.MostHighMessage)">
            <summary>
            Get all the payloads into the given glued-Message
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.HandleMultipleFramesRequest(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the multiple frames request.
            </summary>
            <param name="frameRequestMsg">The frame request MSG.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.FrameAck(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the MHP FrameACK control messages
            </summary>
            <param name="givenMessage">The given Message.</param>
            <returns>true if success</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Packet.IsFinished">
            <summary>
            Gets or sets a value indicating whether this packet is finished.
            </summary>
            <value>
            	<c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection">
            <summary>
            A Most High Connection
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.#ctor(ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol,ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection"/> class.
            </summary>
            <param name="protocol">The protocol.</param>
            <param name="requestMsg">The request MSG.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.RequestConnection(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Request a Connection
            </summary>
            <param name="requestMsg">The request MSG.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.StartConnection(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Starts the connection.
            </summary>
            <param name="startConnectionMsg">The start connection MSG.</param>
            <returns>true if OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.FrameAck(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the MHP FrameACK control messages
            </summary>
            <param name="givenMessage">The given Message.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.HandleHoldConnectionTx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Hold the connection.
            </summary>
            <param name="holdConnectionMsg">The hold connection MSG.</param>
            <returns>true if OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.HandleMultipleFramesRequest(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the multiple frames request.
            </summary>
            <param name="frameRequestMsg">The frame request MSG.</param>
            <returns>true if OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.HandleHoldConnectionRx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Hold the connection.
            </summary>
            <param name="holdConnectionMsg">The hold connection MSG.</param>
            <returns>true if OK</returns>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.IsValid">
            <summary>
            Hold if the current connection has received an error
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.Scale">
            <summary>
            Maximum number of frames per Block
            </summary>
            <value>
            Control  channel 0x01..0x0f
            Asynchr. channel 0x01..0xff
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.RevID">
            <summary>
            Protocol revision of the source
            </summary>
            <value>
            0x00 - MHP 2.1 or older; 0x01 - MHP 2.2 
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.RevIDDSI">
            <summary>
            Protocol revision of the sink
            </summary>
            <value>
            0x00 - MHP 2.1 or older; 0x01 - MHP 2.2 
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.Prio">
            <summary>
            Priority of the connection  of the source
            </summary>
            <value>
            between 0x01 . .0x80
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.PrioAck">
            <summary>
            Priority of the connection  of the sink
            </summary>
            <value>
            between 0x01 .. 0x80
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.NDF">
            <summary>
            Maximum number of usable databyte per frame  of the source
            </summary>
            <value>
            Control channel : 0x000B
            Asynchr. channel: 0x0028..0x03ee
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.NDFAck">
            <summary>
            Maximum number of usable databyte per frame  of the sink
            </summary>
            <value>
            Control channel : 0x000B
            Asynchr. channel: 0x0028..0x03ee
            </value>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.AIR">
            <summary>
            Perfomrance category of DSI
            </summary>
            <value>
            Control channel: not evaluated
            Asynchr. channel: full range
            </value>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.Add(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Add a new Message to the packet of the connection
            </summary>
            <param name="msg">Most CMS Message to add</param>
            <returns>true if it was possible to add the Message, false otherwise</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.MostHighConnection.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>
            The protocol.
            </value>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Most.Messages.IMostDataMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a Message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the Message</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.BuildKey(ET.FW.Hal.Most.Messages.IMostDataMessage,System.Boolean)">
            <summary>
            Build key (all fields are stuffed into single 64bit value)
            Source   Target  FBlockID   Inst   FktID   OpType
            | 16 bit | 16 bit |  8 bit |  8bit | 12bit |  4bit |
            </summary>
            <param name="givenMessage">The given Message.</param>
            <param name="isDSO">if set to <c>true</c> the Message is from the Data Source otherwise from the Sink (Target)</param>
            <returns>the new key</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.CheckControlData(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Checks the control data for Protocol changes like a complete Message
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleRequestConnection(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the request connection. DSO => DSI
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleStartConnection(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the start connection. DSI => DSO
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleFrameAcknowledge(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the frame acknowledge. DSI => DSO
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleEndConnectionTx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the end connection tx. DSO => DSI
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleEndConnectionRx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the end connection rx. DSI = > DSO
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleHoldConnectionTx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the hold connection tx. DSO => DSI
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleMultipleFramesRequest(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the multiple frames request. DSI => DSO
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.HandleHoldConnectionRx(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Handles the hold connection rx. DSI => DSO
            </summary>
            <param name="givenMessage">The given Message.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.SendErrorMessage(System.DateTime,ET.FW.Hal.Most.Events.MostHighErrorEventType)">
            <summary>
            Sends a error Message on the error event channel.
            </summary>
            <param name="timestamp">The timestamp of the Message.</param>
            <param name="error">The error type.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.CreateMostHighMessage(ET.FW.Hal.Most.Messages.IMostDataMessage)">
            <summary>
            Creates the most high Message.
            </summary>
            <param name="givenMessage">The given Message.</param>
            <returns>the Message</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.Events">
            <summary>
            Property which provides event output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.events">
            <summary>
            Event property implementation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighSoftwareProtocol.SimulateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary> 
            Simulate Message or error event (used for offline mode)
            </summary>
            <param name="message">simulated Message or event</param>
            <returns>true if Message could be processed</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostSystemProtocol">
            <summary>
            Hardware protocol for MOST CMS messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.#ctor(ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Most.Messages.IMostSystemMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostSystemProtocol"/> class.
            </summary>
            <param name="transmitter">HW transmitter to use.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.EncodeData(ET.FW.Hal.Most.Messages.IMostSystemMessage)">
            <summary>
            Pack message content to raw data bytes for transmission
            </summary>
            <param name="message">MOST message to encode</param>
            <returns>Raw byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Create and decode system message
            </summary>
            <typeparam name="TNewMessage">Result message type, must be MostSystemMessage or derived class</typeparam>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing payload</param>
            <returns>MOST system message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.CreateMessage(ET.FW.Hal.Most.Messages.MostControlMessageType)">
            <summary>
            Create and empty system message (message data type is choosen according to type parameter)
            </summary>
            <param name="type">message type</param>
            <returns>MOST system message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.CreateMessage(ET.FW.Hal.Most.Messages.MostControlMessageType,System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Create and decode system message (message data type is choosen automatically according to type parameter)
            </summary>
            <param name="type">message type</param>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing payload</param>
            <returns>MOST system message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostSystemProtocol.DecodeData(System.Byte[],ET.FW.Hal.Most.Messages.MostSystemMessage)">
            <summary>
            Decode raw data bytes to message object
            </summary>
            <param name="data">data bytes</param>
            <param name="message">target message</param>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostAmsUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAmsUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostAmsUplinkOnlyProtocol"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostAdsUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostAdsUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostAdsUplinkOnlyProtocol"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Protocols.MostHighUplinkOnlyProtocol">
            <summary>
            Protocol implementation which only supports signalling of uplink messages.
            Sending of messages is not possible.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Protocols.MostHighUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Protocols.MostHighUplinkOnlyProtocol"/> class.
            </summary>
            <param name="name">The name of the Protocol.</param>
        </member>
        <member name="P:ET.FW.Hal.Most.Protocols.MostHighUplinkOnlyProtocol.Events">
            <summary>
            Property which provides MostEvent event output
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostSpyInfo">
            <summary>
            Holds detailed MOST informations, which are read out by SpyNic chips.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.#ctor(ET.FW.Hal.Most.MostSpyInfo)">
            <summary>
            Copy Constructor: Initialize to values from other object
            </summary>
            <param name="other">other spy info to be copied from</param>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.Crc">
            <summary>
            Gets or sets the cyclic redundancy check value.
            </summary>
            <value>The CRC value.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.PIndex">
            <summary>
            Gets or sets the packet index value (MOST 150 only).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.CrcError">
            <summary>
            CRC error flag.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.BufferError">
            <summary>
            Buffer error flag
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.PreTerminated">
            <summary>
            Pre terminated message flag (MOST 150 only).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.Ok">
            <summary>
            OK flag (At least one Acknowledge for message detected)
            </summary>
            <value>null: undefined; true: ok ('o')</value>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.Error">
            <summary>
            Error flag (NACK)
            </summary>
            <value>null: undefined; true: Error ('!')</value>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.Light">
            <summary>
            Light flag
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.Lock">
            <summary>
            Lock flag
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostSpyInfo.LightLockState">
            <summary>
            Combined Light and Lock state 
            </summary>
            <remarks>
            Property uses same Enumeration as Light Lock events and MOST busses
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Most.MostSpyInfo.FieldMask">
            <summary>
            Bit mask for all SpyInfo fields
            </summary>
            <remarks>Used for serialization to indicate valid fields and to store flag values</remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.CurrentVersion">
            <summary>
            Current serialization version (this internal version is used beginning with version 4, older versions used MostMessage version)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Serialize(ET.FW.Hal.Most.MostSpyInfo,System.IO.BinaryWriter)">
            <summary>
            Check if spyinfo exists and serialize it 
            </summary>
            <param name="spyInfo">spy info to serialize, null for none</param>
            <param name="writer">writer for serialization</param>
            <remarks>
            Formerly serialization/deserialization was controlled by message classes
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Deserialize(System.IO.BinaryReader,System.UInt16)">
            <summary>
            Create and deserialize spy info, if it was serialized
            </summary>
            <param name="reader">reader for deserialize</param>
            <param name="bitrate">MOST speedgrade, necessary for decoding of older file versions</param>
            <returns>SpyInfo if serialized, null otherwise</returns>
            <remarks>
            Formerly serialization/deserialization was controlled by message classes
            This method reads old format with boolean instead of version too
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize MostSpy Info
            </summary>
            <param name="writer">writer for serialization</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Deserialize(System.IO.BinaryReader,System.Byte,System.UInt16)">
            <summary>
            Deserialize MostSpy Info (not to be used directly)
            </summary>
            <param name="reader">reader for deserialize</param>
            <param name="version">version of the message</param>
            <param name="bitrate">MOST speedgrade, necessary for decoding of older file versions</param>
            <remarks>
            To be used directly only for old file formats, use static Deserialize() method for new file formats
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Most.MostSpyInfo.Ack25">
            <summary>
            MOST 25 ACK Codes from SMSC / Vector
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.FailedNoResponseFromTargetNode">
            <summary>
            Transmission failed. No response from the target node.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.Success">
            <summary>
            Transmission successful.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.SuccessMsgTypeNotSupportedByRecNode">
            <summary>
            Transmission successful, however, receiving node does not support the message type used. 
            Nodes with bNC.RWD set will return this status in response to a Remote Write request.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.FailedBadCrc">
            <summary>
            Transmission failed because of a bad CRC at the receiving node.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.FailedNodeRecBufferFull">
            <summary>
            Transmission failed because the receiving node’s receive buffer was full.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.GroupcastBroadcastPartylFailed10_20">
            <summary>
            For Groupcast and Broadcast messages, this is a possible result of ORing varying acknowledge values between receiving nodes 
            (e.g., one receiving node acknowledge is 0x10 and a second receiving node acknowledge is 0x20).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostSpyInfo.Ack25.GroupcastBroadcastPartylFailed11_20">
            <summary>
            For Groupcast and Broadcast messages, this is a possible result of ORing varying acknowledge values between receiving nodes 
            (e.g., one receiving node acknowledge is 0x10 and a second receiving node acknowledge is 0x21).
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Decode25Ack(System.UInt32)">
            <summary>
            Decode MOST 25 ACK value
            </summary>
            <param name="ack">MOST 25 ack value to be decoded</param>
            <remarks>Decoding according to SMSC and Vector documentation</remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Decode150Ack(System.UInt32)">
            <summary>
            Decode MOST 150 ACK value into this spy info
            </summary>
            <param name="ack">MOST 150 ACK to be decoded</param>
            <remarks>For MOST 150 Ok, Error,CrcError, BufferError and PreTerminated flags are extracted from ACK value</remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.Decode150PAckCAck(System.Byte,System.Nullable{System.Byte})">
            <summary>
            Deckode PAck and CAck values into this spy info
            </summary>
            <param name="pAck">Pre ACK</param>
            <param name="cAck">CRC/Complete ACK, may be invalid/missing</param>
            <remarks>Method converst PAck and CAck to Ack and then decodes Ack value</remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostSpyInfo.AckFromPAckCAck(System.Byte,System.Nullable{System.Byte})">
            <summary>
            Calculate MOST 150 Ack from PAck and CAck values
            </summary>
            <param name="pAck">Pre ACK</param>
            <param name="cAck">CRC/Complete ACK, may be invalid/missing</param>
            <returns>Calculated ACK value</returns>
            <remarks>
            Method maps some bits from PAck and CAck to Ack, undefined CAck is interpreted as pre terminated
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Most.ILightControl">
            <summary>
            Interface for MOST Light Control
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.ILightControl.On">
            <summary>
            Switch on the Light
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.ILightControl.Off">
            <summary>
            Switch off the light.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostChannelAccessNode">
            <summary>
            Common interface for MOST node channel accesses
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChannelAccessNode.Sbc">
            <summary>
            Synchronous Bandwith Control
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChannelAccessNode.GroupAddress">
            <summary>
            MOST node group address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChannelAccessNode.MostStress">
            <summary>
            Gets the class, which implements MOST stress functionalities.
            </summary>
            <value>The MOST stress implementation class.</value>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostChannelAccessNode.LightControl">
            <summary>
            Get object, which implements Light control functionalities.
            </summary>
            <value>The Light control implementation</value>
        </member>
        <member name="T:ET.FW.Hal.Most.MostMessageFactory">
            <summary>
            ET Framework factory for MOST messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostMessageFactory.Instance">
            <summary>
            The only one MOST message factory
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostMessageFactory.MessageType">
            <summary>
            Represents the MOST message types.
            </summary>
            <remarks>
            TAKE CARE:
            Enum value must match index of corresponding message types in 'types' array
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Undefined">
            <summary>Message type undefined</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Message">
            <summary>MOST message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.LightLockEvent">
            <summary>Light and Lock</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.AddressEvent">
            <summary>Address event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.MprEvent">
            <summary>MPR event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.MdrEvent">
            <summary>MDR event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.NprEvent">
            <summary>NPR event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.NdrEvent">
            <summary>NDR event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.SbcEvent">
            <summary>SBC event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.AllocationEvent">
            <summary>Allocation event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Spy">
            <summary>MOST Spy message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Ethernet">
            <summary>Ethernet Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Cms">
            <summary>CMS message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Ams">
            <summary>AMS message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Data">
            <summary>Packet data message </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.ControlData">
            <summary>Control data message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.UserData">
            <summary>User data message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Mhp">
            <summary>MOST High message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.ResourceAllocate">
            <summary>Allocate system message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.ResourceDeallocate">
            <summary>Deallocate system message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.RemoteRead">
            <summary>Remote Read system message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.RemoteWrite">
            <summary>Remote Write system message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.RemoteGetSource">
            <summary>Remote Get Source system message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.System">
            <summary>Unspecified System message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.MhpErrorEvent">
            <summary>MOST High error event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.MostEthernet">
            <summary>MOST Ethernet Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.SyncAllocTable">
            <summary>Sync allocation table event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Allocate">
            <summary>Allocate event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Deallocate">
            <summary>Deallocate event</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.MessageType.Error">
            <summary>Common error event</summary>
        </member>
        <member name="P:ET.FW.Hal.Most.MostMessageFactory.Types">
            <summary>
            List of all supported types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostMessageFactory.types">
            <summary>
            Array of all supported message types
            </summary>
            <remarks>
            TAKE CARE:
            Array index must match corresponding MessageType enum value - 1
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageFactory.#ctor">
            <summary>
            Private constructor, to avoid explicit instantiation
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageFactory.SerializeMessage(ET.FW.Core.Messaging.IMessage,System.IO.BinaryWriter)">
            <summary>
            Write given message to stream
            </summary>
            <param name="message">message to serialize</param>
            <param name="writer">writer to access the stream</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageFactory.DeserializeMessage(System.IO.BinaryReader,ET.FW.Core.Messaging.IProtocol,System.Int32)">
            <summary>
            Read message from stream
            </summary>
            <param name="reader">reader to access the stream</param>
            <param name="protocol">protocol which is assigned to the message</param>
            <param name="length">length of message data in bytes</param>
            <returns>the restored message or null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageFactory.ConvertControlMessage(ET.FW.Core.Messaging.IMessage@)">
            <summary>
            Special handling for sytem messages
            All control messages are deserialized to CMS data type, this method converts system messages to correct type.
            </summary>
            <param name="message">CMS message to check and convert</param>
        </member>
        <member name="M:ET.FW.Hal.Most.MostMessageFactory.ConverDataMessage(ET.FW.Core.Messaging.IMessage@)">
            <summary>
            Special handling for data messages
            All data messages are deserialized to control data type, this method converts other data messages to correct type.
            </summary>
            <param name="message">control data message to check and convert</param>
        </member>
        <member name="T:ET.FW.Hal.Most.MostTiming">
            <summary>
            Determinates the timing behavior of the device (device mode).
            </summary>
            <remarks>
            Enumeration is used for node and StressNIC device mode.
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.Undefined">
            <summary>
            Undefined start value
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.Slave">
            <summary>
            The device will act as timing slave on the MOST bus.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.Master">
            <summary>
            The device will act as timing master on the MOST bus. If the MOST ring is opened, the bus stays offline until the manual restart.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.StaticMaster">
            <summary>
            The device will act as timing master on the MOST bus. If the MOST ring is opened, the master will try to restart automatically.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.Spy">
            <summary>Alterantive text for Bypass</summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.ActiveBypass">
            <summary>
            The device is transparent from the network’s point of view. In active bypass all data is bypassed and additionally streamed to Rx.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.MostTiming.Bypass">
            <summary>
            The device will be invisible to the MOST bus. The device will not be able to receive or send on the MOST bus.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostInterface">
            <summary>
            Base interface for MOST bus access, interface holds members which are common to node and spy
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.Bitrate">
            <summary>
            MOST bitrate in MBit/s (25/50/150)
            </summary>
            <value>bitrate, 0 if unknown</value>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.LightLockState">
            <summary>
            Light and lock state of MOST bus
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.Mpr">
            <summary>
            Number of MOST devices (Maximum Position Register)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.Sbc">
            <summary>
            Most boundary (Synchronous Boundary Control)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.AmsProtocol">
            <summary>
            MOST AMS Protocol (protocol for segmented control messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.AdsProtocol">
            <summary>
            MOST ADS Protocol (base protocol for async messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.CmsProtocol">
            <summary>
            MOST CMS Protocol (for normal control messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.HighProtocol">
            <summary>
            MOST High Protocol (based on async messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.EventProtocol">
            <summary>
            Protocol for MOST event pseudo messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.SystemProtocol">
            <summary>
            MOST 25 System Protocol (for control system messages)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostInterface.MepProtocol">
            <summary>
            MOST 150 ethernet protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostNode">
            <summary>
            MOST node, interface is base on IMostInterface and contains additional node specific fields
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostNode.Npr">
            <summary>
            PC Ring position (Node Position Register)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostNode.NodeAddress">
            <summary>
            Node address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostNode.MostStress">
            <summary>
            Gets the object, which implements MOST stress functionalities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.IMostNode.ActivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.IMostNode.DeactivateBypass">
            <summary>
            Activates the bypass of the MOST Node.
            </summary>
            <returns>true if everthing is OK</returns>
        </member>
        <member name="M:ET.FW.Hal.Most.IMostNode.SetNodeAddress(System.UInt16)">
            <summary>
            Set new Logical Node address
            </summary>
            <param name="nodeAddress">Logical node address to set</param>
            <returns> <c>true</c> on success</returns>
        </member>
        <member name="P:ET.FW.Hal.Most.IMostNode.LightControl">
            <summary>
            Gets the object, which implements LightControl
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.IMostSpy">
            <summary>
            MOST spy, Interface is based on IMostInterface and contains additional spy specific fields
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.Most.Error("An error occured");
            </code></example>
        </member>
        <member name="P:ET.FW.Hal.Most.Log.Most">
            <summary>
            Logger with code "Most"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.MostBus">
            <summary>
            Obsolete MOST bus implementation combining Node and Spy functionality
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.MostBus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.MostBus" /> class.
            </summary>
            <param name="name">bus name</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostBusloadStress">
            <summary>
            Stress test, which generate high busload on the MOST bus.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostBusloadStress.StartStressBusload(System.UInt16,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Starts the stress test, which generate high busload.
            </summary>
            <param name="targetAddress">The target address.</param>
            <param name="count">The amount of messages to generate.</param>
            <param name="delay">The delay between the messages in milliseconds.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelay">The delay between the retries in milliseconds.</param>
            <param name="incrementPos">The increment value, which is added each time a message is generated.</param>
            <param name="mostMessage">The most message to start with.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostBusloadStress.StopStressBusload">
            <summary>
            Stops the stress test, which generate high busload.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostBusloadStress.IsStressBusloadStarted">
            <summary>
            Determines whether the busload MOST stress test is started.
            </summary>
            <returns>
            	<c>true</c> if the busload stress test is started; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.MostIlluminationLevel">
            <summary>
            Indicates the brightness of the MOST LED.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Stress.MostIlluminationLevel.Full">
            <summary>
            Maximum brightness of the LED (default).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Stress.MostIlluminationLevel.Half">
            <summary>
            Medium brightness of the LED (-3dB).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Stress.MostIlluminationLevel.Off">
            <summary>
            Disabled MOST Led.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Most.Stress.MostIlluminationLevel.NotSet">
            <summary>
            No Illumination level was set.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostIlluminationStress">
            <summary>
            Reduces the illumination level of the MOST LED.
            This test can be used to simulate bad MOST wires.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Stress.IMostIlluminationStress.StressIlluminationLevel">
            <summary>
            Sets the illumination of the MOST LED to full brightness.
            </summary>
            <value>The stress illumination level.</value>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostLightStress">
            <summary>
            Stress test,which toggle the MOST light cyclic on and off.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLightStress.StartStressLight(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Starts the stress test, which toggle the MOST light cyclic on and off.
            </summary>
            <param name="onTime">The on time in milliseconds.</param>
            <param name="offTime">The off time in milliseconds.</param>
            <param name="count">The count of on/off cycles.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLightStress.StopStressLight">
            <summary>
            Stops the stress test, which toggle the MOST light cyclic on and off.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLightStress.IsStressLightStarted">
            <summary>
            Determines whether the light MOST stress test is started.
            </summary>
            <returns>
            	<c>true</c> if the light stress test is started; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLightStress.StartStressLightSynchronously(System.UInt16,System.UInt16,System.UInt32,System.Int32)">
            <summary>
            Starts the stress test, which toggle the MOST light cyclic on and off. and waits untill the stress is completed
            </summary>
            <param name="onTime">The on time in milliseconds</param>
            <param name="offTime">The off time in milliseconds</param>
            <param name="count">The count of on/off cycles</param>
            <param name="duration">Waiting time for start stress light in milliseconds</param>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostLockStress">
            <summary>
            Stress test, which generate cyclic lock and unlocks on the MOST bus.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLockStress.StartStressLock(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Starts the stress test, which generate cyclic lock and unlocks on the MOST bus.
            </summary>
            <param name="lockTime">The time in milliseconds, which the MOST bus remains in locked state.</param>
            <param name="unlockTime">The time in milliseconds, which the MOST bus remains in unlocked state.</param>
            <param name="count">The count of on/off cycles.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLockStress.StopStressLock">
            <summary>
            Stops the stress test, which generate cyclic lock and unlocks on the MOST bus.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostLockStress.IsStressLockStarted">
            <summary>
            Determines whether the lock MOST stress test is started.
            </summary>
            <returns>
            	<c>true</c> if the Lock stress test is started; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostMprStress">
            <summary>
            Stress test, which generate MPR + and - on the MOST bus.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostMprStress.GenerateMprPulse(System.UInt32)">
            <summary>
            Generates one MPR change.
            </summary>
            <param name="mprTimeMilliseconds">The MPR change in milliseconds.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostMprStress.GenerateMprChange(System.UInt32)">
            <summary>
            Starts the stress test, which generate a Mpr change on the MOST bus.
            </summary>
            <param name="mprTimeMilliseconds">The MPR time milliseconds.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostMprStress.IsMprChangeStarted">
            <summary>
            Determines whether [is MPR change started].
            </summary>
            <returns>
            	<c>true</c> if [is MPR change started]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IMostStress">
            <summary>
            Basis MOST stress test interface, which all other MOST sress tests derive from.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.IMostStress.Stop">
            <summary>
            Stops all running stress tests.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.IStressNic">
            <summary>
            Interface for access to StressNIC properties
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Most.Stress.IStressNic.Npr">
            <summary>
            Node position of StressNIC
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Most.Stress.MprStress">
            <summary>
            Hardware independant implementation for MPR/bypass stress
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.#ctor(ET.FW.Hal.Most.IMostChannelAccessNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Most.Stress.MprStress" /> class.
            </summary>
            <param name="node">MOST node channel access</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.GenerateMprChange(System.UInt32)">
            <summary>
            Starts the stress test, which generates Mpr changes on the MOST bus.
            </summary>
            <param name="mprTimeMilliseconds">The time between MPR changes in milliseconds.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.mprTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the Elapsed event of the mprTimer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.IsMprChangeStarted">
            <summary>
            Determines whether [is MPR change started].
            </summary>
            <returns>
            	<c>true</c> if [is MPR change started]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.Stop">
            <summary>
            Stops all running stress tests.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.GenerateMprPulse(System.TimeSpan)">
            <summary>
            Generates one MPR change.
            </summary>
            <param name="duration">MPR pulse duration</param>
        </member>
        <member name="M:ET.FW.Hal.Most.Stress.MprStress.GenerateMprPulse(System.UInt32)">
            <summary>
            Generates one MPR change.
            </summary>
            <param name="mprTimeMilliseconds">The MPR change in milliseconds.</param>
        </member>
    </members>
</doc>
