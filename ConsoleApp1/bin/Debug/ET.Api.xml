<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.Api</name>
    </assembly>
    <members>
        <member name="T:ET.Api.AmplitudeResult">
            <summary>
            AmplitudeResult - contains as members audioChannel, and the values of the corresponding frequency amplitudes.
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.audioChannel">
            <summary>
            audio channel
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.volume">
            <summary>
            volume [0..100] - average of all samples
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.volumePeak">
            <summary>
            volume Peak [0..100] - peak of all samples
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.frequenciesVolume">
            <summary>
            volume [0..100] - average volume of all defined frequencies
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.frequenciesVolumePeak">
            <summary>
            volume [0..100] - peak of all defined frequencies
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.amplitudes">
            <summary>
            Amplitude values for all known frequencies.<para></para>
            Call audioprocessing.GetClonedKnownFrequencies() to get the known frequencies.<para></para>
            Example:<para></para>
            Frequency of amplitude[0] is the frequency set in audioprocessing.GetClonedKnownFrequencies()[0];<para></para>
            </summary>
        </member>
        <member name="F:ET.Api.AmplitudeResult.noiselevels">
            <summary>
            noise value for each amplitude
            </summary>
        </member>
        <member name="P:ET.Api.AmplitudeResult.Samples">
            <summary>
            Samples (raw data) from capture device
            </summary>
            <remarks>be only setted, if enable in configuration</remarks>
        </member>
        <member name="T:ET.Api.AudioBitPattern">
            <summary>
            AudioBitPattern - contains the found bit pattern of audioSource, Dtmf and metaID and bitPatternString,
            combined from all existing bit pattern
            </summary>
        </member>
        <member name="F:ET.Api.AudioBitPattern.audioSourcePattern">
            <summary>
            audioSourcePattern
            </summary>
        </member>
        <member name="F:ET.Api.AudioBitPattern.dtmfPattern">
            <summary>
            dtmfPattern
            </summary>
        </member>
        <member name="F:ET.Api.AudioBitPattern.metaIdPattern">
            <summary>
            metaIdPattern
            </summary>
        </member>
        <member name="M:ET.Api.AudioBitPattern.#ctor">
            <summary>
            AudioBitPattern()
            </summary>
        </member>
        <member name="M:ET.Api.AudioBitPattern.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            AudioBitPattern
            </summary>
            <param name="audioSourcePattern">The audio source pattern.</param>
            <param name="dtmfPattern">The DTMF pattern.</param>
            <param name="metaIdPattern">The meta id pattern.</param>
        </member>
        <member name="T:ET.Api.AudioChannel">
            <summary>
            AudioChannel - contains all native and virtual channels
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.NotSet">
            <summary>
            Not Set
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverFrontLeft">
            <summary>
            DriverFrontLeft - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverFrontRight">
            <summary>
            DriverFrontRight - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverRearLeft">
            <summary>
            DriverRearLeft - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverRearRight">
            <summary>
            DriverRearRight - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.PassengerLeft">
            <summary>
            PassengerLeft - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.PassengerRight">
            <summary>
            PassengerRight - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse1Left">
            <summary>
            Rse1Left - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse1Right">
            <summary>
            Rse1Right - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse2Left">
            <summary>
            Rse2Left - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse2Right">
            <summary>
            Rse2Right - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.IC">
            <summary>
            IC - can only be used as native channel; no mapped virtual one
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Pass">
            <summary>
            Pass - can only be used as native channel; no mapped virtual one
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverFront">
            <summary>
            DriverFront - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverRear">
            <summary>
            DriverRear - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverLeft">
            <summary>
            DriverLeft - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.DriverRight">
            <summary>
            DriverRight - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Driver">
            <summary>
            Driver - virtual channel - 4 native channels
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Passenger">
            <summary>
            Passenger - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse1">
            <summary>
            Rse1 - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Rse2">
            <summary>
            Rse2 - virtual channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.MostLeft">
            <summary>
            Most Left - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.MostRight">
            <summary>
            Most Right - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Most">
            <summary>
            Most (virtual, left and right)
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom1Left">
            <summary>
            Custom 1 Left - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom1Right">
            <summary>
            Custom 1 Right - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom1">
            <summary>
            Custom 1 (virtual, left and right)
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom2Left">
            <summary>
            Custom 2 Left - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom2Right">
            <summary>
            Custom 2 Right - native channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioChannel.Custom2">
            <summary>
            Custom 2 (virtual, left and right)
            </summary>
        </member>
        <member name="T:ET.Api.AudioResult">
            <summary>
            AudioResult - contains as members audioChannel, audio Source, metaId and the audio bit pattern.
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.audioChannel">
            <summary>
            audio channel
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.bitPattern">
            <summary>
            bitPattern
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.audioSource">
            <summary>
            audioSource - last received audio source from AudioProcessing
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.dtmfSource">
            <summary>
            dtmfSource - last received audio source from AudioProcessing
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.stable">
            <summary>
            Sound is verified by more than one sampling
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.silence">
            <summary>
            Max amplitude in sample is below defined limit
            </summary>
        </member>
        <member name="F:ET.Api.AudioResult.AverageAmplitude">
             <summary>
            Average amplitude
             </summary>
        </member>
        <member name="F:ET.Api.AudioResult.audibleSince">
            <summary>
            Sound is first seen in sample starting at this time
            </summary>
        </member>
        <member name="M:ET.Api.AudioResult.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">object to compare</param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.AudioResult.GetHashCode">
            <summary>
            gets hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:ET.Api.AudioResult.IsBitPatternEquals(ET.Api.AudioResult)">
            <summary>
            Is bittpattern equals
            </summary>
            <param name="result">result to compare</param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.AudioResult.Copy(ET.Api.AudioResult)">
            <summary>
            Copy result
            </summary>
            <param name="result">result to copy</param>
        </member>
        <member name="M:ET.Api.AudioResult.Clone">
            <summary>
            Clones result
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.BoolEventArgs">
            <summary>
            Eventargs just containing a bool-value
            </summary>
        </member>
        <member name="M:ET.Api.BoolEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.Api.BoolEventArgs"/> class.
            </summary>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="P:ET.Api.BoolEventArgs.NewValue">
            <summary>
            The new Bool-value
            </summary>
        </member>
        <member name="T:ET.Api.Busses">
            <summary>
            Direct access to busses for direct message handling
            </summary>
        </member>
        <member name="P:ET.Api.Busses.MostNode">
            <summary>
            Access MOST bus node
            </summary>
            <value>MOST node object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.MostSpy">
            <summary>
            Access MOST bus spy
            </summary>
            <value>MOST spy object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.BodyCan">
            <summary>
            Access Body CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.BackboneCan">
            <summary>
            Access Backbone CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.HmiCan">
            <summary>
            Access HMI CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.HeadunitCan">
            <summary>
            Access Headunit CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.Headunit1Can">
            <summary>
            Access Headunit CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.Headunit2Can">
            <summary>
            Access Headunit CAN
            </summary>
            <value>CAN bus object or null if bus is not configured</value>
        </member>
        <member name="P:ET.Api.Busses.DiagCan">
            <summary>
            Access to Diagnostics CAN bus instance
            </summary>
        </member>
        <member name="P:ET.Api.Busses.HybridCan">
            <summary>
            Access to Hybrid CAN bus instance
            </summary>
        </member>
        <member name="P:ET.Api.Busses.Hmi2Can">
            <summary>
            Access to Hmi2Can bus instance
            </summary>
        </member>
        <member name="T:ET.Api.Can.HilID.HilID">
            <summary>
            Class representing a HilID
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.HilID.IsWarning">
            <summary>
            Returns, whether this HilID represents a warning.
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.HilID.EMPTY">
            <summary>
            Empty HilID (0x000000)<para></para>
            Every time this Property is requested a new Empty HilID is created and returned to avoid unintended changes.<para></para>
            If this value is needed for several comparisons or sth. similar, it should be stored in
            a property of the requestor to avoid unnecessary CPU-load.
            </summary>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.#ctor(System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="hilID">The numeric value of the HilID</param>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.#ctor(System.String)">
            <summary>
            Constructor. Throws an exception, if the given hilID-string cannot be
            converted to UInt64.
            </summary>
            <param name="hilID">HilID as string, looking like "0x010100"</param>
        </member>
        <member name="P:ET.Api.Can.HilID.HilID.HilIDValue">
            <summary>
            Numeric value of this HilID
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.HilID.HilIDString">
            <summary>
            String representation of this HilID,
            e.g. 0x000000
            </summary>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.Equals(System.Object)">
            <summary>
            Checks HilIDValue for equality
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.GetHashCode">
            <summary>
            returns the Hashcode of HilIDValue
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.op_Equality(ET.Api.Can.HilID.HilID,ET.Api.Can.HilID.HilID)">
            <summary>
            ==
            </summary>
            <param name="hil1">the one HilID</param>
            <param name="hil2">the other HilID</param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.op_Inequality(ET.Api.Can.HilID.HilID,ET.Api.Can.HilID.HilID)">
            <summary>
            !=
            </summary>
            <param name="hil1">the one HilID</param>
            <param name="hil2">the other HilID</param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Can.HilID.HilID.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Can.HilID.HilIDChangedEventArgs">
            <summary>
            Eventsargs delivered from HilID-service, after hilID changed.
            </summary>
        </member>
        <member name="M:ET.Api.Can.HilID.HilIDChangedEventArgs.#ctor(ET.Api.Can.HilID.HilID,ET.Api.Can.HilID.HilID,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="oldHilID">The old HilID</param>
            <param name="newHilID">The new HilID</param>
            <param name="timeStamp">Timestamp of the new HilID</param>
        </member>
        <member name="P:ET.Api.Can.HilID.HilIDChangedEventArgs.TimeStamp">
            <summary>
            Timestamp of the new HilID
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.HilIDChangedEventArgs.OldHilID">
            <summary>
            The old HilID
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.HilIDChangedEventArgs.NewHilID">
            <summary>
            The new HilID
            </summary>
        </member>
        <member name="M:ET.Api.Can.HilID.HilIDChangedEventArgs.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Can.HilID.IHilIDService">
            <summary>
            Interface for HilID-Service
            </summary>
        </member>
        <member name="P:ET.Api.Can.HilID.IHilIDService.LastHilIDEvent">
            <summary>
            The last detected HilIDChangedEvent
            </summary>
        </member>
        <member name="E:ET.Api.Can.HilID.IHilIDService.HilIDChangedEvent">
            <summary>
            Event, which becomes raised when a new HilID is available
            </summary>
        </member>
        <member name="T:ET.Api.Can.HilID.HilIDChangedEventHandler">
            <summary>
            Delegate for HilID-Event
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:ET.Api.Can.ICanDevice">
            <summary>
            Allows access to a CAN device.
            </summary>
        </member>
        <member name="T:ET.Api.Can.Responder.Function">
            <summary>
            Holds all relelevant data related to a function
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.Function.SignalMappings">
            <summary>
            All signal mappings
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.Function.Name">
            <summary>
            Function Name
            </summary>
        </member>
        <member name="T:ET.Api.Can.Responder.ICanResponderService">
            <summary>
            Interface for Can signal responder service
            </summary>
        </member>
        <member name="M:ET.Api.Can.Responder.ICanResponderService.AddFunction(ET.Api.Can.Responder.Function,System.Int32)">
            <summary>
            Add signal mapping function
            </summary>
        </member>
        <member name="M:ET.Api.Can.Responder.ICanResponderService.RemoveFunction(ET.Api.Can.Responder.Function)">
            <summary>
            Remove signal mapping function 
            </summary>
        </member>
        <member name="M:ET.Api.Can.Responder.ICanResponderService.UpdateFunction(ET.Api.Can.Responder.Function)">
            <summary>
            Update signal mapping function
            </summary>
        </member>
        <member name="M:ET.Api.Can.Responder.ICanResponderService.GetAvailableCanResponderFunctions">
            <summary>
            Available can signal mapping functions
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Can.Responder.SignalMapping">
            <summary>
            Defines a CAN signal responder Mapping
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalMapping.SignalValues">
            <summary>
            All Mapping signals
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalMapping.Name">
            <summary>
            Function Name
            </summary>
        </member>
        <member name="T:ET.Api.Can.Responder.SignalValue">
            <summary>
            Class for Signal Name and value 
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalValue.Name">
            <summary>
                The signal name
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalValue.Value">
            <summary>
                The signal value
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalValue.IsTrigger">
            <summary>
                Is it a trigger signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.Responder.SignalValue.BusName">
            <summary>
                The bus name
            </summary>
        </member>
        <member name="T:ET.Api.Can.IObservableCanMessage">
            <summary>
            The observable CAN message. The message simulation can be started and stopped via Start()/Stop(). Running indication via IsRunning;
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanMessage.Definition">
            <summary>
            The CAN message definition parameters
            </summary>
        </member>
        <member name="T:ET.Api.Can.IObservableCanRawSignal">
            <summary>
            Dynamic raw value (bitwise) interface of a CAN signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanRawSignal.IsReadOnly">
            <summary>
            Core.States if value of the signal is read only 
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanRawSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="M:ET.Api.Can.IObservableCanRawSignal.SynchronizedSet(System.UInt64)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            canService.TrySetSynchronizedSignals(
            	canService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	canService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	canService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that can be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Can.IObservableCanRawSignal.Validate(System.UInt64)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Can.IObservableCanRawSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanRawSignal.Timestamp">
            <summary>
            The last timestamp, that the CAN-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Can.IObservableCanSignalGroup">
            <summary>
            API for observable CAN signal groups
            A signal group handles a number of CAN signals which belong together.
            All signals of a group are part of the same CAN message.
            Read methods and events ensure that signal values are taken from one received CAN message
            Write methods ensures that all signal values are changed simultaneously in one transmitted message.
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignalGroup.MessageDefinition">
            <summary>
            Definition of message containing all signals of group;
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignalGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether this signal group is read only.
            Group is read only the message containing all signals is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            <remarks>
            Even if the group is not read only, an included signal might be read only if it belongs to an inactive signal group.
            </remarks>
        </member>
        <member name="T:ET.Api.Can.IObservableCanSignalValue`1">
            <summary>
            Public API for access to CAN signal values.
            Interface extends the ObservableOject interface to provide access to the actual API side value. 
            API-side value may differ from value, if it is currently waiting for transmission.
            </summary>
            <remarks>
            Value property setter sets the API side value, which then is included in the next message transmission.
            Value property getter and Changed event use the last signal value signaled from the CAN hardware.
            ApiSideValue property holds latest set value. It may be different from current Value as long as a changed value is not transmitted.
            </remarks>
            <typeparam name="T">Type of observable CAN signal value</typeparam>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignalValue`1.ApiSideValue">
            <summary>
            Access to actual API side value.
            </summary>
            <remarks>
            Latest signal value set via the Value property.
            API-side value may differ from current Value, if it is waiting for transmission.
            </remarks>
        </member>
        <member name="T:ET.Api.Can.ISynchronizedSetter">
            <summary>
            Supports the synchronized setting of object values.
            </summary>
        </member>
        <member name="M:ET.Api.Can.ISynchronizedSetter.Set">
            <summary>
            Do the set action.
            </summary>
            <returns><c>true</c>, if action was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Can.ISynchronizedSetter.IsSignalMultiplexor">
            <summary>
            Is signal multiplexor
            </summary>
        </member>
        <member name="T:ET.Api.Can.Language.ILanguageService">
            <summary>
            Interface for a LanguageService
            </summary>
        </member>
        <member name="M:ET.Api.Can.Language.ILanguageService.GetLastEvent(ET.Api.Can.Language.LanguageUnitEnum)">
            <summary>
            Returns the last LanguageChangedEvent for the passed unit
            or null, if there has not been such an event yet.
            </summary>
            <param name="unit">The unit for which the last LangaugeChangedEventArgs are requested.</param>
            <returns>see summary</returns>
        </member>
        <member name="E:ET.Api.Can.Language.ILanguageService.LanguageChangedEvent">
            <summary>
            The event which is triggered, when the language of
            a supported unit changed.
            </summary>
        </member>
        <member name="T:ET.Api.Can.Language.LangaugeChangedEvent">
            <summary>
            A delegate for the langaugeChangedEvent
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="eventArgs">The eventArgs</param>
        </member>
        <member name="T:ET.Api.Can.Language.LanguageChangedEventArgs">
            <summary>
            EventArgs for an ILanguageService
            </summary>
        </member>
        <member name="P:ET.Api.Can.Language.LanguageChangedEventArgs.Unit">
            <summary>
            The Unit this EventArgs refer to
            </summary>
        </member>
        <member name="P:ET.Api.Can.Language.LanguageChangedEventArgs.OldLanguage">
            <summary>
            The previously set language
            </summary>
        </member>
        <member name="P:ET.Api.Can.Language.LanguageChangedEventArgs.NewLanguage">
            <summary>
            The new language
            </summary>
        </member>
        <member name="P:ET.Api.Can.Language.LanguageChangedEventArgs.TimeStamp">
            <summary>
            The timeStamp, when the new language was detected.
            </summary>
        </member>
        <member name="T:ET.Api.Can.Language.LanguageUnitEnum">
            <summary>
            An enumeration containing a value for
            each unit which is observable by the LanguageService
            </summary>
        </member>
        <member name="F:ET.Api.Can.Language.LanguageUnitEnum.HU">
            <summary>
            The HeadUnit
            </summary>
        </member>
        <member name="F:ET.Api.Can.Language.LanguageUnitEnum.IC">
            <summary>
            The Instrumentcluster
            </summary>
        </member>
        <member name="T:ET.Api.Can.ICanSignals">
            <summary>
            CanSignals selection.
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanSignals.Item(System.String)">
            <summary>
            Get the CAN signal object
            </summary>
            <remarks>
            Ignored signals are not accessable.
            </remarks>
            <param name="signalName">the name of the CAN signal (from the dbc)</param>
            <returns>An observable CAN signal</returns>
        </member>
        <member name="M:ET.Api.Can.ICanSignals.Contains(System.String)">
            <summary>
            Indicates if the signal is available
            </summary>
            <param name="signalName">the name of the CAN signal (from the dbc)</param>
            <returns>true if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Can.ICanSignals.TryGetSignal(System.String,ET.Api.Can.IObservableCanSignal@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <param name="signalName">the name of the CAN signal (from the dbc)</param>
            <param name="signal">an observable CAN signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Can.ICanSignals.TryGetSignal``1(System.String,ET.Api.Can.IObservableCanSignal{``0}@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <typeparam name="BaseType">Specific type of the CAN signal.</typeparam>
            <param name="signalName">the name of the CAN signal (from the dbc)</param>
            <param name="signal">an observable CAN signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Can.ICanSignals.GetAllSignals">
             <summary>
            List of all Signals
             </summary>
        </member>
        <member name="T:ET.Api.Can.ICanSignalsBus">
            <summary>
            CanSignals bus access.
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanSignalsBus.Signals">
            <summary>
            Access to the signals
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanSignalsBus.Nodes">
            <summary>
            Access to the CAN nodes.
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanSignalsBus.NMProtocol">
            <summary>
            Nm protocol type.
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanSignalsBus.State">
            <summary>
            Indicates the bus nm state
            </summary>
        </member>
        <member name="T:ET.Api.Can.ICanService">
            <summary>
            CanSignals service. Allows access to all CAN signals in the framework directly or over busses selection.
            </summary>
        </member>
        <member name="P:ET.Api.Can.ICanService.Busses">
            <summary>
            Access to the CAN busses
            </summary>
        </member>
        <member name="M:ET.Api.Can.ICanService.TrySetSynchronizedSignals(ET.Api.Can.ISynchronizedSetter[])">
            <summary>
            Method to set signals synchronized. Trys to set all signals. If the signals not available, the setting will not be performed. 
            </summary>
            <example>
            canService.TrySetSynchronizedSignals(
            	canService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	canService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	canService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="signalSetterList">The list with all synchronized settings.</param>
            <returns><c>true</c>, if setting was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Can.ICanService.CreateSignalGroup(ET.Api.Can.IObservableCanSignal[])">
            <summary>
            Creates a group of signals which belong together.
            All signals of a group must be part of the same CAN message.
            </summary>
            <param name="signals">Signals which are combined to signal group, all signals must belong to same CAN message</param>
            <returns>The signal group, null if creation fails</returns>
        </member>
        <member name="M:ET.Api.Can.ICanService.CreateSignalGroup(System.String[])">
            <summary>
            Creates a group of signals which belong together.
            All signals of a group must be part of the same CAN message.
            </summary>
            <param name="signalNames">Names of signals which are combined to signal group, all signals must belong to same CAN message</param>
            <returns>
            The signal group, null if signal with given name is not found or group creation fails
            </returns>
        </member>
        <member name="T:ET.Api.Can.IObservableCanSignal">
            <summary>
            Dynamic string orientated CAN Signal interface
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Bus">
            <summary>
            Belonging bus
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Unit">
            <summary>
            Unit of the signal value
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.IsReadOnly">
            <summary>
            value of the signal is read only.
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.IsSimulated">
            <summary>
            The signal is simulated, if the presence of the message is simulated
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Type">
            <summary>
            Value type of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.MinDelayTime">
            <summary>
            Get min delay time for signal
            </summary>
        </member>
        <member name="M:ET.Api.Can.IObservableCanSignal.SynchronizedSet(System.String)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            canService.TrySetSynchronizedSignals(
            	canService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	canService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	canService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that can be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Can.IObservableCanSignal.Validate(System.String)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Raw">
            <summary>
            Access to the raw values (bitwise) of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Message">
            <summary>
            CAN message access
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal.Timestamp">
            <summary>
            The last timestamp, that the CAN-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Can.IObservableCanSignal`1">
            <summary>
            Dynamic type specific interface of the CAN signal
            </summary>
            <typeparam name="BaseType">Specific type of the CAN signal</typeparam>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal`1.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal`1.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal`1.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="M:ET.Api.Can.IObservableCanSignal`1.SynchronizedSet(`0)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            canService.TrySetSynchronizedSignals(
            	canService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	canService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	canService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that can be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Can.IObservableCanSignal`1.Validate(`0)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Can.IObservableCanSignal`1.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.HeadUnitPositions">
            <summary>
            Positions of the HeadUnit in the ALTERO robot.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DiscHandling.HeadUnitPositions.None">
            <summary>
            Invalid HeadUnit Position
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DiscHandling.HeadUnitPositions.Top">
            <summary>
            Top HeadUnit Position
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DiscHandling.HeadUnitPositions.Bottom">
            <summary>
            Bottom HeadUnit Position
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.IDiscHandlingDriver">
            <summary>
            Interface definition of the ALTERO robot driver.
            </summary>
        </member>
        <member name="E:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.ResetStatusChanged">
            <summary>
            Sends information about the current reset status. <c>value</c> in percent. -1 on error.
            <c>text</c> describes the current state or an error message.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LightBarrierBottomHeadUnitState">
            <summary>
            Returns the state of the bottom HeadUnit light barrier. True if interrupted.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LightBarrierTopHeadUnitState">
            <summary>
            Returns the state of the top HeadUnit light barrier. True if interrupted.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberClosed">
            <summary>
            <c>true</c>, if the grabber hand is closed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberClosing">
            <summary>
            <c>true</c>, if the grabber hand is closing; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberInErrorState">
            <summary>
            <c>true</c>, if the grabber hand is blocked; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberOpen">
            <summary>
            <c>true</c>, if the grabber hand is open; otherwise, <c>false</c>.
            </summary>
            <remarks>Could also be moving!</remarks>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberOpening">
            <summary>
            <c>true</c>, if the grabber hand is opening; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberSensorFrontPressed">
            <summary>
            <c>true</c>, if the front grabber sensor is pressed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsGrabberSensorInnerPressed">
            <summary>
            <c>true</c>, if the inner grabber sensor is pressed; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorBackLeftOpen">
            <summary>
            <c>true</c>, if the left back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorBackLowerOpen">
            <summary>
            <c>true</c>, if the lower back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorBackRightOpen">
            <summary>
            <c>true</c>, if the right back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorBackUpperOpen">
            <summary>
            <c>true</c>, if the upper back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorFrontLeftOpen">
            <summary>
            <c>true</c>, if the left front door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsDoorFrontRightOpen">
            <summary>
            <c>true</c>, if the right front door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsLightBarrierBottomInterrupted">
            <summary>
            <c>true</c>, if the bottom lightbarrier is interrupted; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsLightBarrierTopInterrupted">
            <summary>
            <c>true</c>, if the top lightbarrier is interrupted; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsAdjustmentModeActive">
            <summary>
            Checks wether the adjustment mode is currently active. 
            Robot is allowed to move even when doors are open. However movement
            speed is lower than without adjustment mode.
            </summary>
            <returns>True, when robot is currently in adjustment mode.</returns>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsConnected">
            <summary>
            <c>true</c> if driver has an active connection to the robot; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsHorizontalAxisEndSwitchActive">
            <summary>
            <c>true</c>, if the horizontal axis end switch is active; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsMotorHorizontalMoving">
            <summary>
            <c>true</c>, if the motor in horizontal (y) axis is moving; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsMotorVerticalMoving">
            <summary>
            <c>true</c>, if the motor in vertical (z) axis is moving; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsInitialized">
            <summary>
            Returns a value when the robot has to reinitialize or initializisation is complete.
            True: initialized; False: not initialized;
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsInitializing">
            <summary>
            Returns a value indicating whether this instance is currently initializing.
            </summary>
            <value>
            <c>true</c> if this instance is initializing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsPowerOn">
            <summary>
            <c>true</c>, if the power is turned on; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsResetting">
            <summary>
            Inidicates wether the Robot is doing a reset now (and doesn`t allow any other process)
            </summary>
            <returns><c>true</c>, if it`s resetting right now</returns>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsTeachingModeActive">
            <summary>
            <c>true</c>, if the robot is in Teaching mode; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsVerticalAxisEndSwitchActive">
            <summary>
            <c>true</c>, if the vertical axis end switch is active; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorBottomPosition">
            <summary>
            Returns the current position of the lower actuator during the movement.
            A position value between 0 and 200 mm/10.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorBottomState">
            <summary>
            Returns the state of the bottom linear actuator.
            <c>true</c> when moving. <c>false</c> when standing.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorTopPosition">
            <summary>
            Returns the current position of the upper actuator during the movement.
            A position value between 0 and 200 mm/10.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorTopState">
            <summary>
            Returns the state of the top linear actuator.
            True when moving. False when standing.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalPosition">
            <summary>
            Returns the position of the motor in horizontal axis.
            A position value between 0 and 4500 mm/10.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalState">
            <summary>
            Returns the state of the motor in horizontal axis.
            0: Standing; 1: Moving; 2: Unknown error; 3: Calibration needed
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalPosition">
            <summary>
            Returns the position of the motor in vertical axis.
            A position value between 0 and 12200 mm/10.
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalState">
            <summary>
            Returns the state of the motor in vertical axis.
            0: Standing; 1: Moving; 2: Unknown error; 3: Calibration needed
            </summary>		
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.HeadUnitCount">
            <summary>
            Returns the maximum number of HeadUnits from the driver configuration.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.SetNtgType(ET.Api.Controls.DiscHandling.INTGType)">
            <summary>
            Set the current HeadUnit configuration to the robot driver instance.
            </summary>
            <param name="ntgType">The HeadUnit configuration.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.Close">
            <summary>
            Stops all actuators and terminates all running threads.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.Connect">
            <summary>
            Scans all available com ports to find the robot. 
            </summary>
            <returns><c>true</c>, if robot connected. <c>false</c>, if no robot was found.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.Connect(System.String)">
            <summary>
            Create a connection to a specific com port.
            Robot is always reset on connection. No matter if a correct reply is received.
            </summary>
            <param name="portName">The name of the port.</param>
            <returns><c>true</c>, if connected successfull; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.RobotReset">
            <summary>
            Starts resetting and calibration of the robot.
            The current status is sent by the ResetStatusChanged event.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetComPorts">
            <summary>
            Returns an array of available COM port names.
            </summary>
            <returns>Array of strings holding COM port names</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetDriverVersion">
            <summary>
            Returns the driver version.
            </summary>
            <returns>The version number of the driver.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetFirmwareVersion">
            <summary>
            Returns the firmware version of the connected robot.
            </summary>
            <returns>The firmware version of the connected robot.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetLightBarrierState(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Returns the state of the specified light barrier.
            </summary>
            <param name="huPosition">The <see cref="T:HeadUnitPositions"/> of the HeadUnit.</param>
            <returns><c>true</c>, if barrier is interrupted.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetLinearActuatorState(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Returns the state of the specified eject actuator.
            </summary>
            <param name="huPosition">The <see cref="T:HeadUnitPositions"/> of the HeadUnit.</param>
            <returns><c>true</c>, if pressed; otherwise; <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetPlatformHeight(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Gets the coordinates of the chosen platform
            </summary>
            <param name="index">The selected <see cref="T:HeadUnitPositions"/> in the ALTERO.</param>
            <returns>Height of Platform or -1 if a invalid platform was requested.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GetSerialNumber">
            <summary>
            Returns the serial number of the connected robot.
            </summary>
            <returns>A single number</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GrabberClose">
            <summary>
            Sends a signal to close the grabber.
            No errors checking is done.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.GrabberOpen">
            <summary>
            Sends a signal to open the grabber.
            No errors checking is done.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsHorizontalMovementAllowed(System.String@)">
            <summary>
            Checks wether the horizontal axis is allowed to move right now.
            </summary>
            <param name="message">Out: Holds a detailed message if moving is not allowed.</param>
            <returns>true, if movement is possible</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsLightBarrierInterrupted(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Returns the status of the lightbarrier depending on the HeadUnit position"/>.
            </summary>
            <param name="headUnitPosition">The <see cref="T:HeadUnitPositions"/> to check the light barrier.</param>
            <returns><c>true</c>, if lightbarrier is interrupted.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsOnWaitingPosition(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Evaluates if the robot is on waiting position
            </summary>
            <param name="headunit">The selected <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit.</param>
            <returns><c>true</c>, if robot is on waiting position, <c>false</c> if not so.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.IsVerticalMovementAllowed(System.String@)">
            <summary>
            Checks wether the vertical axis is allowed to move right now.
            </summary>
            <param name="message">Out: Holds a detailed message if moving is not allowed.</param>
            <returns><c>true</c>, if movement is possible.</returns>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorMoveTo(ET.Api.Controls.DiscHandling.HeadUnitPositions,System.Int32)">
            <summary>
            Moves the linear actuator at the specified HeadUnit. Precision +/- 1 mm.
            </summary>
            <param name="huPosition">The <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit to move to.</param>
            <param name="mmdiv10">In tenth of mm (mm/10). Must be between 0 and 200 mm/10</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorPressEject(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Moves the specified linear motor to eject position
            </summary>
            <param name="position">The selected <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorReleaseEject(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Moves the specified linear motor to release position
            </summary>
            <param name="position">The selected <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.LinearActuatorStop(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Commands the robot to stop the movement of the specified linear actuator.
            </summary>
            <param name="huPosition">The <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit to stop.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalMove(System.Int32)">
            <summary>
            Move motor in horizontal (y) direction. Distance in thenths of mm (mm/10).
            </summary>
            <param name="mmdiv10">Absolute position</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalMoveForwardToTray">
            <summary>
            Moves the horizontal axis (grabber) to a position (2650 mm/10) where 
            it can grab or release a cd to the tray tower.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalMoveToInsertPosition(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Move grabber to the position preparating for:
            - insert CD into drive
            - receive CD from eject drive
            </summary>
            <param name="headunit">The <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalMoveToWaitingPosition(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Move grabber to the position waiting for:
            - insert CD into drive
            - receive CD from eject drive
            </summary>
            <param name="headunit">The <see cref="T:ET.Api.Controls.DiscHandling.HeadUnitPositions"/> of the HeadUnit.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorHorizontalStop">
            <summary>
            Stops movement in horizontal (y) direction.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalMove(System.Int32)">
            <summary>
            Move motor in vertical (z) direction. Distance in thenths of mm (mm/10).
            Motor must be calibrated first!
            </summary>
            <param name="mmdiv10">Absolute position</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalMoveToHeadUnitPosition(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Robot's vertical axis drives to insertion position of specified tray. (position is higher than extract position!)
            </summary>
            <param name="headunit">The HeadUnitPosition. 0 is at the top, 1 the bottom one</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalMoveToTrayExtractPosition(System.Int32)">
            <summary>
            Robot's vertical axis drives to extract position of specified tray.
            </summary>
            <param name="tray">The Tray number. 1 is at the bottom, 23 at the top</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalMoveToTrayInsertPosition(System.Int32)">
            <summary>
            Robot's vertical axis drives to insertion position of specified tray. (position is higher than extract position!)
            </summary>
            <param name="tray">The Tray number. 1 is at the bottom, 23 at the top</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.MotorVerticalStop">
            <summary>
            Stops movement in vertical (z) direction.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.SetAdjustmentModeActive(System.Boolean)">
            <summary>
            Activates or deactivates the adjustment mode. When active, 
            the robot may drive with doors open with smaller movement speeds.
            Throws exception if there currently is no active connection to the robot.
            </summary>
            <param name="active">When true the mode is activated.</param>
        </member>
        <member name="M:ET.Api.Controls.DiscHandling.IDiscHandlingDriver.SetSerialNumber(System.Int32)">
            <summary>
            Saves a serial number to the EEPROM of the microcontroller.
            </summary>
            <param name="serial">The serial number to save.</param>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.IDoorSensorStates">
            <summary>
            Interface definitions for the door sensor states of the ALTERO robot.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsFrontRightOpen">
            <summary>
            <c>true</c>, if right front door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsBackRightOpen">
            <summary>
            <c>true</c>, if right back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsBackLowerOpen">
            <summary>
            <c>true</c>, if lower back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsBackUpperOpen">
            <summary>
            <c>true</c>, if upper back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsFrontLeftOpen">
            <summary>
            <c>true</c>, if left front door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsBackLeftOpen">
            <summary>
            <c>true</c>, if left back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsFrontTopOpen">
            <summary>
            <c>true</c>, if top front door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IDoorSensorStates.IsBackTopOpen">
            <summary>
            <c>true</c>, if top back door is open; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.IMetricPosition">
            <summary>
            Describes the positions where the HeadUnit is mounted to the platform in ALTERO.
            These measurements are shown in the calibration mode and have a purely descriptive 
            function of the ALTERO.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IMetricPosition.LengthPosition">
            <summary>
            Coordinate 2
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.IMetricPosition.SidePosition">
            <summary>
            Coordinate 1
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.INTGType">
            <summary>
            Describes the configuration of one HeadUnit within the ALTERO.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.INTGType.MetricPosition">
            <summary>
            Position of the HeadUnit on the measuring stripes
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.INTGType.Name">
            <summary>
            Name of the HeadUnit
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.INTGType.SlotPosition">
            <summary>
            Position of the Slot
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.SingleIntAndHuPositionEventHandler">
            <summary>
            Event delegate for events which which will send a single integer 
            and the position of the <see cref="T:HeadUnitPositions"/>.
            </summary>
            <param name="sender">The instance to the sender object.</param>
            <param name="e">EventArgs of type <see cref="T:ISingleIntAndTextEventArgs"/></param>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.ISingleIntAndHuPositionEventArgs">
            <summary>
            Definition of the SingleIntAndHuPositionEventArgs interface.
            </summary>
            <remarks>
            The SingleIntAndHuPositionEventArgs is used by events which will send a 
            single integer and the position of the <see cref="T:HeadUnitPositions"/>.
            </remarks>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISingleIntAndHuPositionEventArgs.Value">
            <summary>
            Get the value of the event.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISingleIntAndHuPositionEventArgs.HUPosition">
            <summary>
            Get the position of the HeadUnit in the ALTERO (Top or Bottom).
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.SingleIntAndTextEventHandler">
            <summary>
            Event delegate for events which will send a single integer and a status message.
            </summary>
            <param name="sender">The instance to the sender object.</param>
            <param name="e">EventArgs of type <see cref="T:ISingleIntAndTextEventArgs"/></param>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.ISingleIntAndTextEventArgs">
            <summary>
            Definition of the SingleIntAndTextEventArgs class.
            </summary>
            <remarks>
            The SingleIntAndTextEventArgs is used by events which will send a 
            single integer and a status message.
            </remarks>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISingleIntAndTextEventArgs.Value">
            <summary>
            Get the value of the event.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISingleIntAndTextEventArgs.Text">
            <summary>
            Get the text value.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.ISingleIntEventArgs">
            <summary>
            Definition of the SingleIntEventArgs class.
            </summary>
            <remarks>
            The SingleIntEventArgs is used by events which will send a single integer.
            </remarks>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISingleIntEventArgs.Value">
            <summary>
            Get the value of the event.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DiscHandling.ISlot">
            <summary>
            Describes the height of the drive slot (via platform) and the depth in 
            the horizontal axis until the drive moves the media from the grabber.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISlot.Depth">
            <summary>
            Depth of the slot: how far has the grabber to be moved horizontally
            </summary>
        </member>
        <member name="P:ET.Api.Controls.DiscHandling.ISlot.Height">
            <summary>
            Relative height of the Slot (independent of the platform height)
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IButtonMultipleHandling">
            <summary>
            Special interface for multiple click handling on IButton
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IButtonMultipleHandling.PreClickJob">
            <summary>
            Special pre click for buttons. This is used make multiple button clicks, if the device needs a special handling for multiple clicks.
            </summary>
            <returns>Pre click job</returns>
        </member>
        <member name="T:ET.Api.Controls.ICceTouchPad">
            <summary>
            Base interface for the CCE Controls for Ntg6 and above
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceTouchPad.TouchPad">
            <summary>
            Represents touchpad area.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceTouchPad.Return">
            <summary>
            Return button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceTouchPad.Bga">
            <summary>
            Bga button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceTouchPad.Home">
            <summary>
            Home button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ITouchPad">
            <summary>
            CCE Touchpad interface.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.PushTime">
            <summary>
            Default CCE push time
            </summary>
        </member>
        <member name="M:ET.Api.Controls.ITouchPad.Touch(System.Byte,System.Double,System.Double)">
            <summary>
            Indicates that the Touchpad area is touched.
            </summary>
            <param name="fingers">No of Fingers touched</param>
            <param name="x">X Co-ordinate in %</param>
            <param name="y">Y Co-ordinate in %</param>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.ZoomIn">
            <summary>
            Zoom In button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.ZoomOut">
            <summary>
            Zoom Out button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.RotateCw">
            <summary>
            Rotate Cw button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.RotateCcw">
            <summary>
            Rotate Cccw button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ITouchPad.Press">
            <summary>
            Touchpad press button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ZoomState">
            <summary>
            Zoomstate for touchpad
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ZoomState.ZoomIn">
            <summary>
            Zoom In 
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ZoomState.ZoomOut">
            <summary>
            Zoom Out
            </summary>
        </member>
        <member name="T:ET.Api.Controls.RotateState">
            <summary>
            Zoomstate for touchpad
            </summary>
        </member>
        <member name="F:ET.Api.Controls.RotateState.CW">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="F:ET.Api.Controls.RotateState.CCW">
            <summary>
            Counter Clockwise
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICtrlU">
            <summary>
            The Interface for the "CTRL_U Gen20xi3"
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Parkman">
            <summary>
            Parkman button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Car">
            <summary>
            Car button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Klicker">
            <summary>
            Klicker button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Mute">
            <summary>
            Mute button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Plus">
            <summary>
            Volume plus button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICtrlU.Minus">
            <summary>
            Volume minus button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IDrivingProgram">
            <summary>
            Driving Programm selection with Rocker control
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IDrivingProgram.DrivingProgram">
            <summary>
            Rocker knob
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitReset">
            <summary>
            Headunit reset interface.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitReset.Reset">
            <summary>
            Headunit reset button.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IButtonWithReadonly">
            <summary>
            Button-interface including the Readonly-flag
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IButtonWithReadonly.IsReadonly">
            <summary>
            Is Read only
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IButton">
            <summary>
            Common button control interface
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IButton.PressTime">
            <summary>
            Default button press time
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IButton.LongPressTime">
            <summary>
            Default long button press time
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IButton.DelayTime">
            <summary>
            Default delay time after button release
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IButton.Click">
            <summary>
            Click the button (Sequence: down, wait, up)
            </summary>
            <returns>true if sucess, otherwise false</returns>
            <remarks>
            Synchron method.
            </remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.Click(System.TimeSpan,System.TimeSpan)">
            <summary>
            Clicks the button with specific press time. (Sequence: down, wait, up)
            </summary>
            <param name="pressTime">Specific press time.</param>
            <param name="delayTime">Specific delay time.</param>
            <returns>true if sucess, otherwise false</returns>
            <remarks>Synchron method.</remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.Press">
            <summary>
            Presses the button.
            </summary>
            <returns>true if sucess, otherwise false</returns>
            <remarks>Synchron method.</remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.Press(System.TimeSpan)">
            <summary>
            Presses the button.
            </summary>
            <param name="pressTime">Specific press time.</param>
            <returns>true if sucess, otherwise false</returns>
            <remarks>Synchron method.</remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.Release">
            <summary>
            Releases the button.
            </summary>
            <returns>true if sucess, otherwise false</returns>
            <remarks>Synchron method.</remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.Release(System.TimeSpan)">
            <summary>
            Releases the button.
            </summary>
            <param name="delayTime">Specific delay time.</param>
            <returns>true if sucess, otherwise false</returns>
            <remarks>Synchron method.</remarks>
        </member>
        <member name="M:ET.Api.Controls.IButton.ClickJob">
            <summary>
            Returns a job, which clicks the button. (Sequence: down, wait, up)
            </summary>
            <returns>click job</returns>
        </member>
        <member name="M:ET.Api.Controls.IButton.ClickJob(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a job, which clicks the button with specific press time. (Sequence: down, wait, up)
            </summary>
            <param name="pressTime">Specific press time.</param>
            <param name="delayTime">Specific delay time.</param>
            <returns>click job</returns>
        </member>
        <member name="M:ET.Api.Controls.IButton.PressJob">
            <summary>
            Returns a job, which presses the button.
            </summary>
            <returns>Press job</returns>
        </member>
        <member name="M:ET.Api.Controls.IButton.PressJob(System.TimeSpan)">
            <summary>
            Returns a job, which presses the button.
            </summary>
            <param name="pressTime">Specific press time.</param>
            <returns>Press job</returns>
        </member>
        <member name="M:ET.Api.Controls.IButton.ReleaseJob">
            <summary>
            Returns a job, which releases the button.
            </summary>
            <returns>Release job</returns>
        </member>
        <member name="M:ET.Api.Controls.IButton.ReleaseJob(System.TimeSpan)">
            <summary>
            Returns a job, which releases the button.
            </summary>
            <param name="delayTime">Specific delay time.</param>
            <returns>Release job</returns>
        </member>
        <member name="E:ET.Api.Controls.IButton.Changed">
            <summary>
            Event for notification of value changes
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ButtonState">
            <summary>
            Button switch states
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ButtonState.Up">
            <summary>
            The button is up (released)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ButtonState.Down">
            <summary>
            The button is down (pressed)
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICce">
            <summary>
            Base interface for the CCE Controls
            </summary>
            <remarks>Useable for NTG35, NTG45, NTG5 and all are needing additional keys</remarks>
        </member>
        <member name="P:ET.Api.Controls.ICce.CceKnob">
            <summary>
            Rotary knob 
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICce.Return">
            <summary>
            Return button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceKnob">
            <summary>
            CCE Knob interface
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceKnob.PushTime">
            <summary>
            Default CCE push time
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceKnob.DelayTime">
            <summary>
            Default CCE delay time
            </summary>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Push(ET.Api.Controls.CcePushDirection)">
            <summary>
            Pushes the CCE knob in a specific direction
            </summary>
            <param name="direction">The pushing direction.</param>
            <returns><c>true</c>, if sending of pushing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Push(ET.Api.Controls.CcePushDirection,System.TimeSpan,System.TimeSpan)">
            <summary>
            Pushes the CCE knob in a specific direction
            </summary>
            <param name="direction">The pushing direction.</param>
            <param name="pushTime">The push time.</param>
            <param name="delayTime">The delay time.</param>
            <returns><c>true</c>, if sending of pushing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Press(ET.Api.Controls.CcePushDirection)">
            <summary>
            Indicates that the button is pressed. 
            </summary>
            <param name="direction">The pushing direction.</param>
            <returns><c>true</c>, if sending of pressing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Press(ET.Api.Controls.CcePushDirection,System.TimeSpan)">
            <summary>
            Indicates that the button is pressed. 
            </summary>
            <param name="direction">The pushing direction.</param>
            <param name="pushTime">The push time.</param>
            <returns><c>true</c>, if sending of pressing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Release(ET.Api.Controls.CcePushDirection)">
            <summary>
            Indicates that button is released.
            </summary>
            <param name="direction">The releasing direction.</param>
            <returns><c>true</c>, if sending of releasing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Release(ET.Api.Controls.CcePushDirection,System.TimeSpan)">
            <summary>
            Indicates that button is released.
            </summary>
            <param name="direction">The releasing direction.</param>
            <param name="delayTime">The delay time.</param>
            <returns><c>true</c>, if sending of releasing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.PushJob(ET.Api.Controls.CcePushDirection)">
            <summary>
            Returns a job, which pushes the specified direction.
            </summary>
            <param name="direction">The pushing direction.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.PushJob(ET.Api.Controls.CcePushDirection,System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a job, which pushes the CCE knob in the specified direction and specified push time.
            </summary>
            <param name="direction">The pushing direction.</param>
            <param name="pushTime">The push time.</param>
            <param name="delayTime">The delay time.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.PressJob(ET.Api.Controls.CcePushDirection)">
            <summary>
            Returns a job, which presses the button.
            </summary>
            <param name="direction">The pressing direction.</param>
            <returns>Press job</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.PressJob(ET.Api.Controls.CcePushDirection,System.TimeSpan)">
            <summary>
            Returns a job, which presses the button.
            </summary>
            <param name="direction">The pressing direction.</param>
            <param name="pushTime">The push time.</param>
            <returns>Press job</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.ReleaseJob(ET.Api.Controls.CcePushDirection)">
            <summary>
            Returns a job, which releases the button.
            </summary>
            <param name="direction">The releasing direction.</param>
            <returns>Release job</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.ReleaseJob(ET.Api.Controls.CcePushDirection,System.TimeSpan)">
            <summary>
            Returns a job, which releases the button.
            </summary>
            <param name="direction">The releasing direction.</param>
            <param name="delayTime">The delay time.</param>
            <returns>Release job</returns>
        </member>
        <member name="E:ET.Api.Controls.ICceKnob.Pushed">
            <summary>
            Event for notification of CCE knob push changes
            </summary>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.Turn(ET.Api.Controls.CceTurnDirection)">
            <summary>
            Turns the CCE knob in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns><c>true</c>, if sending of pushing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.TurnJob(ET.Api.Controls.CceTurnDirection)">
            <summary>
            Returns a job, which turns the CCE knob in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.ICceKnob.TurnJob(ET.Api.Controls.CceTurnDirection,System.UInt32)">
            <summary>
            Returns a job, which pushes the specified direction for specified ticks.
            </summary>
            <param name="direction">The turning direction.</param>
            <param name="ticks">Amout of turning ticks.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="T:ET.Api.Controls.CcePushDirection">
            <summary>
            CCE pushing directions.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.North">
            <summary>
            North (Up)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.NorthEast">
            <summary>
            North East (Up and right) 
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.East">
            <summary>
            East (Right)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.SouthEast">
            <summary>
            South East (Down and right)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.South">
            <summary>
            South (Down)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.SouthWest">
            <summary>
            South West (Down and left)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.West">
            <summary>
            West (Left)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.NorthWest">
            <summary>
            North West (Up and left)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CcePushDirection.Center">
            <summary>
            Center pushdown (Click)
            </summary>
        </member>
        <member name="T:ET.Api.Controls.CceState">
            <summary>
            CCE push events
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CceState.Pushed">
            <summary>
            Do a CCE push
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CceState.Released">
            <summary>
            Undo a CCE push
            </summary>
        </member>
        <member name="T:ET.Api.Controls.CceTurnDirection">
            <summary>
            CCE turning directions 
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CceTurnDirection.Clockwise">
            <summary>
            Clockwise turn
            </summary>
        </member>
        <member name="F:ET.Api.Controls.CceTurnDirection.CounterClockwise">
            <summary>
            Counterclockwise turn
            </summary>
        </member>
        <member name="T:ET.Api.Controls.CcePushEventArgs">
            <summary>
            Event arguments for notification of CCE push changes
            </summary>
        </member>
        <member name="M:ET.Api.Controls.CcePushEventArgs.#ctor(ET.Api.Controls.CcePushDirection,ET.Api.Controls.CceState)">
            <summary>
            Creates new instance
            </summary>
            <param name="direction">Pushing direction.</param>
            <param name="change">Push change.</param>
        </member>
        <member name="P:ET.Api.Controls.CcePushEventArgs.Direction">
            <summary>
            Pushing direction
            </summary>
        </member>
        <member name="P:ET.Api.Controls.CcePushEventArgs.Change">
            <summary>
            Push change.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.CceTurnEventArgs">
            <summary>
            Event arguments for notification of CCE turn changes
            </summary>
        </member>
        <member name="M:ET.Api.Controls.CceTurnEventArgs.#ctor(ET.Api.Controls.CceTurnDirection,System.UInt32)">
            <summary>
            Creates new instance
            </summary>
            <param name="direction">Pushing direction.</param>
            <param name="ticks">Push change.</param>
        </member>
        <member name="P:ET.Api.Controls.CceTurnEventArgs.Direction">
            <summary>
            Pushing direction
            </summary>
        </member>
        <member name="P:ET.Api.Controls.CceTurnEventArgs.Ticks">
            <summary>
            Ticks to turn
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceNtg4">
            <summary>
            CCE specialization for NTG4
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg4.Clear">
            <summary>
            Clear button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceNtg45">
            <summary>
            CCE specialization for NTG45
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg45.Mcs">
            <summary>
            MultiContureSeat button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IControl">
            <summary>
            Common Control properties
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IControl.ControlState">
            <summary>
            Current control state
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IControl.IsEnabled">
            <summary>
            Indicates, if it is possible to trigger a action
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ControlState">
            <summary>
            Control states
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ControlState.Undefined">
            <summary>
            Undefined state
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ControlState.Observing">
            <summary>
            Observing (control is passive)
            </summary>
        </member>
        <member name="F:ET.Api.Controls.ControlState.Simulating">
            <summary>
            Simulating (control is active)
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IEjectButton">
            <summary>
            Eject control
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IEjectButton.Eject">
            <summary>
            Eject button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitLogging">
            <summary>
            Interface activate the Headunit logging functions
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IHeadunitLogging.WriteLog">
            <summary>
            Job to actuate the writing of an headunit log
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Controls.HUGrabDiscState">
            <summary>
            Core.States when grabbing disc from HU.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.HUGrabDiscState.Undefined">
            <summary>
            State undefined.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.HUGrabDiscState.Moving">
            <summary>
            Grabber is moving.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.HUGrabDiscState.Waiting">
            <summary>
            Grabber is waiting in front of the HU.
            </summary>
        </member>
        <member name="F:ET.Api.Controls.HUGrabDiscState.Finished">
            <summary>
            Finished grabbing disc.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHUGrabDiscJob">
            <summary>
            Common interface for jobs grabbing a disc from HU.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHUGrabDiscJob.GrabberState">
            <summary>
            Gets the state of the grabber.
            </summary>
            <value>The state of the grabber.</value>
        </member>
        <member name="T:ET.Api.Controls.ILivingStateSwitch">
            <summary>
            Interface for living state switch api.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ILivingStateSwitch.State">
            <summary>
            Current Ignition Switch state.
            </summary>
            <remarks>
            Property contains latest living state value.
            </remarks>
        </member>
        <member name="M:ET.Api.Controls.ILivingStateSwitch.Switch(ET.FW.Core.Common.LivingStateValue)">
            <summary>
            Switches with current switch profile to target state.
            </summary>
            <param name="targetState">The target ignition switch state.</param>
            <returns><c>true</c>, if execution was possible. Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.Api.Controls.IObf">
            <summary>
            The Interface for the "Oberes Bedienfeld"
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObf.Navi">
            <summary>
            Navi button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObf.Radio">
            <summary>
            Radio button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObf.Media">
            <summary>
            Media button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObf.Tel">
            <summary>
            Tel button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObf.Car">
            <summary>
            Car button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ISpecialHeadunitMenus">
            <summary>
            Interface to switch into special Headunit Menus
            </summary>
        </member>
        <member name="M:ET.Api.Controls.ISpecialHeadunitMenus.SwitchToEngineeringMenu">
            <summary>
            Job to Switch into the Engineering Menu
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Controls.ISpecialHeadunitMenus.SwitchToDealerMenu">
            <summary>
            Job to Switch into the Dealer Menu
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Controls.IFavoriteButton">
            <summary>
            Favorite control
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IFavoriteButton.Favorite">
            <summary>
            Favorite button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitKeypadNtg4Common">
            <summary>
            Common Headunit keypad interface for Ntg4, Ntg45
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.Navi">
            <summary>
            Navi button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.Tel">
            <summary>
            Tel button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.Mute">
            <summary>
            Mute button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.Sys">
            <summary>
            Sys button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.SeekMinus">
            <summary>
            Seek Minus button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4Common.SeekPlus">
            <summary>
            Seek Plus button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitKeypadNtg4x">
            <summary>
            Headunit keypad interface for Ntg4x, NOT Japan
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4x.Radio">
            <summary>
            Radio button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4x.Disc">
            <summary>
            Disc button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitKeypadNtg4xJapan">
            <summary>
            Headunit keypad interface for Ntg4x ONLY Japan
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4xJapan.Audio">
            <summary>
            Audio button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg4xJapan.Video">
            <summary>
            Video button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceBR222">
            <summary>
            Headunit keypad interface for BR 222 (Ntg5)
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Navi">
            <summary>
            Navi button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Radio">
            <summary>
            Radio button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Media">
            <summary>
            Media button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Tel">
            <summary>
            Tel button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Car">
            <summary>
            Car button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Mcs">
            <summary>
            MultiContureSeat (Mcs) button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.Eco">
            <summary>
            ECO button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR222.SportComfort">
            <summary>
            Sport/Comfort button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IObfBR223">
            <summary>
            The Interface for the "Oberes Bedienfeld" (Upper control panel) NTG7
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.DynamicLeft">
            <summary>
            DynamicLeft button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.DynamicRight">
            <summary>
            DynamicRight button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Parkman">
            <summary>
            Parkman button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Heater">
            <summary>
            Heater button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Red">
            <summary>
            LED Red button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Yellow">
            <summary>
            LED Yellow button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Car">
            <summary>
            Car button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Klicker">
            <summary>
            Klicker button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Mute">
            <summary>
            Mute button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Plus">
            <summary>
            Volume plus button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IObfBR223.Minus">
            <summary>
            Volume minus button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceBR205">
            <summary>
            Headunit keypad interface for BR 205 (Ntg5)
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR205.SportComfort">
            <summary>
            Sport/Comfort button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR205.Menu">
            <summary>
            Menu button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR205.Esm">
            <summary>
            ESM button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceNtg5Star12Button">
            <summary>
            CCE Interface for Ntg5 Star1
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg5Star12Button.Favorite">
            <summary>
            Favorite button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceNtg5Star14ButtonwithDisplay">
            <summary>
            CCE Interface for Ntg5 Star1
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg5Star14ButtonwithDisplay.Delete">
            <summary>
            Delete button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg5Star14ButtonwithDisplay.DisplayOff">
            <summary>
            DisplayOff button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceNtg5Star14ButtonwithSeat">
            <summary>
            CCE Interface for Ntg5 Star1 with 4 Button and Seat
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg5Star14ButtonwithSeat.Delete">
            <summary>
            Delete button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceNtg5Star14ButtonwithSeat.Seat">
            <summary>
            Seat button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IHeadunitKeypadNtg5Star1">
            <summary>
            Headunit keypad interface for Ntg5Star1
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.Radio">
            <summary>
            Radio button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.Media">
            <summary>
            Disc button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.HangUp">
            <summary>
            HangUp button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.ReceiveCall">
            <summary>
            Recieve Call button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.Previous">
            <summary>
            Previous button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.Next">
            <summary>
            Next button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.HashTag">
            <summary>
            Hash button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.RotaryEncoderA">
            <summary>
            RotaryEncoderA button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IHeadunitKeypadNtg5Star1.RotaryEncoderB">
            <summary>
            RotaryEndocerB button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICceBR167">
            <summary>
            CCE Interface for for BR 167 (Ntg6)
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Navi">
            <summary>
            Navi button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Fav">
            <summary>
            Fav button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Media">
            <summary>
            Media button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Tel">
            <summary>
            Tel button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.DynamicUp">
            <summary>
            Dynamic Up button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.DynamicDown">
            <summary>
            Dynamic Down button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Emotion">
            <summary>
            Emotion button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICceBR167.Park">
            <summary>
            Park button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.INumpad">
            <summary>
            Base numpad interface for Numpad buttons 
            </summary>
            <remarks>Useable for NTG35, NTG4(BR212), NTG45, NTG5(BR222) (needs additional FAV Key)</remarks>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key1">
            <summary>
            Key1 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key2">
            <summary>
            Key2 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key3">
            <summary>
            Key3 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key4">
            <summary>
            Key4 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key5">
            <summary>
            Key5 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key6">
            <summary>
            Key6 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key7">
            <summary>
            Key7 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key8">
            <summary>
            Key8 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key9">
            <summary>
            Key9 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Key0">
            <summary>
            Key0 button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Star">
            <summary>
            Star button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Pound">
            <summary>
            Pound button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.TelSend">
            <summary>
            TelSend button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.TelEnd">
            <summary>
            TelEnd button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Clear">
            <summary>
            Clear button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.INumpad.Item(System.String)">
            <summary>
            Indexer to control the buttons by string name
            </summary>
            <param name="key">key as string</param>
            <returns>reads the key</returns>
        </member>
        <member name="T:ET.Api.Controls.IOnButton">
            <summary>
            On/Off control
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IOnButton.On">
            <summary>
            On button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ISteeringWheelSwitchpadBase">
            <summary>
            Steering wheel switchpad base interface
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadBase.Minus">
            <summary>
            Minus button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadBase.Plus">
            <summary>
            Plus button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadBase.Return">
            <summary>
            Return button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ISteeringWheelSwitchpad">
            <summary>
            Steering wheel switchpad buttons
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpad.Menu">
            <summary>
            Menu button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ISteeringWheelSwitchpadOptional">
            <summary>
            Optional steering wheel switchpad buttons
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Up">
            <summary>
            Up button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Right">
            <summary>
            Right button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Down">
            <summary>
            Down button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Left">
            <summary>
            Left button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.TelSend">
            <summary>
            TelSend button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.TelEnd">
            <summary>
            TelEnd button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Ptt">
            <summary>
            Ptt button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Mute">
            <summary>
            Mute button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ISteeringWheelSwitchpadOptional.Ok">
            <summary>
            Ok button
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IUbfBR205">
            <summary>
            The Interface for the "Unteres Bedienfeld"
            </summary>	
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.Eco">
            <summary>
            Eco button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.BeltHandOver">
            <summary>
            BeltHandOver button
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.SuspensionLevelAdjustment">
            <summary>
            suspension level adjustment.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.RearRollerBlind">
            <summary>
            Button RearRollerBlind
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.ParkControl">
            <summary>
            Button ParkControl
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.PlugInHybrid">
            <summary>
            Button PlugInHybrid
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.ESP">
            <summary>
            Button ESP
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.DownhillSpeedRegulation">
            <summary>
            Button DownhillSpeedRegulation
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.DrivingProgramM">
            <summary>
            Button DrivingProgramM
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IUbfBR205.OffRoad">
            <summary>
            Button OffRoad
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IVin">
            <summary>
            Vehicle Identification Number interface
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IVin.Vin">
            <summary>
            Current VIN
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IVinExtended">
            <summary>
            Vehicle Identification Number interface extended.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IVinExtended.StopVin">
            <summary>
            Stop sending VIN Messages.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IVinExtended.StartVin">
            <summary>
            Start sending VIN Messages.
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IVolume">
            <summary>
            Volume control
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IVolume.VolumeKnob">
            <summary>
            Volume knob
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IVolumeKnob">
            <summary>
            Volume knob
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IVolumeKnob.Turn(ET.Api.Controls.VolumeTurnDirection)">
            <summary>
            Turns the volume knob in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns><c>true</c>, if sending of pushing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.IVolumeKnob.TurnJob(ET.Api.Controls.VolumeTurnDirection)">
            <summary>
            Returns a job, which turns the volume knob in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.IVolumeKnob.TurnJob(ET.Api.Controls.VolumeTurnDirection,System.UInt32)">
            <summary>
            Returns a job, which turns the volume knob in the specified direction for specified ticks.
            </summary>
            <param name="direction">The turning direction.</param>
            <param name="ticks">Amout of turning ticks.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="P:ET.Api.Controls.IVolumeKnob.MuteButton">
            <summary>
            The Mute-Button
            </summary>
        </member>
        <member name="E:ET.Api.Controls.IVolumeKnob.Turned">
            <summary>
            Event for notification of turning
            </summary>
            <remarks>
            Subscribers of event should implement event decoupling <see cref="T:ET.FW.Core.Events.IEventDecoupling"/>
            </remarks>
        </member>
        <member name="T:ET.Api.Controls.VolumeTurnDirection">
            <summary>
            Volume knob turning directions
            </summary>
        </member>
        <member name="F:ET.Api.Controls.VolumeTurnDirection.Up">
            <summary>
            Up direction
            </summary>
        </member>
        <member name="F:ET.Api.Controls.VolumeTurnDirection.Down">
            <summary>
            Down direction
            </summary>
        </member>
        <member name="T:ET.Api.Controls.VolumeTurnEventArgs">
            <summary>
            Event arguments for notification of CCE turn changes
            </summary>
        </member>
        <member name="M:ET.Api.Controls.VolumeTurnEventArgs.#ctor(ET.Api.Controls.VolumeTurnDirection,System.UInt32)">
            <summary>
            Creates new instance
            </summary>
            <param name="direction">Pushing direction.</param>
            <param name="ticks">Push change.</param>
        </member>
        <member name="P:ET.Api.Controls.VolumeTurnEventArgs.Direction">
            <summary>
            Pushing direction
            </summary>
        </member>
        <member name="P:ET.Api.Controls.VolumeTurnEventArgs.Ticks">
            <summary>
            Ticks to turn
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IDiscHandling">
            <summary>
            Common disc handling API (implemented for RBI pneumatic and P3 robotic etc.)
            </summary>
            <remarks>
            All methods return inactive jobs which must be explicit started
            </remarks>
            <example>
            Syncron calling example:
            <code>
            bool ok = service.HUInsertDiscJob().Run()
            </code>
            </example>
        </member>
        <member name="P:ET.Api.Controls.IDiscHandling.HUCount">
            <summary>
            Max. number of supported head units
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.SelectHU(ET.Api.Controls.DiscHandling.HeadUnitPositions)">
            <summary>
            Pre-Select HU for disc insertion and removal
            </summary>
            <param name="huIdx">HU index (0 .. HUCount-1) </param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.HUInsertDiscJob">
            <summary>
            Inserts a CD into the head unit. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.HURemoveDiscJob">
            <summary>
            Removes a CD from the head unit. The arm waits until the CD is ejected. Function is executed asynchronously with JobHandling.
            </summary>
            <remarks>
            Grabber is positioned in front of HU, waits for disc and grabs it after ejection
            May be aborted via jobs Abort() method
            </remarks>
            <returns>Job to start, monitor and abortthe asyn operation</returns>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.HUHoldDiscJob">
            <summary>
            Wait for a disc to be ejected and grab it. CD is held to check HU behaviour.
            </summary>
            <remarks>
            Grabber is positioned in front of HU, waits for disc and grabs it after ejection
            May be aborted via jobs Abort() method
            </remarks>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.HUReleaseDiscJob">
            <summary>
            Release disc which was previously grabbed and held via HUHoldDiscJob()
            </summary>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="P:ET.Api.Controls.IDiscHandling.TrayCount">
            <summary>
            Max number of trays
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.SelectTray(System.Int32)">
            <summary>
            Pre-Select HU for disc insertion and removal
            </summary>
            <param name="trayIdx">index  of tray (0 .. TrayCount-1)</param>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="P:ET.Api.Controls.IDiscHandling.DiscAvailable">
            <summary>
            Check if current tray position holds a disc
            </summary>
            <value>
            true/false if detected, null if undefined or not suppoerted
            </value>
        </member>
        <member name="P:ET.Api.Controls.IDiscHandling.DiscAvailableHU">
            <summary>
            Check if current HU holds a disc
            </summary>
            <value>
            true/false if detected, null if undefined or not suppoerted
            </value>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.TrayInsertDiscJob">
            <summary>
            Inserts a CD into the tray. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="M:ET.Api.Controls.IDiscHandling.TrayRemoveDiscJob">
            <summary>
            Removes a CD from the tray. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>Job to start and monitor the asyn operation</returns>
        </member>
        <member name="T:ET.Api.Controls.IWheelRPM">
            <summary>
            Vehice Identification Number interface
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IWheelRPM.SimulatedSpeed">
            <summary>
            Current Speed for Calculating the 4 Wheelrpm's
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IWheelRPM.K_Number">
            <summary>
            Current K-Number used for Kalkulation of the RPM's from the Simulated Speed
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IWheelRPM.SimulatedDirection">
            <summary>
            The direction. If Forward or Backward, the direction is set, if the simulated speed is unequal 0 and
            Void is set if the speed is 0.<para></para>
            </summary>
        </member>
        <member name="T:ET.Api.Controls.DrivingDirection">
            <summary>
            Enum for the direction to which a car is drinving
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DrivingDirection.Void">
            <summary>
            Car doesn't drive, but sensors are available
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DrivingDirection.Forward">
            <summary>
            Car is driving forwards
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DrivingDirection.Backward">
            <summary>
            Car is driving backwards
            </summary>
        </member>
        <member name="F:ET.Api.Controls.DrivingDirection.SNA">
            <summary>
            No sensor available
            </summary>
        </member>
        <member name="T:ET.Api.Controls.ICurrentSpeed">
            <summary>
            Current Speed 
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICurrentSpeed.Speed">
            <summary>
            Observable for Current Speed
            </summary>
        </member>
        <member name="P:ET.Api.Controls.ICurrentSpeed.Direction">
            <summary>
            Observable for the current direction
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IRockerKnob">
            <summary>
            Rocker knob
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IRockerKnob.Turn(ET.Api.Controls.TurnDirection)">
            <summary>
            Turns the Rocker in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns><c>true</c>, if sending of pushing command was ok. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.IRockerKnob.TurnJob(ET.Api.Controls.TurnDirection)">
            <summary>
            Returns a job, which turns the Rocker knob in the specified direction.
            </summary>
            <param name="direction">The turning direction.</param>
            <returns>A non started <c>IJob</c>.</returns>
        </member>
        <member name="E:ET.Api.Controls.IRockerKnob.Turned">
            <summary>
            Event for notification of turning
            </summary>
        </member>
        <member name="T:ET.Api.Controls.TurnDirection">
            <summary>
            The turning directions
            </summary>
        </member>
        <member name="F:ET.Api.Controls.TurnDirection.NotPressed">
            <summary>
            NotPressed direction
            </summary>
        </member>
        <member name="F:ET.Api.Controls.TurnDirection.Down">
            <summary>
            Down direction
            </summary>
        </member>
        <member name="F:ET.Api.Controls.TurnDirection.Up">
            <summary>
            Up direction
            </summary>
        </member>
        <member name="T:ET.Api.Controls.TurnEventArgs">
            <summary>
            Event arguments for notification of Rock turn changes
            </summary>
        </member>
        <member name="M:ET.Api.Controls.TurnEventArgs.#ctor(ET.Api.Controls.TurnDirection)">
            <summary>
            Creates new instance
            </summary>
            <param name="direction">Pushing direction.</param>
        </member>
        <member name="P:ET.Api.Controls.TurnEventArgs.Direction">
            <summary>
            Pushing direction
            </summary>
        </member>
        <member name="T:ET.Api.Controls.IIgnitionSwitch">
            <summary>
            Ignition Switch service.
            </summary>
        </member>
        <member name="P:ET.Api.Controls.IIgnitionSwitch.State">
            <summary>
            Current Ignition Switch state.
            </summary>
            <remarks>
            Property contains latest ignition switch signal value from CAN bus. Value might be different from requested state
            </remarks>
        </member>
        <member name="M:ET.Api.Controls.IIgnitionSwitch.Switch(ET.Api.Controls.IgnitionSwitchState)">
            <summary>
            Switches with current switch profile to target state.
            </summary>
            <param name="targetState">The target ignition switch state.</param>
            <returns><c>true</c>, if execution was possible. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.Controls.IIgnitionSwitch.SwitchJob(ET.Api.Controls.IgnitionSwitchState)">
            <summary>
            Returns a job, which switches with current switch profile to target state.
            </summary>
            <param name="targetState">The target ignition switch state.</param>
            <returns>A non started <c>IJob</c>.</returns>
            <remarks>
            The sequence of steps executed by the job is calculated using current ignition state as start. Job should not be used after ignition state has changed
            </remarks>
        </member>
        <member name="M:ET.Api.Controls.IIgnitionSwitch.SwitchJob(ET.Api.Controls.IgnitionSwitchState,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{ET.Api.Controls.IgnitionSwitchState,System.TimeSpan}})">
            <summary>
            Returns a job, which switches with a specific switch profile to target state.
            </summary>
            <param name="targetState">The target ignition switch state.</param>
            <param name="profile">The specific switch profile.</param>
            <returns>A non started <c>IJob</c>.</returns>
            <remarks>
            The sequence of steps executed by the job is calculated using current ignition state as start. Job should not be used after ignition state has changed
            </remarks>
        </member>
        <member name="P:ET.Api.Controls.IIgnitionSwitch.DefaultSwitchProfile">
            <summary>
            Default switch profile.
            </summary>
            <remarks>Lock for 200 ms -> Off for 200 ms -> Accessory for 200 ms -> On for 200 ms -> Start for 2000 ms -> On</remarks>
        </member>
        <member name="P:ET.Api.Controls.IIgnitionSwitch.SwitchProfile">
            <summary>
            Current used switch profile.
            </summary>
        </member>
        <member name="M:ET.Api.Controls.IIgnitionSwitch.DoSequence(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{ET.Api.Controls.IgnitionSwitchState,System.TimeSpan}})">
            <summary>
            Returns a job, which switches with a specific switch sequence.
            </summary>
            <param name="sequence">The sequence</param>
            <returns>Job to run sequence</returns>
        </member>
        <member name="T:ET.Api.Controls.IgnitionSwitchState">
            <summary>
            Ignition Switch Core.States
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.Undefined">
            <summary>
            State Undefined
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.Lock">
            <summary>
            State Lock
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.Off">
            <summary>
            State Off
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.Accessory">
            <summary>
            State Accessory
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.On">
            <summary>
            State On
            </summary>
        </member>
        <member name="F:ET.Api.Controls.IgnitionSwitchState.Start">
            <summary>
            Start (engine start)
            </summary>
        </member>
        <member name="T:ET.Api.DataLogger.IDataLogger">
            <summary>
            Common data logger handling interface
            </summary>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.SyncLoggerTimeJob">
            <summary>
            Create core job which can be used to set data logger time to current system time
            </summary>
            <returns>Core job, which must be started to sync logger time </returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.SetLoggerTimeJob(System.DateTime)">
            <summary>
            Create core job which can be used to set data logger time to given time
            </summary>
            <param name="time">time to set on logger</param>
            <returns>Core job, which can be started to sync logger time </returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.GetLoggerTimeJob">
            <summary>
            Create core job which queries data logger for its current time
            After successful job execution the time is returned in the Result property of the job
            </summary>
            <returns>Core job to query logger time</returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.SetMarkerJob">
            <summary>
            Create core job, which can be used to set a marker on the data logger
            </summary>
            <returns>Core job to set marker</returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.DeleteAllJob">
            <summary>
            Create core job, which deletes all data on logger
            </summary>
            <returns>Core job to delete all data</returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.DownloadAllJob(System.String,System.Boolean)">
            <summary>
            Create core job to download all logger data
            </summary>
            <param name="outputPath">target path for downloaded data</param>
            <param name="zip">true to zip downlaoded data</param>
            <returns>Core job, to downlad all logger data</returns>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.DownloadJob(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Create core job to download logger data of defined time period
            </summary>
            <param name="start">Start time of data to download</param>
            <param name="end">EndTime of data to download</param>
            <param name="outputPath">target path for downloaded data</param>
            <param name="zip">true to zip downlaoded data</param>
            <returns>Core job, to downlad logger data</returns>
        </member>
        <member name="P:ET.Api.DataLogger.IDataLogger.IsAnyJobRunning">
            <summary>
            Is any job of datalogger still running
            </summary>
        </member>
        <member name="M:ET.Api.DataLogger.IDataLogger.AbortRunningJob">
            <summary>
            Aborts last started job of datalogger, if it is still running.
            </summary>
        </member>
        <member name="T:ET.Api.Devices">
            <summary>
            Direct access to frequently used devices
            </summary>
        </member>
        <member name="P:ET.Api.Devices.PowerSupply">
            <summary>
            Direct typesafe access to power supply device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.MultiCurvePowerSupply">
            <summary>
            Direct typesafe access to power supply device with multicurve programming interface
            </summary>
        </member>
        <member name="P:ET.Api.Devices.MostMatrix">
            <summary>
            Direct typesafe access to MOST matrix device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.PowerMatrix">
            <summary>
            Direct typesafe access to power matrix device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.EclTestUnit">
            <summary>
            Direct typesafe access to ECL test unit device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.Kleer">
            <summary>
            Direct typesafe access to Kleer device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.Oscilloscope">
            <summary>
            Direct typesafe access to oscilloscope device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.IRRemote">
            <summary>
            Direct typesafe access to IRRemote device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.TemperatureChamber">
            <summary>
            Direct typesafe access to ITemperatureChamber device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.MassStorage">
            <summary>
            Direct typesafe access to MassStorage device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.UsbLowLevel">
            <summary>
            Direct typesafe access to MassStorage device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.Multimeter">
            <summary>
            Direct typesafe access to Multimeter device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.Relay">
            <summary>
            Direct typesafe access to Relay device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.AudioAnalyzer">
            <summary>
            Direct typesafe access to AudioAnalyzer device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.GSMLANModem">
            <summary>
            Direct typesafe access to GSMLANModem device
            </summary>
        </member>
        <member name="P:ET.Api.Devices.USBSwitchBoxDevice">
            <summary>
            Direct typesafe access to USBSwitchBox device
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.KeyboardButton">
            <summary>
            Enumeration that contains all buttons that are available in the system and can be stimulated by D4T
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Eject">
            <summary>Eject Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Back">
            <summary>Back Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Menu">
            <summary>Menu Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Numbers">
            <summary>123 Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.ABC">
            <summary>ABC Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.FAV">
            <summary>FAV Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.CCE_Up">
            <summary>CCE_Up Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.CCE_Right">
            <summary>CCE_Right Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.CCE_Down">
            <summary>CCE_Down Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.CCE_Left">
            <summary>CCE_Left Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.CCE_Pressed">
            <summary>CCE_Pressed Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Send">
            <summary>Send Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.End">
            <summary>End Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.SDS_on">
            <summary>SDS_on Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.SDS_off">
            <summary>SDS_off Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Volume_Up">
            <summary>Volume_Up Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Volume_Down">
            <summary>Volume_Down Button</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButton.Mute">
            <summary>Mute Button</summary>
        </member>
        <member name="T:ET.Api.Dftoe.KeyStatusReceivedHandler">
            <summary>Signals that the Keyboard status has changed</summary>
            <param name="buttonFieldOffset">Identifies the index number of the first buttonField whose data is transmitted in this message.</param>
            <param name="buttonFieldData">The data in the button field identified by buttonFieldOffset and following</param>
        </member>
        <member name="T:ET.Api.Dftoe.RotaryControlEventReceivedHandler">
            <summary>Signals that a rotational control status has changed</summary>
            <param name="rotaryControlNr"> Identifies the rotary control whose status changed</param>
            <param name="rotationSteps">Describes by how many steps the rotary control element has been turned.  Positive values shall indicate a clockwise rotation, negative values shall indicate counterclockwise rotation.</param>
        </member>
        <member name="T:ET.Api.Dftoe.KeyboardButtonLocation">
            <summary>
            Keyboard button location.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButtonLocation.ButtonFieldIndex">
            <summary>Index of the button field in which the key information is stored</summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardButtonLocation.ButtonNumberIndex">
            <summary>Index of the button in which the key information is stored</summary>
        </member>
        <member name="M:ET.Api.Dftoe.KeyboardButtonLocation.#ctor(System.UInt32,System.UInt32)">
            <summary>Creates a new KeyboardButtonLocation</summary>
            <param name="buttonFieldIndex">Index of the button field in which the key information is stored</param>
            <param name="buttonNumberIndex">Index of the button in which the key information is stored</param>
        </member>
        <member name="T:ET.Api.Dftoe.KeyboardMappings">
            <summary>
            Keyboard mappings.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.KeyboardMappings.ntg5Mapping">
            <summary>Mapping of Keys for the NTG5 Headunits</summary>
        </member>
        <member name="P:ET.Api.Dftoe.KeyboardMappings.NTG5Mapping">
            <summary>
            NTG5Mapping reference accessor.
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.IDftoeKeyboardControlService">
            <summary>
            Dftoe keyboard control service interface.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeKeyboardControlService.OnKeyStatusReceived">
            <summary>
            Key status received handler, 0x00028001 (DefTe-322)
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeKeyboardControlService.OnRotaryControlEventReceived">
            <summary>
            Rotary control event received handler, 0x00028002 (DefTe-326)
            </summary>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.GetKeyStatus(System.UInt32,System.UInt32)">
            <summary>
            Get key status, 0x00020001 (DefTe-293)
            </summary>
            <param name="buttonFieldOffset">button field offset</param>
            <param name="buttonFieldCount">button field count</param>
            <returns>array of key states</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.SetKeyStatus(System.UInt32,System.UInt32[])">
            <summary>
            Set key status, 0x00020002 (DefTe-299)
            </summary>
            <param name="buttonFieldOffset">button field offset</param>
            <param name="buttonFieldDataList">button field data list</param>
            <returns>array of key states</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.SetKeyStatus(ET.Api.Dftoe.KeyboardButton,System.Boolean)">
            <summary>
            Set key status, 0x00020002 (DefTe-299)
            </summary>
            <param name="button">button to set key status</param>
            <param name="pressed">key status</param>
            <returns>key state</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.SetKeyStatus(System.Collections.Generic.Dictionary{ET.Api.Dftoe.KeyboardButton,System.Boolean})">
            <summary>
            Set key status, 0x00020002 (DefTe-299)
            </summary>
            <param name="buttonValues">button dictionary to set state</param>
            <returns>array of key states</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.NotifyOnKeyChanged(System.Boolean)">
            <summary>
            Notify on key changed, 0x00020003 (DefTe-304)
            </summary>
            <param name="state">notify on key changed state</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.TriggerRotaryControlEvent(System.UInt32,System.Int32)">
            <summary>
            Trigger rotary control event, 0x00020004 (DefTe-309)
            </summary>
            <param name="rotaryControlNr">rotary control number</param>
            <param name="rotationSteps">rotation steps</param>
            <returns>rotary control state</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeKeyboardControlService.NotifyOnRotraryControlChanged(System.Boolean)">
            <summary>
            Notify on rotrary control changed, 0x00020005 (DefTe-315)
            </summary>
            <param name="notificationState">notification state</param>
        </member>
        <member name="T:ET.Api.Dftoe.IDftoeRemoteResetService">
            <summary>
            DFTOE remote reset service interface.
            </summary>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeRemoteResetService.TriggerReset">
            <summary>
            Trigger reset, 0x00030001 (DefTe-353)
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.Display">
            <summary>
            The <c>Display</c> structure is used to identify a display if a component has more than one display.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.Display.RSELeft">
            <summary>HU_Driver / RSE_Left</summary>
        </member>
        <member name="F:ET.Api.Dftoe.Display.RSERight">
            <summary>HU_Passenger / RSE_Right</summary>
        </member>
        <member name="T:ET.Api.Dftoe.StorageDevice">
            <summary>
            The <c>StorageDevice</c> structure is used to identify a storage device that is used to store a screenshot.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.StorageDevice.Default">
            <summary>Default entry</summary>
        </member>
        <member name="F:ET.Api.Dftoe.StorageDevice.SDCardReader">
            <summary>SD Card reader</summary>
        </member>
        <member name="F:ET.Api.Dftoe.StorageDevice.ConnectedUSBDrive">
            <summary>Connected USB drive</summary>
        </member>
        <member name="F:ET.Api.Dftoe.StorageDevice.SecondConnectedUSBDrive">
            <summary>Second connected USB drive</summary>
        </member>
        <member name="T:ET.Api.Dftoe.ScreenshotFileFormat">
            <summary>
            The <c>ScreenshotFileFormat</c> structure is used to identify a storage device that is used to store a screenshot.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.ScreenshotFileFormat.BMP">
            <summary>BMP format</summary>
        </member>
        <member name="F:ET.Api.Dftoe.ScreenshotFileFormat.TIF">
            <summary>TIF format</summary>
        </member>
        <member name="F:ET.Api.Dftoe.ScreenshotFileFormat.PNG">
            <summary>PNG format</summary>
        </member>
        <member name="T:ET.Api.Dftoe.ScreenshotReadyHandler">
            <summary>Signals that the screenshot data is ready</summary>
            <param name="display">Selects the display whose screenshot was stored if the component has more than one display.</param>
            <param name="fileFormat">Graphic file format which was used to store the screenshot.</param>
            <param name="storeOnDevice">Determines if a screenshot was stored permamently on the given storage device.</param>
            <param name="device">Storage device on which the screenshot was stored.</param>
            <param name="filename">The filename that was used to store the screenshot.</param>
            <param name="filehandle">A unique handle to the screenshot.</param>
            <param name="filesize">The size of the screenshot file in bytes.</param>
        </member>
        <member name="T:ET.Api.Dftoe.ScreenshotDataHandler">
            <summary>Signals that the screenshot data is received</summary>
            <param name="filehandle">A unique handle to the screenshot that is stored on the D4T component.</param>
            <param name="offset">Offset relative to the beginning of the screen shot data.</param>
            <param name="count">The number of bytes that are transferred in this function call</param>
            <param name="bytes">The data of the screenshot file.</param>
        </member>
        <member name="T:ET.Api.Dftoe.IDftoeScreenshotsService">
            <summary>
            DFTOE screenshots service interface.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeScreenshotsService.OnScreenshotReadyReceived">
            <summary>
            Screenshot ready handler, 0x00058001 (DefTe-724)
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeScreenshotsService.OnScreenshotDataReceived">
            <summary>
            Screenshot data handler, 0x00058002 (DefTe-728)
            </summary>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeScreenshotsService.TriggerRemoteScreenshot(ET.Api.Dftoe.Display,System.Boolean,ET.Api.Dftoe.StorageDevice)">
            <summary>
            Trigger remote screenshot, 0x00050001 (DefTe-710)
            </summary>
            <param name="display">display identifier</param>
            <param name="storeOnDevice">store on device flag</param>
            <param name="device">storage device</param>
            <returns>trigger state</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeScreenshotsService.RequestScreenshotData(System.UInt32,System.UInt32)">
            <summary>
            Request screenshot data, 0x00050002 (DefTe-717)
            </summary>
            <param name="filehandle">file handle</param>
            <param name="count">number of bytes to request</param>
            <returns>screen shot data</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeScreenshotsService.RequestScreenshotData(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Request screenshot data, 0x00050002 (DefTe-717)
            </summary>
            <param name="filehandle">screenshot filehandle</param>
            <param name="offset">offset to start read from</param>
            <param name="count">number of bytes to read</param>
            <returns>screen shot data</returns>
        </member>
        <member name="T:ET.Api.Dftoe.IDftoeService">
            <summary>
            Dftoe base service interface.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeService.OnDftoeDevicePingReceived">
            <summary>
            Dftoe device ping received handler.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeService.OnConnectionStateChangedReceived">
            <summary>
            Connection state changed received handler.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeService.OnInvalidFunctionIdReceived">
            <summary>
            Invalid function id received handler.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeService.OnInvalidParameterReceived">
            <summary>
            Invalid parameter received handler.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeService.OnErrorMessageReceived">
            <summary>
            Error message received handler.
            </summary>
        </member>
        <member name="P:ET.Api.Dftoe.IDftoeService.IsConnected">
            <summary>
            Check headunit connection.
            </summary>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeService.Connect">
            <summary>
            Connect to headunit.
            </summary>
            <returns>connection state</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeService.Disconnect">
            <summary>
            Disconnect from headunit.
            </summary>
        </member>
        <member name="P:ET.Api.Dftoe.IDftoeService.Timeout">
            <summary>
            Callback timeout accessor.
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.DftoeTraceAndMofifyAppId">
            <summary>
            Trace and modify app ids.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_GENERIC">
            <summary>
            Generic entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_AUDIOMANAGEMENT">
            <summary>
            AudioManagement entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_RADIO">
            <summary>
            Radio entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_PLAYER">
            <summary>
            Player entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_TV">
            <summary>
            TV entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_SDS">
            <summary>
            SDS entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_G2P">
            <summary>
            G2P entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_TTS">
            <summary>
            TTS entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_ADDRESSBOOK">
            <summary>
            Addressbook entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_BLUETOOTH">
            <summary>
            Bluetooth entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_TELEPHONE">
            <summary>
            Telephone entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_MESSAGING">
            <summary>
            Messaging entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_BROWSER">
            <summary>
            Browser entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_INTERNET_CONNECTIVITY">
            <summary>
            Internet Connectivity entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_NAVIGATION">
            <summary>
            Navigation entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_VEHICLE_CENTRIC_SERVICES">
            <summary>
            Vehicle Centric Services entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_SERVICE_CALL">
            <summary>
            Service Call entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_EMERGENCY_CALL">
            <summary>
            Emergency Call entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_DIAGNOSIS">
            <summary>
            Diagnosis entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_HMI">
            <summary>
            HMI entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_TELEAID">
            <summary>
            Teleaid entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_FAVOURITE_KEY">
            <summary>
            Favourite Key entry.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndMofifyAppId.APP_INCARCOM">
            <summary>
            InCarCom entry.
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand">
            <summary>
            Navigation commands.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand.TRACEMODIFY_CMD_JUMP_FIRST">
            <summary>
            Jump to the first element of the list
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand.TRACEMODIFY_CMD_JUMP_LAST">
            <summary>
            Jump to the last element of the list
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand.TRACEMODIFY_CMD_JUMP_NEXT">
            <summary>
            Jump to the next element of the list
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand.TRACEMODIFY_CMD_JUMP_PREV">
            <summary>
            Jump to the previous element of the list
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand.TRACEMODIFY_CMD_JUMP_EXPLICIT">
            <summary>
            Jump to chosen element of the list
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.DftoeTraceAndModifyData">
            <summary>
            Data storage.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.DataType">
            <summary>
            The type of data which is stored in the TraceModifyData struct. Only the field described in type will have a valid value.
            All other fields can have default values.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.StringData">
            <summary>Holds string data</summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.StringFormat">
            <summary>If the data is a string this indicates the encoding of the string that shall be used.</summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.UintData">
            <summary>Holds uint data</summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.IntData">
            <summary>Holds int data</summary>
        </member>
        <member name="F:ET.Api.Dftoe.DftoeTraceAndModifyData.ByteStreamData">
            <summary>Holds byte streams</summary>
        </member>
        <member name="T:ET.Api.Dftoe.TraceModifyMask">
            <summary>
            Trace and modify mask.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.TraceModifyMask.ReadMask">
            <summary>
            The state of the items read mask. Only if the read mask is true the items content can be accessed by the D4T component.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.TraceModifyMask.ModifyMask">
            <summary>
            The state of the items modify mask. Only if the modify mask is true the items data can be modified by the D4T component.
            </summary>
        </member>
        <member name="F:ET.Api.Dftoe.TraceModifyMask.NotificationMask">
            <summary>
            he state of the items nofitifcation mask. If the mask is set to true, the test client Tis automatically informed if the items content is changed with an traceModifyDataStatus message.
            </summary>
        </member>
        <member name="T:ET.Api.Dftoe.MasksReceivedHandler">
            <summary>
            Masks received received handler.
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="readMask">read mask</param>
            <param name="modifyMask">modify mask</param>
            <param name="notificationMask">notification mask</param>
        </member>
        <member name="T:ET.Api.Dftoe.ListLengthReceivedHandler">
            <summary>
            List length received handler.
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="listLength">list length</param>
        </member>
        <member name="T:ET.Api.Dftoe.ListPositionReceivedHandler">
            <summary>
            List position received handler.
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="listPosition">list position</param>
            <param name="listLength">list length</param>
        </member>
        <member name="T:ET.Api.Dftoe.DataReceivedHandler">
            <summary>
            Data received handler.
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="subId">sub id</param>
            <param name="part">part parameter</param>
            <param name="last">last parameter</param>
            <param name="validListEntry">valid list entry</param>
            <param name="sequenceCounter">sequence counter</param>
            <param name="data">data parameter</param>
        </member>
        <member name="T:ET.Api.Dftoe.IDftoeTraceAndModifyService">
            <summary>
            Dftoe trace and modify service interface.
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeTraceAndModifyService.OnMasksReceived">
            <summary>
            On masks received, 0x00048001 (DefTe-549)
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeTraceAndModifyService.OnListLengthReceived">
            <summary>
            On list length received, 0x00048002 (DefTe-553)
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeTraceAndModifyService.OnListPositionReceived">
            <summary>
            On list position received, 0x00048003 (DefTe-557)
            </summary>
        </member>
        <member name="E:ET.Api.Dftoe.IDftoeTraceAndModifyService.OnDataReceived">
            <summary>
            On data received, 0x00048004 (DefTe-561)
            </summary>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.GetMasks(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32)">
            <summary>
            Get masks, 0x00040001 (DefTe-507)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.SetMasks(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set masks, 0x00040002 (DefTe-512)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="readMask">read mask</param>
            <param name="modifyMask">modify mask</param>
            <param name="notificationMask">notification mask</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.GetListLength(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32)">
            <summary>
            Get list length, 0x00040003 (DefTe-517)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <returns>length of list</returns>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.GetListPosition(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32)">
            <summary>
            Get list position, 0x00040004 (DefTe-522)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.NavigateList(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32,ET.Api.Dftoe.DftoeTraceAndModifyNavigationCommand,System.UInt32)">
            <summary>
            Navigate list, 0x00040005 (DefTe-527)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="command">command parameter</param>
            <param name="listElementNr">list element number</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.GetData(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32,System.UInt32)">
            <summary>
            Get data, 0x00040005 (DefTe-536)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="subId">sub id</param>
        </member>
        <member name="M:ET.Api.Dftoe.IDftoeTraceAndModifyService.SetData(ET.Api.Dftoe.DftoeTraceAndMofifyAppId,System.UInt32,System.UInt32,System.UInt32,System.Boolean,ET.Api.Dftoe.DftoeTraceAndModifyData)">
            <summary>
            Set data, 0x00040006 (DefTe-542)
            </summary>
            <param name="appId">app id</param>
            <param name="itemId">item id</param>
            <param name="subId">sub id</param>
            <param name="part">part parameter</param>
            <param name="last">is last flag</param>
            <param name="data">data parameter</param>
        </member>
        <member name="T:ET.Api.Diagnostics.ISpecialEcuCollection">
            <summary>
            Interface for access to ECU diagnostics with odx files base on Ecu name
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.ISpecialEcuCollection.ReadOne(System.String)">
            <summary>
            Read information of one ECU (even if it is already buffered)
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <param name="name">Name of the Ecu</param>
            <returns>Job to monitor async reading, the job result contains the requested information</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.ISpecialEcuCollection.ReadAll(System.String)">
            <summary>
            Read information of all ECUs, retrieved information is stored in Ecus of this collection
            If info is already buffered it is retrieved again
            Operation is executed asynchronously and can be monitored via returned jobs.
            </summary>
            <param name="busName"></param>
            <returns></returns>
        </member>
        <member name="M:ET.Api.Diagnostics.ISpecialEcuCollection.Get(System.String)">
            <summary>
            Get ECU information: If ECU information is in buffer it is returned directly, otherwise ReadOne() is used
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <returns>job to monitor async reading, the job result contains the requested information</returns>
        </member>
        <member name="P:ET.Api.Diagnostics.ISpecialEcuCollection.EcuJobs">
            <summary>
            List of jobs for all the ECUs connected
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.ISpecialEcuCollection.Item(System.String)">
            <summary>
            Retrieve information for one ECU from buffer
            </summary>
            <param name="name">Name of the Ecu</param>
            <returns>ECU information for given type</returns>
        </member>
        <member name="T:ET.Api.Diagnostics.DtcState">
            <summary>
            Diagnostic Trouble Code states
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.DtcState.Active">
            <summary>
            Error is currently active
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.DtcState.Stored">
            <summary>
            Error was previously detected
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.DtcState.Pending">
            <summary>
            Error is pending
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.DtcState.MalfunctionIndicatorLight">
            <summary>
            MIL / Warning Indicator
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.DtcState.TestNotComplete">
            <summary>
            Test Not Complete / Readiness Flag
            Test could not be executed / completed
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.DtcState.ToString">
            <summary>
            Convert DTC state to string
            </summary>
            <returns>State string representation</returns>
        </member>
        <member name="T:ET.Api.Diagnostics.EcuInfo">
            <summary>
            All needed ECU numbers to identify an ECU version.
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.EcuInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>Additional constructors may be provided to ease initialisation of fields</remarks>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.DataValid">
            <summary>
            Flag is set if (all) information could be retrieved
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.ErrorCode">
            <summary>
            Description of error(s) which occured while reading the information, null if no error
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.HWVersion">
            <summary>
            KWP2000: 1A-87 "DCX-Identification"
            UDS: 22-F1-11 "Mercedes Car Group Hardware Part Number"
            UDS: 22-F1-50 "Hardware Version Information"
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.SWVersions">
            <summary>
            List with different software version information fields (code, data, bootloader, ...)
            </summary>
            <remarks>
            VersionInfo.Type is no unique key in this collection.
            </remarks>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.EStandVersion">
            <summary>
            E-Stand Version of the ECU connected
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.DiagVersion">
            <summary>
            KWP2000: 1A-87 "DCX-Identification"
            UDS: 22-F1-00 "Active Diagnostic Information"
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.Supplier">
            <summary>
            Supplier code
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.SerialNumber">
            <summary>
            Serial number / CRIN (car radio identification number)
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.KMatrixVersion">
            <summary>
            CAN K-Matrix version, if available
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.VariantName">
            <summary>
            ECU Variant name
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.EcuName">
            <summary>
            Name of the ECU 
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.EcuInfo.IsSecured">
            <summary>
            Is Ecu Secured
            </summary>
        </member>
        <member name="T:ET.Api.Diagnostics.VersionType">
            <summary>
            Type of version info
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionType.Undefined">
            <summary>Undefined version</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionType.HW">
            <summary>Hardware version</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionType.SWData">
            <summary>ECU Data Software ID</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionType.SWCode">
            <summary>ECU Code Software ID</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionType.Boot">
            <summary>Bootloader version</summary>
        </member>
        <member name="T:ET.Api.Diagnostics.VersionInfo">
            <summary>
            SW information (numbers) could be used to bundle SW version and part number
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.VersionInfo.#ctor(ET.Api.Diagnostics.VersionType,ET.FW.Hal.Diagnostics.EcuVersion,System.String)">
            <summary>
            Constructor. Initialize all fields
            </summary>
            <param name="type">type of version information</param>
            <param name="version">version: year, week, opt.: patch)</param>
            <param name="partNumber">part number</param>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionInfo.Type">
            <summary>
            Type of version information.
            </summary>
            <remarks>Field may only be available for some implementations and is not unique per ECU.</remarks>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionInfo.Version">
            <summary>
            Version info
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.VersionInfo.PartNumber">
            <summary>
            Part number
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.VersionInfo.ToString">
            <summary>
            Get version info as string
            </summary>
            <returns>version info string</returns>
        </member>
        <member name="T:ET.Api.Diagnostics.EcuType">
            <summary>
            Generic ECU Types
            </summary>
            <remarks>
            We use own names, because DIOGENES names differ between vehicle lines and K-Matrix names are inhomogenous
            If necessary a mapping to K-Matrix strings could be provided
            </remarks>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Undefined">
            <summary>Undefined ECU</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.HU">
            <summary>'Headunit', all cbfs with *HU*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Sound">
            <summary>'Sound', sound, sound25, sound45, sound_204*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.TunerSound">
            <summary>'Tuner with Sound', tua221, tus221, tus221evo </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Amplifier">
            <summary>'Amplifier' used some NTG3.5 tuner amplifiers (D_RQ_AMP. D_RS_AMP)</summary>
            <remarks>TODO: check if Amplifier and Sound should be combined to one type</remarks>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.TV">
            <summary>'TV Tuner', all cbfs with *TV*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Dab">
            <summary>'DAB Tuner', all cbfs with *DAB*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Sdars">
            <summary>'SDARS Tuner', all cbfs with *SDAR*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.DispC">
            <summary>'Central Display', dspc221, dispc_204</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.DispD">
            <summary>'Driver Display</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.CtrlC">
            <summary>'Central control Unit Front', ctrlc_204, ctrl221</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.Uci">
            <summary>The UCI</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.NaviBox">
            <summary>Navi Box / Joey (NTG 4.5), navbox45</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.FondUnit">
            <summary>The 'Fondunit'</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.DispRL">
            <summary>'Display Rear left', disp_rl*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.DispRR">
            <summary>'Display Rear right', disp_rr*</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.IC">
            <summary>'Instrument Cluster</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.TunerBox">
            <summary>Tuner Box</summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuType.CU">
            <summary>Communication unit (tele aid)</summary>
        </member>
        <member name="T:ET.Api.Diagnostics.EcuTypeNTG7">
            <summary>
            EcuType for NTG7
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.HU7">
            <summary>
            Headunit
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.RAMSES">
            <summary>
            Control Unit
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.IC223">
            <summary>
            Instrument Cluster
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.DISPC223">
            <summary>
            Central Display
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.DISP_D223">
            <summary>
            Driver Display
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.SND7">
            <summary>
            Sound ECU
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.RSU7">
            <summary>
            Rear Seat Unit
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.DISPRL7">
            <summary>
            Left Rear Display
            </summary>
        </member>
        <member name="F:ET.Api.Diagnostics.EcuTypeNTG7.DISPRR7">
            <summary>
            Right Rear Display
            </summary>
        </member>
        <member name="T:ET.Api.Diagnostics.IDtc">
            <summary>
            ECU error (Diagnostic trouble code)
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IDtc.Code">
            <summary>
            DTC code
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IDtc.State">
            <summary>
            DTC state
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IDtc.Priority">
            <summary>
            DTC priority
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IDtc.Meaning">
            <summary>
            Description of DTC
            </summary>
        </member>
        <member name="T:ET.Api.Diagnostics.IEcu">
            <summary>
            Interface for ECU diagnostics
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IEcu.Type">
            <summary>
            Generic type of this ECU
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IEcu.Info">
            <summary>
            ECU information part numbers, versions, etc
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.ReadCurrentDtcs">
            <summary>
            Read all identified DTCs
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <returns>Job which handles the operation and provides a collection of the the retrieved DTCs</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.ReadSupportedDtcs">
            <summary>
            Read all supported DTCs
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <returns>Job which handles the operation and provides a collection of the the retrieved DTCs</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.ClearDtc(System.UInt32)">
            <summary>
            Clear single DTC
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <param name="code">DTC code to clear</param>
            <returns>Job to monitor async operation</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.ClearAllDtcs">
            <summary>
            Clear all identified DTCs
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <returns>Job to monitor async operation</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.CreateVariantCoder">
            <summary>
            Creates a variant coder
            </summary>
            <returns>VariantCoder object</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcu.Reset">
            <summary>
            Send reset request to this ECU.
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <remarks>
            Some ECUs do not execute the reset immediately, this devices wait for the HU reset to execute own reset.
            </remarks>
            <returns>Job which handles the async operation.</returns>
        </member>
        <member name="T:ET.Api.Diagnostics.IEcuCollection">
            <summary>
            Interface for access to ECU diagnostics
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcuCollection.ReadOne(ET.Api.Diagnostics.EcuType)">
            <summary>
            Read information of one ECU (even if it is already buffered)
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <param name="type">Type of ECU to read from</param>
            <returns>Job to monitor async reading, the job result contains the requested information</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcuCollection.ReadAll">
            <summary>
            Read information of all ECUs, retrieved information is stored in Ecus of this collection
            If info is already buffered it is retrieved again
            Operation is executed asynchronously and can be monitored via returned jobs.
            </summary>
            <returns>
            Array of jobs to monitor async read operations, job results are the retrieved ECU objects
            </returns>
            <remarks>
            All ECUs are querried at the same time, using a bundle of parallel executed jobs.
            </remarks>
            <example>
            The example shows how to read all ECU infos
            <code>
            IEcuCollection ecus = Services.DiagnosticsBase.Ecus;
            IJob&lt;IEcu&gt;[] jobs = ecus.ReadAll();
            JobHandling.WaitAll(jobs);
            foreach(IEcu info in ecus) {
                // do something with ECU  info
            }
            </code></example>
        </member>
        <member name="M:ET.Api.Diagnostics.IEcuCollection.Get(ET.Api.Diagnostics.EcuType)">
            <summary>
            Get ECU information: If ECU information is in buffer it is returned directly, otherwise ReadOne() is used
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <param name="type">Type of ECU to read from</param>
            <returns>job to monitor async reading, the job result contains the requested information</returns>
        </member>
        <member name="P:ET.Api.Diagnostics.IEcuCollection.Item(ET.Api.Diagnostics.EcuType)">
            <summary>
            Retrieve information for one ECU from buffer
            </summary>
            <param name="type">ECU type to get info from</param>
            <returns>ECU information for given type</returns>
        </member>
        <member name="T:ET.Api.Diagnostics.IVariantCoder">
            <summary>
            ECU variant coder, Coder is used to read, buffer and write variant coding domains of an ECU.
            </summary>
            <remarks>
            Normal usage:
            - Read some VCDs to buffer: GetVcd()
            - Modify VCDs
            - Write modified VCDs back to ECU: WriteAll()
            - Dispose Variant Coder
            </remarks>
        </member>
        <member name="M:ET.Api.Diagnostics.IVariantCoder.Get(System.String)">
            <summary>
            Get single Variant Coding Domain from ECU. If VCD ist altready in buffer it is returned directly, otherwise it is read from ECU.
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <param name="name">VCD name</param>
            <returns>Job to monitor asynchron reading of data. On success the Result property holds the VCD data.</returns>
        </member>
        <member name="M:ET.Api.Diagnostics.IVariantCoder.WriteAll">
            <summary>
            Write all (modified) variant coding domains to ECU
            Operation is executed asynchronously and can be monitored via returned job.
            </summary>
            <returns>Job to monitor asynchron write operation.</returns>
        </member>
        <member name="P:ET.Api.Diagnostics.IVariantCoder.Names">
            <summary>
            Names of all supported variant coding domains of this device.
            </summary>
        </member>
        <member name="M:ET.Api.Diagnostics.IVariantCoder.WriteAllFromAedFile(System.String,System.String)">
            <summary>
            Write variant coding domains of an ECU from aed file for a given configuration
            Write operation continues even if some domain write fails.
            Check logs for domains whose write operation failed
            </summary>
            <param name="path"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="P:ET.Api.Diagnostics.IVariantCoder.Vcds">
            <summary>
            Buffer of VCDs in memory
            </summary>
        </member>
        <member name="T:ET.Api.Diagnostics.IVcd">
            <summary>
            Variant Coding Data (name + data block)
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IVcd.Data">
            <summary>
            Binary data (code string)
            </summary>
            <value>Coding bytes array or null if not read</value>
        </member>
        <member name="T:ET.Api.Diagnostics.IBaseDiagnostics">
            <summary>
            Basic Diagnostic Interface
            </summary>
        </member>
        <member name="P:ET.Api.Diagnostics.IBaseDiagnostics.Ecus">
            <summary>
            Collection of ECUs
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IEthernetDevice">
            <summary>
            Allows access to a Ethernet device.
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IEthernetService">
            <summary>
            EthernetSignals service. Allows access to all Ethernet signals in the framework directly or over busses selection.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetService.Busses">
            <summary>
            Access to the Ethernet busses
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetService.TrySetSynchronizedSignals(ET.Api.Ethernet.ISynchronizedSetter[])">
            <summary>
            Method to set signals synchronized. Trys to set all signals. If the signals not available, the setting will not be performed. 
            </summary>
            <example>
            EthernetService.TrySetSynchronizedSignals(
            	EthernetService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	EthernetService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	EthernetService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="signalSetterList">The list with all synchronized settings.</param>
            <returns><c>true</c>, if setting was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.Api.Ethernet.IEthernetSignals">
            <summary>
            EthernetSignals selection.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignals.Item(System.String)">
            <summary>
            Get the Ethernet signal object
            </summary>
            <remarks>
            Ignored signals are not accessable.
            </remarks>
            <param name="signalName">the name of the Ethernet signal (from the dbc)</param>
            <returns>An observable Ethernet signal</returns>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetSignals.Contains(System.String)">
            <summary>
            Indicates if the signal is available
            </summary>
            <param name="signalName">the name of the Ethernet signal (from the dbc)</param>
            <returns>true if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetSignals.TryGetSignal(System.String,ET.Api.Ethernet.IObservableEthernetSignal@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <param name="signalName">the name of the Ethernet signal (from the dbc)</param>
            <param name="signal">an observable Ethernet signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetSignals.TryGetSignal``1(System.String,ET.Api.Ethernet.IObservableEthernetSignal{``0}@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <typeparam name="BaseType">Specific type of the Ethernet signal.</typeparam>
            <param name="signalName">the name of the Ethernet signal (from the dbc)</param>
            <param name="signal">an observable Ethernet signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetSignals.GetAllSignals">
             <summary>
            List of all Signals
             </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IEthernetSignalsBus">
            <summary>
            EthernetSignals bus access.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.Signals">
            <summary>
            Access to the signals
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.VlanAccess">
            <summary>
            Access to the Vlans
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.Vlans">
            <summary>
            Access to the Vlans List
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.Nodes">
            <summary>
            Access to the Ethernet nodes.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.NMProtocol">
            <summary>
            Nm protocol type.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IEthernetSignalsBus.State">
            <summary>
            Indicates the bus nm state
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IEthernetVlans">
            <summary>
            EthernetVlans selection.
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.IEthernetVlans.TryGetVlan(System.UInt32,ET.Api.Ethernet.IEthernetSignals@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <param name="vlanId">Vlan Id</param>
            <param name="vlan">Vlan Definition</param>
            <returns>true, if the Vlan is available.</returns>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetMessage">
            <summary>
            The observable Ethernet message. The message simulation Ethernet be started and stopped via Start()/Stop(). Running indication via IsRunning;
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetMessage.Definition">
            <summary>
            The Ethernet message definition parameters
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetRawSignal">
            <summary>
            Dynamic raw value (bitwise) interface of a Ethernet signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetRawSignal.IsReadOnly">
            <summary>
            Core.States if value of the signal is read only 
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetRawSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetRawSignal.SynchronizedSet(System.UInt64)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            EthernetService.TrySetSynchronizedSignals(
            	EthernetService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	EthernetService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	EthernetService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that Ethernet be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetRawSignal.Validate(System.UInt64)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetRawSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetRawSignal.Timestamp">
            <summary>
            The last timestamp, that the Ethernet-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetSignal">
            <summary>
            Dynamic string orientated Ethernet Signal interface
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Bus">
            <summary>
            Belonging bus
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Unit">
            <summary>
            Unit of the signal value
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.IsReadOnly">
            <summary>
            value of the signal is read only.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.IsSimulated">
            <summary>
            The signal is simulated, if the presence of the message is simulated
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.ArrayDefinition">
            <summary>
            Full Array definition of the signal 
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Type">
            <summary>
            Value type of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.MinDelayTime">
            <summary>
            Get min delay time for signal
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetSignal.SynchronizedSet(System.String)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            EthernetService.TrySetSynchronizedSignals(
            	EthernetService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	EthernetService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	EthernetService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that Ethernet be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetSignal.Validate(System.String)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Raw">
            <summary>
            Access to the raw values (bitwise) of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Message">
            <summary>
            Ethernet message access
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal.Timestamp">
            <summary>
            The last timestamp, that the Ethernet-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetSignal`1">
            <summary>
            Dynamic type specific interface of the Ethernet signal
            </summary>
            <typeparam name="BaseType">Specific type of the Ethernet signal</typeparam>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal`1.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal`1.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal`1.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetSignal`1.SynchronizedSet(`0)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <example>
            EthernetService.TrySetSynchronizedSignals(
            	EthernetService["ISw_Stat"].SynchronizedSet("IGN_LOCK"),
            	EthernetService["Ign_On_StProc_Inact"].SynchronizedSet("1"),
            	EthernetService["KG_IgnCtrl_Actv"].SynchronizedSet("1"));
            </example>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that Ethernet be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Ethernet.IObservableEthernetSignal`1.Validate(`0)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignal`1.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetSignalGroup">
            <summary>
            API for observable Ethernet signal groups
            A signal group handles a number of Ethernet signals which belong together.
            All signals of a group are part of the same Ethernet message.
            Read methods and events ensure that signal values are taken from one received Ethernet message
            Write methods ensures that all signal values are changed simultaneously in one transmitted message.
            </summary>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignalGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether this signal group is read only.
            Group is read only the message containing all signals is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            <remarks>
            Even if the group is not read only, an included signal might be read only if it belongs to an inactive signal group.
            </remarks>
        </member>
        <member name="T:ET.Api.Ethernet.IObservableEthernetSignalValue`1">
            <summary>
            Public API for access to Ethernet signal values.
            Interface extends the ObservableOject interface to provide access to the actual API side value. 
            API-side value may differ from value, if it is currently waiting for transmission.
            </summary>
            <remarks>
            Value property setter sets the API side value, which then is included in the next message transmission.
            Value property getter and Changed event use the last signal value signaled from the Ethernet hardware.
            ApiSideValue property holds latest set value. It may be different from current Value as long as a changed value is not transmitted.
            </remarks>
            <typeparam name="T">Type of observable Ethernet signal value</typeparam>
        </member>
        <member name="P:ET.Api.Ethernet.IObservableEthernetSignalValue`1.ApiSideValue">
            <summary>
            Access to actual API side value.
            </summary>
            <remarks>
            Latest signal value set via the Value property.
            API-side value may differ from current Value, if it is waiting for transmission.
            </remarks>
        </member>
        <member name="T:ET.Api.Ethernet.ISynchronizedSetter">
            <summary>
            Supports the synchronized setting of object values.
            </summary>
        </member>
        <member name="M:ET.Api.Ethernet.ISynchronizedSetter.Set">
            <summary>
            Do the set action.
            </summary>
            <returns><c>true</c>, if action was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Ethernet.ISynchronizedSetter.IsSignalMultiplexor">
            <summary>
            Is signal multiplexor
            </summary>
        </member>
        <member name="T:ET.Api.IAudioRecorder">
            <summary>
            Recorder object to save recordings
            </summary>
        </member>
        <member name="M:ET.Api.IAudioRecorder.Start">
            <summary>
            Starts this recording
            </summary>
        </member>
        <member name="M:ET.Api.IAudioRecorder.Start(System.String)">
            <summary>
            StartRecording - Open the file, write header, set recordingFlag to true
            </summary>
            <example>
            var path = Log.Logger.GetAttachmentFilename("recordingfilename", ".wav");
            Start(path);
            </example>
        </member>
        <member name="M:ET.Api.IAudioRecorder.Stop(System.Boolean)">
            <summary>
            Stops this recording, delete the file or put it into log
            </summary>
            <param name="deleteRecording">if set to <c>true</c> [delete recording].</param>
        </member>
        <member name="P:ET.Api.IAudioRecorder.DetectedError">
            <summary>
            After the AudioRecorder was stopped this property is TRUE
            if an error was detected during the recording
            </summary>
        </member>
        <member name="P:ET.Api.IAudioRecorder.DetectedErrorMessage">
            <summary>
            If <see cref="P:ET.Api.IAudioRecorder.DetectedError"/> is set to TRUE after the Recorder was stopped,
            this property provides a detailed ErrorMessage.
            </summary>
        </member>
        <member name="T:ET.Api.IFrameRecordingService">
            <summary>
            Interface for Video Recording
            </summary>
        </member>
        <member name="M:ET.Api.IFrameRecordingService.StartRecording(System.String,System.String)">
            <summary>
            Starts recording for the specified grabber
            </summary>
            <param name="name">Framegrabber device name to be used for recording</param>
            <param name="fileName">File name for saving recordings without extension</param>
            <returns>recording session Id if recording started else returns -1</returns>
        </member>
        <member name="M:ET.Api.IFrameRecordingService.StopRecording(System.Int32)">
            <summary>
            Stops recording for the specified grabber
            </summary>
            <param name="sessionId">Recording session Id</param>
            <returns></returns>
        </member>
        <member name="T:ET.Api.InstrumentCluster.DialogNode">
            <summary>
            Enumeration storing codes for all nodes
            </summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.DialogNode.Aud">
            <summary>Aud</summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.DialogNode.Nav">
            <summary>Nav</summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.DialogNode.Tel">
            <summary>Tel</summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.IDataField">
            <summary>
            Interface for ADC-Datafields
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.GridField">
            <summary>
            The GridField this data-field was generated from
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.EntryID">
            <summary>
            The EntryID
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.ClusterLineID">
            <summary>
            The ClusterLineID, if the DataField is part of a ClusterLine
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.DatafieldID">
            <summary>
            The DatafieldID within the ADC-message
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.ListLine">
            <summary>
            The ListLine, if this datafield is part of a list.<para></para>
            Values less or equal zero mean: not set.
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IDataField.SpecialData">
            <summary>
            Optional Flag whether this DataField represents SpecialData
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.IExtendedNodeData">
            <summary>
            An extended NodeData for NTG5, providing the DataFields
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IExtendedNodeData.DataFields">
            <summary>
            The Datafields of the ADC-message. IDs are interpreted with the corresponding Dash-data
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.IGridField">
            <summary>
            Interface for gridfields
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IGridField.FieldType">
            <summary>Type of the gridfield</summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IGridField.Content">
            <summary>The content of the gridfield as bytearray</summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IGridField.ContentInterpretation">
            <summary>Textual interpretation of the content</summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.IGridField.ContentObject">
            <summary>
            Object containing detailed informations about
            the content of the gridfield. Depending on fieldtype
            and ntg there are completely different objects.
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.FieldTypes">
            <summary>
            Possible gridfieldtypes
            </summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.FieldTypes.Title">
            <summary>Title (NTG35 / NTG45)</summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.FieldTypes.Entry">
            <summary>Entry (NTG35 / NTG45)</summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.FieldTypes.Icon">
            <summary>Icon (NTG35 / NTG45)</summary>
        </member>
        <member name="F:ET.Api.InstrumentCluster.FieldTypes.DataField">
            <summary>DataField (NTG50)</summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.IInstrumentCluster">
            <summary>
            Interface for InstrumentClusterService
            providing a virtual combiscreen collecting
            adc / extki messages.
            </summary>
        </member>
        <member name="M:ET.Api.InstrumentCluster.IInstrumentCluster.GetNodeData(ET.Api.InstrumentCluster.DialogNode)">
            <summary>
            Getting the data for the given node
            </summary>
            <param name="node">Node to get the data for</param>
            <returns>The nodedata</returns>
        </member>
        <member name="E:ET.Api.InstrumentCluster.IInstrumentCluster.NodeDataChangedEvent">
            <summary>
            Occures when the nodedata changed due to ADC message receive
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.IInstrumentClusterWithDashServiceExtension">
            <summary>
            Interface for the service extending InstrumentCluster
            </summary>
        </member>
        <member name="M:ET.Api.InstrumentCluster.IInstrumentClusterWithDashServiceExtension.GetNodeData(ET.Api.InstrumentCluster.DialogNode)">
            <summary>
            Getting the data for the given node
            </summary>
            <param name="node">Node to get the data for</param>
            <returns>The nodedata</returns>
        </member>
        <member name="E:ET.Api.InstrumentCluster.IInstrumentClusterWithDashServiceExtension.NodeDataChangedEvent">
            <summary>
            Occures when the nodedata changed due to ADC message receive
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.INodeData">
            <summary>
            Interface for nodedata
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.Node">
            <summary>
            Gets the nodeaddress
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.SessionId">
            <summary>
            Gets the sessionId
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.GridName">
            <summary>
            Gets the name of the current grid
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.GridId">
            <summary>
            Gets the id of the current grid
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.CodePage">
            <summary>
            Gets the codepage
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.Timestamp">
            <summary>Timestamp of the last update</summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.INodeData.GridFields">
            <summary>
            Gets the list of the gridfields
            </summary>
        </member>
        <member name="T:ET.Api.InstrumentCluster.NodeDataChangedEventArgs">
            <summary>
            Eventarguments for NodeDataChangedEvent
            </summary>
        </member>
        <member name="P:ET.Api.InstrumentCluster.NodeDataChangedEventArgs.Node">
            <summary>
            Node which has changed
            </summary>
        </member>
        <member name="M:ET.Api.InstrumentCluster.NodeDataChangedEventArgs.#ctor(ET.Api.InstrumentCluster.DialogNode)">
            <summary>
            Constructor setting the node for this arguments
            </summary>
            <param name="node">Node which has changed</param>
        </member>
        <member name="T:ET.Api.IAudioProcessing">
            <summary>
            Interface of AudioProcessing Service
            </summary>
        </member>
        <member name="P:ET.Api.IAudioProcessing.Results">
            <summary>
            Dictionary of observable object for Audio Results of the different channels
            </summary>
        </member>
        <member name="M:ET.Api.IAudioProcessing.GetAudioRecorder(System.String,System.Collections.Generic.IEnumerable{ET.Api.AudioChannel})">
            <summary>
            Starts the recording for the given audio channel. If audioChannel is a virtual channel,
            the recording is started for the corresponding native channel only.
            </summary>
            <param name="name">a name for this recording</param>
            <param name="audioChannels">The audio channels needed in the recording</param>
            <returns>A new AudioRecorder</returns>
        </member>
        <member name="P:ET.Api.IAudioProcessing.Amplitudes">
            <summary>
            Amplitudes contain the last found amplitudes for each fixFrequency as in the FixFrequencyArray
            </summary>
            <value>The amplitudes.</value>
        </member>
        <member name="M:ET.Api.IAudioProcessing.GetClonedKnownFrequencies">
            <summary>
            Returns a cloned array of the known frequencies.
            </summary>
            <returns>The cloned array of the known frequencies</returns>
        </member>
        <member name="P:ET.Api.IAudioProcessing.BufferChunks">
            <summary>
            Count of chunks of sample buffer
            </summary>		
        </member>
        <member name="P:ET.Api.IAudioProcessing.NativeChannelMap">
            <summary>
            native channel map contains all channels and their corresponding native channel(s)
            The List element contains only native channels.
            Native channels map to a single-element list, virtual channels may have more than one native channel.
            </summary>
        </member>
        <member name="E:ET.Api.IAudioProcessing.IsRunningStateChanged">
            <summary>
            Event which becomes raised, when IsRunning becomes changed.
            </summary>
        </member>
        <member name="T:ET.Api.ITraceService">
            <summary>
            Service interface of tracing
            </summary>
        </member>
        <member name="P:ET.Api.ITraceService.Tracing">
            <summary>
            Current Tracing instance
            </summary>
        </member>
        <member name="M:ET.Api.ITraceService.GetAttachmentFilename(System.String,System.String)">
            <summary>
            Get a filename with full path of trace
            </summary>
            <param name="name">The name of file, without path and extension</param>
            <param name="extension">The extension of file</param>
            <returns>filename with full path</returns>
        </member>
        <member name="M:ET.Api.ITraceService.TraceLink(System.String,System.String,System.String)">
            <summary>
            Traces file as link.
            </summary>
            <param name="source">The source name, which traces the link</param>
            <param name="filename">The filename, which already exists in Trace</param>
            <param name="displayName">The display name oder description of the link</param>
        </member>
        <member name="T:ET.Api.Lin.ILinDevice">
            <summary>
            Allows access to a Lin device.
            </summary>
        </member>
        <member name="T:ET.Api.Lin.ILinService">
            <summary>
            LinSignals service. Allows access to all Lin signals in the framework directly or over busses selection.
            </summary>
        </member>
        <member name="P:ET.Api.Lin.ILinService.Busses">
            <summary>
            Access to the Lin busses
            </summary>
        </member>
        <member name="M:ET.Api.Lin.ILinService.TrySetSynchronizedSignals(ET.Api.Lin.ISynchronizedSetter[])">
            <summary>
            Method to set signals synchronized. Trys to set all signals. If the signals not available, the setting will not be performed. 
            </summary>
            <param name="signalSetterList">The list with all synchronized settings.</param>
            <returns><c>true</c>, if setting was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.Api.Lin.ILinSignals">
            <summary>
            LinSignals selection.
            </summary>
        </member>
        <member name="P:ET.Api.Lin.ILinSignals.Item(System.String)">
            <summary>
            Get the Lin signal object
            </summary>
            <remarks>
            Ignored signals are not accessable.
            </remarks>
            <param name="signalName">the name of the Lin signal (from the dbc)</param>
            <returns>An observable Lin signal</returns>
        </member>
        <member name="M:ET.Api.Lin.ILinSignals.Contains(System.String)">
            <summary>
            Indicates if the signal is available
            </summary>
            <param name="signalName">the name of the Lin signal (from the dbc)</param>
            <returns>true if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Lin.ILinSignals.TryGetSignal(System.String,ET.Api.Lin.IObservableLinSignal@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <param name="signalName">the name of the Lin signal (from the dbc)</param>
            <param name="signal">an observable Lin signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Lin.ILinSignals.TryGetSignal``1(System.String,ET.Api.Lin.IObservableLinSignal{``0}@)">
            <summary>
            Indicates if the signal is available and returns it
            </summary>
            <typeparam name="BaseType">Specific type of the Lin signal.</typeparam>
            <param name="signalName">the name of the Lin signal (from the dbc)</param>
            <param name="signal">an observable Lin signal</param>
            <returns>true, if the signal is available.</returns>
        </member>
        <member name="M:ET.Api.Lin.ILinSignals.GetAllSignals">
            <summary>
            List of all signals.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.Lin.ILinSignalsBus">
            <summary>
            LinSignals bus access.
            </summary>
        </member>
        <member name="P:ET.Api.Lin.ILinSignalsBus.Signals">
            <summary>
            Access to the signals
            </summary>
        </member>
        <member name="P:ET.Api.Lin.ILinSignalsBus.Nodes">
            <summary>
            Access to the Lin nodes.
            </summary>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinMessage">
            <summary>
            The observable Lin message. The message simulation can be started and stopped via Start()/Stop(). Running indication via IsRunning;
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinMessage.Definition">
            <summary>
            The Lin message definition parameters
            </summary>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinRawSignal">
            <summary>
            Dynamic raw value (bitwise) interface of a Lin signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinRawSignal.IsReadOnly">
            <summary>
            Core.States if value of the signal is read only 
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinRawSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinRawSignal.SynchronizedSet(System.UInt64)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that can be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinRawSignal.Validate(System.UInt64)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinRawSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinRawSignal.Timestamp">
            <summary>
            The last timestamp, that the Lin-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinSignal">
            <summary>
            Dynamic string orientated Lin Signal interface
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Bus">
            <summary>
            Belonging bus
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Unit">
            <summary>
            Unit of the signal value
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.IsReadOnly">
            <summary>
            value of the signal is read only.
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.IsSimulated">
            <summary>
            The signal is simulated, if the presence of the message is simulated
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Type">
            <summary>
            Value type of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinSignal.SynchronizedSet(System.String)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that Lin be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinSignal.Validate(System.String)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Raw">
            <summary>
            Access to the raw values (bitwise) of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Message">
            <summary>
            Lin message access
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal.Timestamp">
            <summary>
            The last timestamp, that the Lin-Signal received from HW
            </summary>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinSignal`1">
            <summary>
            Dynamic type specific interface of the Lin signal
            </summary>
            <typeparam name="BaseType">Specific type of the Lin signal</typeparam>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal`1.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal`1.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal`1.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinSignal`1.SynchronizedSet(`0)">
            <summary>
            Sets the value of the signal synchronized with other signals.
            </summary>
            <param name="value">The new value to set.</param>
            <returns>An ISynchronizedSetter object that Lin be synchronized setted. </returns>
        </member>
        <member name="M:ET.Api.Lin.IObservableLinSignal`1.Validate(`0)">
            <summary>
            Validates a value without setting it.
            </summary>
            <param name="value">The signal value to validate.</param>
            <returns><c>true</c> if value is settable, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignal`1.Current">
            <summary>
            Current value of the signal
            </summary>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinSignalGroup">
            <summary>
            API for observable Lin signal groups
            A signal group handles a number of Lin signals which belong together.
            All signals of a group are part of the same Lin message.
            Read methods and events ensure that signal values are taken from one received Lin message
            Write methods ensures that all signal values are changed simultaneously in one transmitted message.
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignalGroup.MessageDefinition">
            <summary>
            Definition of message containing all signals of group;
            </summary>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignalGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether this signal group is read only.
            Group is read only the message containing all signals is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            <remarks>
            Even if the group is not read only, an included signal might be read only if it belongs to an inactive signal group.
            </remarks>
        </member>
        <member name="T:ET.Api.Lin.IObservableLinSignalValue`1">
            <summary>
            Public API for access to Lin signal values.
            Interface extends the ObservableOject interface to provide access to the actual API side value. 
            API-side value may differ from value, if it is currently waiting for transmission.
            </summary>
            <remarks>
            Value property setter sets the API side value, which then is included in the next message transmission.
            Value property getter and Changed event use the last signal value signaled from the Lin hardware.
            ApiSideValue property holds latest set value. It may be different from current Value as long as a changed value is not transmitted.
            </remarks>
            <typeparam name="T">Type of observable Lin signal value</typeparam>
        </member>
        <member name="P:ET.Api.Lin.IObservableLinSignalValue`1.ApiSideValue">
            <summary>
            Access to actual API side value.
            </summary>
            <remarks>
            Latest signal value set via the Value property.
            API-side value may differ from current Value, if it is waiting for transmission.
            </remarks>
        </member>
        <member name="T:ET.Api.Lin.ISynchronizedSetter">
            <summary>
            Supports the synchronized setting of object values.
            </summary>
        </member>
        <member name="M:ET.Api.Lin.ISynchronizedSetter.Set">
            <summary>
            Do the set action.
            </summary>
            <returns><c>true</c>, if action was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.Api.Services">
            <summary>
            Direct access to frequently used services
            </summary>
        </member>
        <member name="P:ET.Api.Services.InstrumentClusterService">
            <summary>
            Access service which provides methods for window creation and GUI thread invokation
            </summary>
        </member>
        <member name="P:ET.Api.Services.WindowHandling">
            <summary>
            Access service which provides methods for window creation and GUI thread invokation
            </summary>
        </member>
        <member name="P:ET.Api.Services.WindowHandlingWpf">
            <summary>
            Access service which provides methods for window creation and GUI thread invokation
            </summary>
        </member>
        <member name="P:ET.Api.Services.TraceService">
            <summary>
            Access service which provides methods for tracing attachments
            </summary>
        </member>
        <member name="P:ET.Api.Services.AudioProcessing">
            <summary>
            Access audio processing service
            </summary>
        </member>
        <member name="P:ET.Api.Services.CanService">
            <summary>
            Direct access to all CanSignals
            </summary>
        </member>
        <member name="P:ET.Api.Services.LinService">
            <summary>
            Direct access to all LinSignals
            </summary>
        </member>
        <member name="P:ET.Api.Services.DiagnosticsBase">
            <summary>
            Access base diagnostics service (interface provides common functionality)
            </summary>
        </member>
        <member name="P:ET.Api.Services.UserDataService">
            <summary>
            Access user data service
            </summary>
        </member>
        <member name="P:ET.Api.Services.EthernetService">
            <summary>
            Provides access to Ethernet Service
            </summary>
        </member>
        <member name="P:ET.Api.Services.ZenzefiService">
            <summary>
            Provides access to DiagnosticsAuthenticationService
            </summary>
        </member>
        <member name="T:ET.Api.ServiceName">
            <summary>
            Service name consts
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.InstrumentCluster">
            <summary>
            Name InstrumentCluster
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.WindowHandling">
            <summary>
            Name WindowHandling
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.TraceService">
            <summary>
            Name TraceService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.AudioProcessing">
            <summary>
            Name AudioProcessing
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.CanService">
            <summary>
            Name CanService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.EthernetService">
            <summary>
            Name EthernetService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.ZenzefiService">
            <summary>
            Name ZenzefiService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.Diagnostics">
            <summary>
            Name Diagnostics
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.DiagnosticsCan">
            <summary>
            Name Diagnostics Can
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.UserDataService">
            <summary>
            Name UserDataService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.LinService">
            <summary>
            Name LinService
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.CanLinGatewayService">
            <summary>
            Name CanLinGateway
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.CanEthernetGatewayService">
            <summary>
            Name CanEthernetGateway
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.CanResponderService">
            <summary>
            Name Cansignal Responder service
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.FlexRayService">
            <summary>
            Flex Ray Service
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.CanFlexRayGatewayService">
            <summary>
            Name CanFlexRayGateway
            </summary>
        </member>
        <member name="F:ET.Api.ServiceName.GatewayService">
            <summary>
            Name GatewayService
            </summary>
        </member>
        <member name="T:ET.Api.States.Helper.NumericCompareModes">
            <summary>
            NumericCompareModes.
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.Unequal">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.Less">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.LessOrEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.Greater">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.NumericCompareModes.GreaterOrEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="T:ET.Api.States.Helper.SimpleCompareModes">
            <summary>
            Simple Compare-Modes. Is a part of NumericCompareModes and must becompatible,
            i.e. both, names and values must be equal.
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.SimpleCompareModes.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:ET.Api.States.Helper.SimpleCompareModes.Unequal">
            <summary>
            !=
            </summary>
        </member>
        <member name="T:ET.Api.States.Interfaces.IMultipleStateElement">
            <summary>
            Interface for TestJobs, which defines a Get-Method to Gather
            all state-names being referenced by the TestStep
            </summary>
        </member>
        <member name="M:ET.Api.States.Interfaces.IMultipleStateElement.GetStateNames">
            <summary>
            Returns a List with all StateNames a Job used
            but the one defined as RequiredState.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.Api.States.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.General.Error("An error occured");
            </code>
            </example>
        </member>
        <member name="P:ET.Api.States.Log.StateService">
            <summary>
            Logger with code ...
            </summary>
        </member>
        <member name="T:ET.Api.States.Service.StateService">
            <summary>
            Service for Core.States.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.#ctor(System.String)">
            <summary>
            The Constructor
            </summary>
            <param name="name">The name of the service</param>
        </member>
        <member name="M:ET.Api.States.Service.StateService.Init">
            <summary>
            Initializes the StateService.<para></para>
            Loads the stateRepository.
            </summary>
            <returns>TRUE if initialized, FALSE if not.</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.InitStateDefinitions">
            <summary>
            Helper to initialize the StateDefinitions
            </summary>
            <returns>FALSE if an error occured, TRUE otherwise</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.LoadStateDefinitions(System.Collections.Generic.List{System.Type})">
            <summary>
            Loads the stateDefinitions whose type is known and writes them to the StateRepository
            </summary>
            <param name="knownTypes">A list with the known StateDefinitionTypes</param>
            <returns>FALSE if an error occured, TRUE otherwise.</returns>
        </member>
        <member name="F:ET.Api.States.Service.StateService.checkerDictionary">
            <summary>
            Dictionary with Key = Type of AAtomicStateDefinition and Value = an instance of the checker for the DefinitionType.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.GetCheckerForStateDefinition(ET.FW.Core.States.Definition.ABaseStateDefinition)">
            <summary>
            Returns the corresponding AtomicStateChecker for the given stateDefinition. <para></para>
            If the stateDefinition is null or not an AAtomicStateDefinition or not checker is registered for the Type,
            null is returned.
            </summary>
            <param name="stateDefinition">The StateDefinition for which the checker is searched.</param>
            <returns>The found matching checker of null, if no checker is found</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.ProcessTypeDefinitionContainer(System.Collections.Generic.List{System.Type}@)">
            <summary>
            Works through the TypeDefinitionContainer, determines all known Types of StateDefinitions and
            builds up the checkerDictionary
            </summary>
            <param name="knowDefinitionTypes">out: List with all found StateDefinitionTypes.</param>
            <returns>FALSE if an error occured, TRUE if not.</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.FillTypeDefinitionContainer">
            <summary>
            Fills the TypeDefinitionContainer
            </summary>
            <returns>TRUE if the container was filled successfully, FALSE otherwise</returns>
        </member>
        <member name="P:ET.Api.States.Service.StateService.StateRepository">
            <summary>
            The State-Repository
            </summary>
        </member>
        <member name="P:ET.Api.States.Service.StateService.TypeDefinitionContainer">
            <summary>
            The Container with the StateTypeDefinitions
            </summary>
        </member>
        <member name="P:ET.Api.States.Service.StateService.RepositoryFileName">
            <summary>
            Name of the XML-File with the state-repository
            </summary>
        </member>
        <member name="P:ET.Api.States.Service.StateService.ManuallyControlStateActivation">
            <summary>
            If set to TRUE, the activation and deactivation of states
            is handled manually.<para></para>
            If set to FALSE (default) all states required by the TestJobs within
            a TestPlanVariant are automatically activated, when the variant is started
            and deactivated at it's end - but they can still be changed manually.
            </summary>
        </member>
        <member name="P:ET.Api.States.Service.StateService.StateTypeDefinitionFileName">
            <summary>
            Name of the XML-File containing the definitions of the stateTypes.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.Dispose">
            <summary>
            Disposes the StateService
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.Start">
            <summary>
            Starts the StateService
            </summary>
            <returns>TRUE if this service is started, FALSE otherwise</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.TestPlanManager_FullJobListChanged(System.Object,ET.FW.PPL.Execution.FullJobListChangedEventArgs)">
            <summary>
            Handler for the event fired by the TestPlanManager, if the list of current jobs has changed,
            i.e. when another testvariant is started.
            </summary>
            <param name="sender">the sender</param>
            <param name="args">the eventargs with the list containing all job which are to be executed next.</param>
        </member>
        <member name="M:ET.Api.States.Service.StateService.UpdateCurrentJobsList">
            <summary>
            Deactivates all stateDefinitions, and (re)starts all those needed,
            by the Jobs in the currentJobs-List.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.DeactivateStateDefinition(ET.FW.Core.States.Definition.ABaseStateDefinition)">
            <summary>
            Deactivates the given StateDefinition
            </summary>
            <param name="stateDef">The stateDefinition to deactivate.</param>
        </member>
        <member name="M:ET.Api.States.Service.StateService.ActivateStateDefinition(ET.FW.Core.States.Definition.ABaseStateDefinition)">
            <summary>
            Activates the passed StateDefinitions
            </summary>
            <param name="stateDef">The StateDefinition to activate.</param>
        </member>
        <member name="M:ET.Api.States.Service.StateService.Stop">
            <summary>
            Stop the StateService
            </summary>
        </member>
        <member name="P:ET.Api.States.Service.StateService.IsRunning">
            <summary>
            Flag, whether the StateService is running.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.GetState(System.String)">
            <summary>
            Returns the StateDefinition with the given name<para></para>
            </summary>
            <param name="name">The name of the searched state</param>
            <returns>the found state or null, if none could be found.</returns>
        </member>
        <member name="M:ET.Api.States.Service.StateService.DeactivateAllStates">
            <summary>
            Deactivates all known states.
            </summary>
        </member>
        <member name="M:ET.Api.States.Service.StateService.ActivateStates(System.Collections.Generic.List{System.String})">
            <summary>
            Activates all states whose names are contained within the given list
            </summary>
            <param name="stateNames">The names of those states to activate</param>
        </member>
        <member name="M:ET.Api.States.Service.StateService.DeactivateStates(System.Collections.Generic.List{System.String})">
            <summary>
            Deactivates all states whose names are contained within the given list
            </summary>
            <param name="stateNames">The names of those states to deactivate</param>
        </member>
        <member name="T:ET.Api.TraceService">
            <summary>
            Trace Service
            </summary>
        </member>
        <member name="M:ET.Api.TraceService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.Api.TraceService"/> class.
            </summary>
            <param name="name">Name of service</param>
        </member>
        <member name="P:ET.Api.TraceService.Tracing">
            <summary>
            Current Tracing instance
            </summary>
        </member>
        <member name="M:ET.Api.TraceService.GetAttachmentFilename(System.String,System.String)">
            <summary>
            Get a filename with full path of trace
            </summary>
            <param name="name">The name of file, without path and extension</param>
            <param name="extension">The extension of file</param>
            <returns>filename with full path</returns>
        </member>
        <member name="M:ET.Api.TraceService.TraceLink(System.String,System.String,System.String)">
            <summary>
            Traces file as link.
            </summary>
            <param name="source">The source name, which traces the link</param>
            <param name="filename">The filename, which already exists in Trace</param>
            <param name="displayName">The display name oder description of the link</param>
        </member>
        <member name="M:ET.Api.TraceService.Init">
            <summary>
            Initialize the service
            </summary>
            <returns><c>true</c>, if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.Api.TraceService.Dispose">
            <summary>
            Shutdown the service
            </summary>
        </member>
    </members>
</doc>
