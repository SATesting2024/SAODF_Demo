<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.FW.Hal.Ethernet</name>
    </assembly>
    <members>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator">
            <summary>
            makes the required compu method calculations
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.UnitsArpackage">
            <summary>
            Units xml package
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.ExtractSignalData(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD,System.Type)">
            <summary>
            Extracts the Signal data
            </summary>
            <param name="xmlRoot">xml root node</param>
            <param name="compuMethod">compu Method instance</param>
            <param name="definition">signal Definition</param>
            <param name="dataType">datatype of signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.SetupBitField(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPU,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Sets up the Bitfield textable type of Signal
            </summary>
            <param name="compuMethod">compu Method instance</param>
            <param name="Definition">signal Definition</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.GetMaximumBitwiseValue(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Fetching the Maximum Bitwise Value from the lenght.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.SetupInteger(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="Definition">Signal definition</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPURATIONALCOEFFS,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
            <param name="Definition">Signal definition</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.GetLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.SetupBoolean(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="Definition">Signal definition</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.CompuMethodCreator.GetMaskedLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>String value of the limit</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.DataElementType">
            <summary>
            DataElementTypes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.DataElementType.Value">
            <summary>
            Basic variable types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.DataElementType.Array">
            <summary>
            User Defined: Array type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.DataElementType.Record">
            <summary>
            User Defined: STRUCTURE/RECORD type
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetTPNetworkDefinition">
            <summary>
            Represents the ETHERNET network with different devices and additional TP connections
            </summary>
            <remarks>
            Extension of the standard network definition with additional TP connections information
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetTPNetworkDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetTPNetworkDefinition"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetTPNetworkDefinition.TPChannels">
            <summary>
            TP channel definitions
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator">
            <summary>
            Class creates a RpcMethoddefiniton
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.Definition">
            <summary>
            Method definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.DataConstraints">
            <summary>
            DataConstraints
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.CompuMethods">
            <summary>
            CompuMethods
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.CompuFunction">
            <summary>
            CompuMethods
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,System.String,System.String,System.Object,System.String)">
            <summary>
            Method creator
            </summary>
            <param name="xmlRoot">XmlRoot</param>
            <param name="argumentDataType">argumentPremitiveDataType</param>
            <param name="name">name</param>
            <param name="direction">direction</param>
            <param name="argumenttype">argumenttype</param>
            <param name="dataConstraints">dataConstraints ARPACKAGE</param>
            <param name="compuMethods">COMPUMETHODS ARPACKAGE</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.GetMaximumBitwiseValue(System.Int32)">
            <summary>
            Fetching the Maximum Bitwise Value from the lenght.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.SetupBitField(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPU,System.UInt32@,System.UInt32@)">
            <summary>
            Parsing the BITFIELD TEXTTABLE Signal type.
            </summary>
            <param name="compuMethod">Computation Method.</param>
            <param name="lowerLimit">Computation Method.</param>
            <param name="upperLimit">Computation Method.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.CreateEthernetValueArguemnt(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,System.String,System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONPRIMITIVEDATATYPE)">
            <summary>
            Value argument Creator
            </summary>
            <param name="xmlRoot">XmlRoot</param>
            <param name="argumentPremitiveDataType">argumentPremitiveDataType</param>
            <param name="name">name</param>
            <param name="direction">direction</param>
            <param name="argumentType">argumentType</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.CreateEthernetArrayArgument(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,System.String,System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONARRAYDATATYPE)">
            <summary>
            Value argument Creator
            </summary>
            <param name="xmlRoot">XmlRoot</param>
            <param name="argumentArrayDataType">argumentArrayDataType</param>
            <param name="name">name</param>
            <param name="direction">direction</param>
            <param name="argumentType">argumentType</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.CreateEthernetStructureArgument(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,System.String,System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONRECORDDATATYPE)">
            <summary>
            Record argument Creator
            </summary>
            <param name="xmlRoot">XmlRoot</param>
            <param name="argumentStructureDataType">argumentArrayDataType</param>
            <param name="name">name</param>
            <param name="argumentType">argumentType</param>
            <param name="direction">direction</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.GetLength(System.UInt32,System.UInt32)">
            <summary>
            Length
            </summary>
            <param name="lowerLimit">lowerLimit</param>
            <param name="upperLimit">upperLimit</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.getSymbolDictionary(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD)">
            <summary>
            creates symbolDictionary
            </summary>
            <param name="compuMethod">compuMethod</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.getDataType(System.UInt32,System.UInt32)">
            <summary>
            Method definition
            </summary>
            <param name="lowerLimit">compuMethod</param>
            <param name="upperLimit">compuMethod</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.getLowerLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.DATACONSTR)">
            <summary>
            Method definition
            </summary>
            <param name="argumetnDataConstraints">DATACONSTR</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetArgumentCreator.getUpperLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.DATACONSTR)">
            <summary>
            Method definition
            </summary>
            <param name="argumetnDataConstraints">DATACONSTR</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.ISignalCreator">
            <summary>
            interface for signal creator classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ISignalCreator.SystemSignal">
            <summary>
            System signal of the ISignal
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator">
            <summary>
            Class creates a RpcMethoddefiniton
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.callSignal">
            <summary>
            call signal
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.returnSignal">
            <summary>
             return signal
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.method">
            <summary>
            Rpc Method
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.xmlRoot">
            <summary>
            XmlRoot
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.PortInterfaces">
            <summary>
            portInterfaces
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.DataConstraints">
            <summary>
            DataConstraints
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.ApplicationDataTypes">
            <summary>
            ApplicationDataTypes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.CompuMethods">
            <summary>
            CompuMethods
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.argumentsList">
            <summary>
            List of arguments of a method
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.Definition">
             <summary>
            Rpc method definition
             </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CLIENTSERVERTOSIGNALMAPPING,System.Int32)">
            <summary>
            Method definition
            </summary>
            <param name="xmlRoot">XmlRoot</param>
            <param name="clientServerMapping">clientservertosignalmapping</param>
            <param name="service">service</param>
            <param name="methodId">methodId</param>
            <param name="portInterfaces">methodId</param>
             <param name="dataConstraints">methodId</param>
             <param name="applicationDataTypes">methodId</param>
             <param name="compuMethods">methodId</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.RpcMethodCreator.getArguments(System.Collections.Generic.IEnumerable{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARGUMENTDATAPROTOTYPE})">
            <summary>
            Method definition
            </summary>
            <param name="Arguments">ARGUMENTDATAPROTOTYPE</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase">
            <summary>
            Base class for Signal Creator
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CompuMethods">
            <summary>
            CompuMethods
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.StartBit">
            <summary>
            Temparary startbit to calculate start bit of each element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.LengthFieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.Stp">
            <summary>
            I-Signal to I-PDU Mapping for this signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ApplicationDataTypes">
            <summary>
            ARPACKAGE for Application data types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.DataConstraints">
            <summary>
            DataConstraints
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CompumethodArpackage">
            <summary>
            ARPACKAGE for COMPU method
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.DataTransformationArpackage">
            <summary>
            ARPACKAGE for data transformation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.UnitsArpackage">
            <summary>
            ARPACKAGE for units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.Signal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.XmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.UINT8">
            <summary>
            UINT8
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.UINT16">
            <summary>
            UINT16
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.UINT32">
            <summary>
            UINT32
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.UINT64">
            <summary>
            UINT64
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.BOOLEAN">
            <summary>
            BOOLEAN
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.FLOAT32">
            <summary>
            FLOAT
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Base class constructor, initializes application data types, data constraints and 
            </summary>
            <param name="xmlRoot"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.SystemSignal">
            <summary>
            system signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.PackingByteOrder">
            <summary>
            packing Byte Order
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.Message">
            <summary>
            PDU whose signal is being created
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ExtractTiming(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <param name="definition">Signal Definition</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ExtractTiming(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <param name="definition">Signal Definition</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ExtractComplexSystemSignalData">
            <summary>
            Extracts someip signal data
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ExtractDataElement(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SENDERRECEIVERTOSIGNALMAPPING)">
            <summary>
            Extracts the Data Elements from ISignal
            </summary>
            <param name="systemArpackage">System AR package</param>
            <param name="senderReceivertosignalmapping">Sender Reciever and Signal mapping instance</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateDataElements(System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.VARIABLEDATAPROTOTYPE)">
            <summary>
            Creates the definition for different type of date element
            </summary>
            <param name="name">name of the DataElement</param>
            <param name="category">Category of the data element</param>
            <param name="dataElement">Description for the Data Element</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateArrayDataElement(System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONARRAYDATATYPE)">
            <summary>
            Create array data element 
            </summary>
            <param name="prefix"></param>
            <param name="category"></param>
            <param name="applicationtype"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateDynamicLengthSignal(System.String,System.Int32)">
            <summary>
            Creates the dynamic length signal based on bit length of the whole Signal
            </summary>
            <param name="baseElementName">Name of the Signal</param>
            <param name="maxSize">Maximum Size of the Signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetDataTypeByLength(System.Int32)">
            <summary>
            calculates the datatype by length
            </summary>
            <param name="maxLength">maximum length in bits</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateStructLengthFieldSignal(System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONRECORDDATATYPE)">
            <summary>
            Create dummy signal for length field of STRUCT
            </summary>
            <param name="name"></param>
            <param name="applicationtype"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateArrayLengthFieldSignal(System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONARRAYDATATYPE)">
            <summary>
            Create dummy signal for length field of ARRAY
            </summary>
            <param name="name"></param>
            <param name="applicationtype"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetStructSignalDefaultValue(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONRECORDDATATYPE,System.Int32@)">
            <summary>
            Get default value for the length field signal lf_ for struct 
            </summary>
            <param name="applicationtype"></param>
            <param name="lf_length"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetArraySignalDefaultValue(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONARRAYDATATYPE,System.Int32@)">
            <summary>
            Get default value for the length field signal lf_ for Array  
            </summary>
            <param name="arrayTypeObject"></param>
            <param name="lf_length"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateValueDataElement(System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONPRIMITIVEDATATYPE)">
            <summary>
            Method to create signal of value type
            </summary>
            <param name="name"></param>
            <param name="category"></param>
            <param name="applicationtype"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.SetInternalType(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Sets the Internal type of the Signal
            </summary>
            <param name="definition">definition of the signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.SetInternalType(ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition)">
            <summary>
            Sets the Internal type of the Signal
            </summary>
            <param name="definition">definition of the signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateRecordDataElement(System.String,System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONRECORDDATATYPE)">
             <summary>
            Creates Dataelement definition for RECORD/STRUCTURE type
             </summary>
             <param name="prefix">name of the parent DataElement</param>
             <param name="category">Category of the data element</param>
             <param name="applicationtype">ApplicationDataElement Object which contains the definition of the Element</param>
             <returns>EthernetDataElementDefintion object which contains definition for the Data Element</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateSignal(System.String)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateArraySignal(System.String)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetDataType(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.APPLICATIONPRIMITIVEDATATYPE)">
            <summary>
            calculates the data type of the element, return System.Type
            </summary>
            <param name="applicationDataType">Application Data Type object for the Element</param>
            <returns>System.Type</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetBitwiseMaximum(System.Int32)">
            <summary>
            Get the max value as per bitLength
            </summary>
            <param name="bitLength"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.SetTotalRecordLength">
            <summary>
            Set the length for lf_1_ length field , it will be total length of the payload
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.GetLength(System.Type)">
            <summary>
            Calculates the length of a dataelement based on Data Type of the Data Element
            </summary>
            <param name="dataType">Data type of the Data Element</param>
            <returns>Length in Number of bits</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.getLowerLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.DATACONSTR)">
            <summary>
            Method definition which Calculates the Lower Limit and upper limit of the Data Element
            </summary>
            <param name="dataConstraints">DATACONSTR object</param>
            <returns>LowerLimit</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.getUpperLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.DATACONSTR)">
            <summary>
            Calculates the Upper Limit for the Element
            </summary>
            <param name="dataConstraints">DATACONSTR</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.ExtractDataElement(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CLIENTSERVERTOSIGNALMAPPING)">
            <summary>
            Extracts the Data Elements from ISignal
            </summary>
            <param name="systemArpackage">System AR package</param>
            <param name="senderReceivertosignalmapping">Sender Reciever and Signal mapping instance</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreatorBase.CreateDataElements(System.String,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.CLIENTSERVEROPERATION)">
            <summary>
            Creates the definition for different type of dateelement
            </summary>
            <param name="name">name of the DataElement</param>
            <param name="dataElement">Description for the Data Element</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator">
            <summary>
            Creates a someip signal
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.iSignal">
            <summary>
            System signal XML element (if available)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.SignalBitLength">
            <summary>
            The length of whole SomeIp Signal
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.InterfaceVersion">
            <summary>
            Interface version for someip signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNAL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="pdu">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.ExtractSomeIpHeader(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOMEIPTRANSFORMATIONISIGNALPROPSCONDITIONAL)">
            <summary>
            Extracts SOMEIP Signal header length and start positons in bits in pdu
            </summary>
            <param name="someipConditions">definiton for someipheader </param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.ExtractSomeIplengthFields(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOMEIPTRANSFORMATIONISIGNALPROPSCONDITIONAL)">
            <summary>
            Extract the Size of struct and array length fields
            </summary>
            <param name="someipConditions"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.GetFrameType(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOMEIPMESSAGETYPEENUMSIMPLE)">
            <summary>
            Finds the SOMEIP frametype for PDU and signal
            </summary>
            <param name="msgType">Message type as mentioned in NCD</param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.ExtractE2EHeader(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ENDTOENDTRANSFORMATIONISIGNALPROPSCONDITIONAL)">
            <summary>
            Extracts E2E start position and length in pdu
            </summary>
            <param name="e2eVarient">definition for e2e</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SomeIpSignalCreator.ExtractSomeIpSystemSignalData(System.Int32)">
            <summary>
            Extracts someip signal data
            </summary>
            <param name="startPosition">start position for dataelements</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.TPChannelCreator">
            <summary>
            Helper class to create TP channel definitions from arxml elements
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.TPChannelCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.DOIPTPCONNECTION,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.TPChannelCreator"/> class.
            </summary>
            <param name="connection">xml TP connection element.</param>
            <param name="network">Network definition</param>
            <param name="loader">ARXML loader</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.TPChannelCreator.UpdateNetwork(ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetTPNetworkDefinition)">
            <summary>
            Add TP channel to network, if not already present
            </summary>
            <param name="network">The network.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.TPChannelCreator.Definition">
            <summary>
            TP channel definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth">
            <summary>
            Class extracts Ethernet catalog data from autosar arxml file
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.NetworkName">
            <summary>
            Name of arxml TopLevelPackage to read network data from (file might contain multiple bus definitions)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.IgnoreEcus">
            <summary>
            List of Ecus to be ignored from the catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.EnableRpc">
            <summary>
            Enable or disable RPC
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.IsCrcInclude">
            <summary>
            Include CRC and SQC in translation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.DummyDeviceName">
            <summary>
            Name of dummy device used for messages without sender or signals without receiver
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.SignalGroupArpackage">
            <summary>
            Contains information about End To End protection data
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Loads the catalog from file
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">full path of the catalog file</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Loads the catalog from stream
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">catalog source stream</param>
            <returns>Catalog created from the source file</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.Reader">
            <summary>
            Access customized XML reader.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.XmlRoot">
            <summary>
            Root elemet of xml data
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.NetworkPackage">
            <summary>
            Network TOP-LEVEL-PACKAGE for the configured bus of this loader
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.E2EProtections">
            <summary>
            End To End protection set, containing all E2E protection data
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.ExtractData">
            <summary>
            Extracts the catalog data from XML structure
            </summary>
            <returns>Ethernet network definition</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.PduPackageArpackages">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.SignalPackageArpackages">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.SocPduArpackages">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.ExtractDevices(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ARPACKAGE,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition)">
            <summary>
            Extracts data of Ethernet devices from XML data structure
            </summary>
            <param name="ecuInstancesPackage">Top level package ECU-INSTANCES</param>
            <param name="network">Ethernet network defintion to add devices to</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.ExtractMessages(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition)">
            <summary>
            Extracts messages and contained signals information.
            </summary>
            <param name="physicalChannel">Physical channel xml element data</param>
            <param name="network">The network definition to fill with data</param>
            <param name="vlanDefinition"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.ExtractTPChannels(ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition)">
            <summary>
            Extract TP channel information from XML data structure
            </summary>
            <param name="network">The network definition to fill with data</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.GetDummyDevice(ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition)">
            <summary>
            Gets the dummy device (creates it on first access). Dummy device is used as sender for messages without sender in the arxml file.
            </summary>
            <param name="network">Network definition</param>
            <returns>the dummy device</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth.GetDevices(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ECUINSTANCE},ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition)">
            <summary>
            Get devices from network which match given ECUs
            </summary>
            <param name="ecus">List of ECU elements</param>
            <param name="network">The network definition</param>
            <returns>list of devices</returns>
            <remarks>If no matching device found, list contains one dummy device</remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader">
            <summary>
            Specialized XML text reader which extracts Autosar schema version, but hides its namespace from Deserializer
            arxml files use different version dependant namespaces.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader"/> class.
            </summary>
            <param name="input">The stream containing the XML data to read.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            This class always returns an empty namespace
            </summary>
            <returns>Always an empty string.</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader.AutosarVersion">
            <summary>
            Gets the autosar version (value is extraced from XML namespace name)
            </summary>
            <value>
            Autosar version string (e.g. "3.1.4.DAI.4" or "3.2.2"
            </value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlReader.Autosar314">
            <summary>
            Flag for Autosar version 3.1.4
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.DeviceCreator">
            <summary>
            Helper class to create and parametrize devices from Xml structure
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.DeviceCreator.Definition">
            <summary>
            The created device definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.E2EProtectionCreator">
            <summary>
            Helper class to extract EndToEnd protection configuration
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.E2EProtectionCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ENDTOENDTRANSFORMATIONDESCRIPTION,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ENDTOENDTRANSFORMATIONISIGNALPROPSCONDITIONAL,System.Nullable{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.E2EProtectionCreator" /> class.
            </summary>
            <param name="e2ETransDescription">ENDTOEND transformation DESCRIPTION</param>
            <param name="variants">Signal properties</param>
            <param name="multiplexorGroup">The multiplexor group, the pdu is associated with</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.E2EProtectionCreator.Definition">
            <summary>
            The created protection definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.E2EProtectionCreator.ConfigureMessage(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,System.String)">
            <summary>
            Update message definition: add E2E protection
            </summary>
            <param name="pdu">The message.</param>
            <param name="signalGrpName">Signal Group Name</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition">
            <summary>
                Represents a VLAN 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition.Name">
            <summary>
                Device name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition.Services">
            <summary>
                Device belonging Services
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition.Id">
            <summary>
            Message unique identifier
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.loader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.EVENTHANDLER,ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL)">
            <summary>
            Constructor for PduCreator
            </summary>
            <param name="eventGroup">PduToFrame</param>
            <param name="service">FlexRay Message</param>
            <param name="xmlRoot">Xml Root</param>
            <param name="loader"></param>
            <param name="physicalChannel"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.EVENTHANDLER,ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOCKETCONNECTIONBUNDLE,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL)">
            <summary>
            Constructor for PduCreator
            </summary>
            <param name="eventGroup">PduToFrame</param>
            <param name="service">FlexRay Message</param>
            <param name="xmlRoot">Xml Root</param>
            <param name="connBundle"></param>
            <param name="loader"></param>
            <param name="physicalChannel"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.Definition">
            <summary>
             The Event definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.xmlRoot">
            <summary>
            XmlRoot
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.pduCreator">
            <summary>
            The Ethernet PDU definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.EventGroupCreator.ExtractPdu(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition)">
            <summary>
            Extracts PDU data
            </summary>
            <param name="pdu">PDU xml element</param>
            <param name="id">PDU Header id</param>
            <param name="eventGrp"></param>
            <param name="vlanId">Vland id</param>
            <param name="service"></param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.NetworkCreator">
            <summary>
            Helper class to create and parametrize ETHERNET network definition from Xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.NetworkCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETCLUSTER)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.NetworkCreator"/> class.
            </summary>
            <param name="canCluster">ETHERNET-CLUSTER xml element</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.NetworkCreator.Definition">
            <summary>
            The network definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.Definition">
            <summary>
             The Pdu definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.xmlRoot">
            <summary>
            XmlRoot
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.Ethloader">
            <summary>
            ARXML loader instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth,ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition)">
            <summary>
            Constructor for PduCreator
            </summary>
            <param name="pName"></param>
            <param name="message">FlexRay Message</param>
            <param name="xmlRoot">Xml Root</param>
            <param name="channel"></param>
            <param name="loader"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth,System.UInt32,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL,ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition)">
            <summary>
            Constructor for PduCreator
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractSpecialSignalTimings(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.IPDUTIMING[])">
            <summary>
            Extracts timings of signals from transmission mode conditions
            </summary>
            <remarks>Some signal send parameters are extracted by SignalCreator.ExtractTiming()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING[],ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING)">
            <summary>
            Extracts data of signals associated with an PDU
            </summary>
            <param name="stps">Signal to PDU mapping</param>
            <param name="pduTriggering">Associated PDU triggering.</param>
            <returns>Extracted signals (if signal with same name is already assigned to our message, the existing signal is added to result list)</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractISignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition})">
            <summary>
            Fetching all the ISignal Type Signals
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.CreateDummyUpdateBitSignal(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition})">
            <summary>
            Create dummy signal for update bit
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractGroupSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,System.Collections.Generic.List{ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition})">
            <summary>
            Fetching all the UBit Signals from ISignalGroup type.
            </summary>
            <param name="stp">Object of ISignal to IPdu Mapping</param>
            <param name="signals">List of EthernetSignal definition object.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractSomeIpSignal(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNAL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING)">
            <summary>
            Extracts SOMEIP signals
            </summary>
            <param name="iSignal">ISignal</param>
            <param name="stp">SIgnal and pdu mapping</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.UpdateUbitDetails(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition,System.String)">
            <summary>
            Update the UBit signal parameters.
            </summary>
            <param name="definition">Ethernet signal definition.</param>
            <param name="signalName">name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.ExtractMultiplexedPdu(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.MULTIPLEXEDIPDU,System.UInt32,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING)">
            <summary>
            Extract content of multiplexed PDU
            </summary>
            <param name="pdu">the PDU</param>
            <param name="vlanId">Vlan id</param>
            <param name="pdutriggering"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator.GetGroupSignals(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING)">
            <summary>
            Get all the signals from ISignalGroup Ref type.
            </summary>
            <returns>Returns the ethernet signal definition</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOCKETCONNECTIONBUNDLE,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,ET.FW.Hal.Ethernet.Catalogs.Arxml.ArxmlLoaderEth,ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator"/> class.
            </summary>
            <param name="connBundle">Socket Address xml element</param>
            <param name="network">network definition</param>
            <param name="loader">ARXML loader</param>
            <param name="vlanDefinition"></param>
            <param name="physicalChannel"></param>
            <param name="enableRpc">Enable rpc or disable rpc</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator.ParseDirectPduReceiversAndSocketAddressDetails(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PDUTRIGGERING,ET.FW.Hal.Ethernet.Catalogs.Arxml.PduCreator,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.NETWORKENDPOINT,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ETHERNETPHYSICALCHANNEL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOCKETADDRESS)">
            <summary>
            To parse the Direct(Diagnostic) Pdu receivers and socket address details.
            </summary>
            <param name="pduTrigger">Pdu trigger to get PduPorts.</param>
            <param name="pduCreator">PduCreator Instance.</param>
            <param name="network">Ethernet network definition.</param>
            <param name="netEndPoint">Network EndPoint Information.</param>
            <param name="physicalChannel">Physical Channel Information.</param>
            <param name="clientSocketAddress"></param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator.xmlRoot">
            <summary>
            xml root element
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator.Definition">
            <summary>
            The service definition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Arxml.ServiceCreator.vlan">
            <summary>
            The Vlan definition
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator">
            <summary>
            Helper class to create and parametrize signal definitions from xml structure
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNAL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator" /> class.
            </summary>
            <param name="signal">System Signal XML element</param>
            <param name="stp">I-Signal to I-PDU Mapping for this signal</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="pdu">Message definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNAL,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            
            </summary>
            <param name="iSignal"></param>
            <param name="stp"></param>
            <param name="pduDefinition"></param>
            <param name="xmlRoot"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Internal constructor with basic signal parameters
            </summary>
            <param name="signalName">signal name</param>
            <param name="message">Related PDU definition</param>
            <param name="xmlRoot">The XML root element</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.SetReceivers(System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ECUINSTANCE})">
            <summary>
            Sets the receivers for this signal
            </summary>
            <param name="receivers">List of ECU elements with receivers</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.Definition">
            <summary>
            The signal definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.ExtractTiming(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTOIPDUMAPPING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
            Extracts timing parameters from message and transfer property
            </summary>
            <param name="stp">I-Signal to I-PDU mapping (contains transfer property field)</param>
            <param name="message">Associated message</param>
            <remarks>For some message send types signal send parameters are modified by MessageCreator.ExtractSpecialSignalTimings()</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.ExtractSystemSignalData">
            <summary>
            Extracts the system signal data and fills signal definition instance
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.SetupBitField(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPU)">
            <summary>
            Parsing the BITFIELD TEXT TABLE Signal type.
            </summary>
            <param name="compuMethod">Computation Method.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.GetMaximumBitwiseValue">
            <summary>
            Fetching the Maximum Bitwise Value from the length.
            </summary>
            <returns>Returns the maximum bitwise data.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.SetupBoolean(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data type BooleanType
            </summary>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.SetupInteger(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALINITVALUE)">
            <summary>
            Setup signal with xml data typer integer.
            Internal type of signal
            </summary>
            <param name="compuMethod">The computation method.</param>
            <param name="initValue">Start value</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.GetLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            Non closed interval limits are ignored.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>numerical value of limit, null if no limit defined or unsupported interval type</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.GetMaskedLimit(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.LIMIT)">
            <summary>
            Gets the numerical value of limit element.
            </summary>
            <param name="limit">ARLimit element</param>
            <returns>String value of the limit</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.ExtractRationalFormula(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPURATIONALCOEFFS,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.COMPUMETHOD)">
            <summary>
            Extract data from rational formula and convert it to signal offset and factor
            </summary>
            <param name="rationalCoeffs">Rational coefficients of rational formula</param>
            <param name="compuMethod">Associated computation method.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.ExtractReceivers(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,System.Boolean)">
            <summary>
            Extracts receivers from collection of port references.
            If the referenced ports contain timeout elements, they are stored as well.
            </summary>
            <param name="signalTriggering">The signal triggering instance containing signal port references</param>
            <param name="ignoreTimeouts">if set to <c>true</c> TIMEOUT elements are ignored.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.IsFloatingPoint(System.Double)">
            <summary>
            Check if value has a fractional part and is no integral value
            </summary>
            <param name="value">value to check</param>
            <returns>true if value has fractional part, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.CreateDummySignal(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,System.Collections.Generic.List{ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ECUINSTANCE},ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Creates dummy signal which fills complete message
            </summary>
            <param name="message">Message definition</param>
            <param name="receivers">Receivers of signal</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            The dummy signal
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.Arxml.SignalCreator.CreateUpdateBitSignal(System.String,System.Int32,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.ISIGNALTRIGGERING,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.AUTOSAR)">
            <summary>
            Creates dummy signal for an update bit
            </summary>
            <param name="signalName">Name of the associated signal.</param>
            <param name="updateBitPosition">The update bit position.</param>
            <param name="signalTriggering">The signal triggering element</param>
            <param name="message">The message definition.</param>
            <param name="xmlRoot">The XML root element</param>
            <returns>
            Update bit dummy signal definition
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Byteorder">
            <summary>
            Definition of bitfield byteorder  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Byteorder.Motorola">
            <summary>
            Motorola byteorder (Big Endian)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Byteorder.Intel">
            <summary>
            Intel byteorder (Little Endian)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Byteorder.Opaque">
            <summary>
            Opaque byte order
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Byteorder.Undefined">
            <summary>
            Undefined or unknown  byteorder
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition">
            <summary>
            Class extracts Ethernet catalog data from autosar arxml file
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition.Name">
            <summary>
            The name of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition.Direction">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition.Type">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition.CompuMethod">
            <summary>
            CompuMethod
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition.#ctor(System.String,System.String,System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod)">
            <summary>
            Method definition
            </summary>
            <param name="name">The name of argument</param>
            <param name="direction">The direction of argument</param>
            <param name="argumentType">The argumentType of argument</param>
            <param name="compuMethod">compuMethod</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition">
            <summary>
            Defintion for arguments of type Array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition.IsDynamic">
            <summary>
            is dynamic array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition.MaximumSize">
            <summary>
            maxSize of array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition.ValueDefinition">
            <summary>
            maxSize of array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition.TotalLength">
            <summary>
            Total Length of array
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArrayArgumentDefinition.#ctor(System.String,System.String,System.String,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition,System.Boolean)">
            <summary>
            Method definition
            </summary>
            <param name="name">The name of argument</param>
            <param name="direction">The direction of argument</param>
            <param name="argumentType">Argument type</param>
            <param name="maxSize">maxSize of array</param>
            <param name="valueDef">Value argument definition</param>
            <param name="isDynamic">Is dynamic array</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition">
            <summary>
             Ethernet Array signal definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.Name">
            <summary>
            Name of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.PDU">
            <summary>
            PDU for the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.IsDynamic">
            <summary>
            Indicates if its a dynamic array
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.DynamicIndicatorStartBit">
            <summary>
            start bit of dynamic length Indicator
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.DynamicIndicatorLength">
            <summary>
            Length of Dynamic length Indicator
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.CycleTime">
            <summary>
                Generic signal cycle time
            </summary>
            <remarks>
                Unit: ms,
                Valid value range: 0..65535
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.CycleTimeActive">
            <summary>
                Generic signal cycle time active
            </summary>
            <remarks>
                Unit: ms,
                Valid value range: 0..65535
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.SendType">
            <summary>
                Generic signal send type
            </summary>
            <remarks>As defined in SendType</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.Factor">
            <summary>
             Value range conversation multiplicator factor. (bit representation - real representation)
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.Offset">
            <summary>
                Value range conversation offset. (bit representation - real representation)
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.Unit">
            <summary>
                Unit of the real representation of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.BitwiseMinimum">
            <summary>
                Bitwise minimum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.BitwiseMaximum">
            <summary>
                Bitwise maximum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.BitwiseDefault">
            <summary>
                Bitwise default value (DBC: GenSigStartValue)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.InternalType">
            <summary>
                Internal signal type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.BitLength">
            <summary>
                Bit length of the signal
            </summary>
            <remarks>Valid value range: 1..64</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.BitStart">
            <summary>
                Bit start position of the signal in the Ethernet message
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.StartByte">
            <summary>
                Bit start position of the signal in the Ethernet message
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.NoOfBytes">
            <summary>
              Number of bytes for the signal of the signal in the Ethernet message
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.Byteorder">
            <summary>
                Byte order of the signal in the Ethernet PDU message
            </summary>
            <remarks>Valid values: Intel, Motorola</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="pdu"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.ConvertToRaw``1(``0)">
            <summary>
            Convert signal value to raw value Method handles numerical and textual values
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">The Value</param>
            <returns>Converted raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.StringToRaw(System.String)">
            <summary>
             Calculate raw value (bitfield) from string value
            </summary>
            <param name="value">string value</param>
            <returns>raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.RawToValue``1(System.Byte[])">
            <summary>
            Calculate string value from given raw value (bitfield)
            </summary>
            <param name="bitValue">raw value of Ethernet signal</param>
            <returns>string value of signal with unit</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.GetDefault``1">
            <summary>
                Get default value
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Default value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition.RawToString(System.Byte[])">
            <summary>
             Calculate string value from given raw value (bitfield)
            </summary>
            <param name="bitValue">raw value of Ethernet signal</param>
            <returns>string value of signal without unit</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder">
            <summary>
            Class which maintains list of all Ethernet signals
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Name">
            <summary>
            Name of the message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Id">
            <summary>
            Message id
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder"/> class.
            </summary>
            <param name="definition">CAN message definition</param>
            <param name="crcInclude"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.CreateSignals(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
            Creates a list of Ethernet Signals
            </summary>
            <param name="definition">EthernetPduDefinition</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Structure">
            <summary>
            Gets a list of message signals, the signals are copies of internal signals and will not be changed on Message update
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.activeSignals">
            <summary>
            Buffer for active signals.
            </summary>
            <remarks>
            Buffer is used for multiplexed messages only, for non multiplexed messages all signals are always active
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.ActiveSignals">
            <summary>
            Gets a collection of signals which are currently active.
            Active signals are not multiplexed or contained in active multiplexor group.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.IsMultiplexed">
            <summary>
            Indicates, if Ethernet message contains a multiplexed signals (cached)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.GetMultiplexor">
            <summary>
            Get multiplexor 
            </summary>
            <returns>Multiplexor signal.</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Signals">
            <summary>
            All signal which are members of this message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Definition">
            <summary>
            Message definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Message">
            <summary>
            Autosar PDU message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageBuilder.Translation">
            <summary>
            Gets the message translation.
            </summary>
            <remarks>
            Translation text is buffered until message payload is changed
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition">
            <summary>
            Represents a Ethernet message definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.#ctor(System.String)">
            <summary>
            Constructor with name only.
            </summary>
            <param name="name">Name of the message.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.#ctor(System.String,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition)">
            <summary>
            Constructor with name, ID and sender
            </summary>
            <param name="name">name of the message</param>
            <param name="id">id of the message</param>
            <param name="sender">sending device</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Id">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Dummy">
            <summary>
            Indicates if the message defines a dummy
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Description">
            <summary>
            Message description
            </summary>
            <remarks>
            Not used for dbc format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Sender">
            <summary>
            EthernetDevice belonging this message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Signals">
            <summary>
            Signals belonging to the message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Receivers">
            <summary>
            Message receiving EthernetDevices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.Dlc">
            <summary>
            Message length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.StartValue">
            <summary>
            GenMsgStartValue (Default value)
            </summary>
            <remarks>
            Start value from DBC / unused bit patern from arxml: default value for message, not containing signal default values.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.DefaultPayload">
            <summary>
            Message default payload from catalog, holds default values of signals.
            </summary>
            <remarks>
            Value is merged from message start/default value and signals default values.
            Value must not be changed after initialization.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.NwmMessage">
            <summary>
            Network Management Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.AppMessage">
            <summary>
            App Message
            </summary>
            <remarks>
            Property is always false for arxml catalogs, because information is not included in arxml files.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.DiagResponse">
            <summary>
            Diagnosis Response
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.DiagRequest">
            <summary>
            Diagnosis Request
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.DiagState">
            <summary>
            Diagnosis State
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.CycleTimeActive">
            <summary>
            Cycle time active
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.CycleTime">
            <summary>
            Cycle time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.SendType">
            <summary>
            Send type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.NrOfRepetitions">
            <summary>
            Nr of repetitions
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.StartDelayTime">
            <summary>
            Message start delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.DelayTime">
            <summary>
            Message delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.AdjustSendType">
            <summary>
            Set correct message send type and cycle times, based on message and signals definitions
            </summary>
            <remarks>
            Code is taken from RuntimeEthernetMessage.AdjustSendType()
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.GetSendtypePrio(ET.FW.Hal.Ethernet.Catalogs.SendType)">
            <summary>
            Gets the sendtype prio defined by the table from Tobias Braun.
            </summary>
            <param name="sendtype">The sendtype.</param>
            <returns>return the prio 0 is lowest</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.TpTxIndex">
            <summary>
            TP parameter TX Index
            </summary>
            <remarks>
            Valid value range: 0..99
            Property is always 0 for arxml catalogs, because information is not included in arxml files.
            Dbc files which are generated from arxml files, are patched after generation to include this field.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.IsTp">
            <summary>
            Flag for messages which are used for Ethernet Transport Protocol
            </summary>
            <remarks>
            DBC: set if any of the fields TpTxIndex, DiagRequest, DiagResponse or DiagState is set
            ARXML: Read from xml file
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.E2EProtections">
            <summary>
            Optional End To End Protection
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.SecureCommunicationProps">
            <summary>
            Optional Secure Communication Props
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageDefinition.ToString">
            <summary>
            Get String representation of the object
            </summary>
            <returns>Name and ID (hex coded) as text</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetRecordArgumentDefinition">
            <summary>
            EthernetRecordArgumentDefinition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRecordArgumentDefinition.ListEthernetArgumentDefinition">
            <summary>
            The argument list
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetRecordArgumentDefinition.#ctor(System.Collections.Generic.List{ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition},System.String,System.String,System.String)">
            <summary>
            Method definition
            </summary>
            <param name="name">The name of argument</param>
            <param name="direction">The direction of argument</param>
            <param name="listEthernetArgumentDefinition">The EthernetArgumentDefinition list</param>
            <param name="argumentType">The argumentType of argument</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod">
            <summary>
            Compu Function
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod.Vn0">
            <summary>
            First Numerator
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod.Vn1">
            <summary>
            Second Numerator
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod.Vnd">
            <summary>
            Denominator
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="vn0">First Numerator</param>
            <param name="vn1">Second Numerator</param>
            <param name="vnd">Denominator</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition">
            <summary>
            Class extracts Ethernet catalog data from autosar arxml file
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.ArgumentList">
            <summary>
            list of arguments
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.CallSignalName">
            <summary>
            The name of call signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.ReturnSignalName">
            <summary>
            The name of return signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.ServiceId">
            <summary>
            The name of return signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.MethodId">
            <summary>
            Method ID
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.#ctor(System.UInt32,System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{ET.FW.Hal.Ethernet.Catalogs.EthernetArgumentDefinition})">
            <summary>
            Method definition
            </summary>
            <param name="callsignalname">The name of call signal</param>
            <param name="returnsignalname">The name of return signal</param>
            <param name="methodName">The name of the method</param>
            <param name="argumentsList">list of arguments</param>
            <param name="methodId">methodId</param>
            <param name="serviceId">serviceId</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetRpcMethodDefinition.Name">
            <summary>
            Name of the method
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition">
            <summary>
            Definition of TP channel from catalog, each TP channel consists of a Ethernet message pair (e.g. diagnostics request and response)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
            Constructor with parameters to initialize the message pair
            </summary>
            <param name="def1">first pdu</param>
            <param name="def2">second pdu</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition.IDs">
            <summary>
            Get Ethernet IDs for TP channel
            </summary>
            <remarks> 
            Tx/Rx assignement depends on channel usage
            Diagnostics: TX - Request, Rx - Response TODO->There is no id for PDU in Ethernet
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition.MessageDefinition1">
            <summary>
            First Ethernet message definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition.MessageDefinition2">
            <summary>
            Second Ethernet pdu definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetTpChannelDefinition.IsDiagnostics">
            <summary>
            Flag for diagnostics TP channel (MessageDefinition1 is for requests, MessageDefinition2 is for Responses)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition">
            <summary>
            Defintion for arguments of type Value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.DataType">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.LowerLimit">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.UpperLimit">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.SymbolDictionary">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.length">
            <summary>
            The direction of argument
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetValueArgumentDefinition.#ctor(System.String,System.String,System.String,System.Type,System.Collections.Generic.Dictionary{System.UInt32,System.String},System.UInt32,System.UInt32,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetRpcCompuMethod)">
            <summary>
            Method definition
            </summary>
            <param name="name">The name of argument</param>
            <param name="datatype">The datatype of argument</param>
            <param name="direction">The direction of argument</param>
            <param name="symbolDictionary">The symbolDictionary of argument</param>
            <param name="lowerLimit">The lowerLimit of argument</param>
            <param name="upperLimit">The direction of argument</param>
            <param name="argumentType">The argumentType of argument</param>
            <param name="length">The argumentType of argument</param>
            <param name="compuMethod">compuMethod</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension">
            <summary>
            Helper class for Ethernet message payload handling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.ToBitField(System.Byte[],ET.FW.Hal.Ethernet.Catalogs.Byteorder)">
            <summary>
            Converts the byte array to an bit field
            </summary>
            <param name="payload">byte array value to convert</param>
            <param name="byteorder">Byte order to use</param>
            <returns>converted bit field</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.Set(System.Byte[],System.UInt64,ET.FW.Hal.Ethernet.Catalogs.Byteorder)">
            <summary>
            Set byte array data from integer value
            Array size is preserved.
            </summary>
            <param name="payload">Target byte array</param>
            <param name="data">64 Bit integer source value</param>
            <param name="byteorder">Byte order to use</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.SetSignalBits(System.Byte[],System.UInt64,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Writes signal bits into message payload
            </summary>
            <param name="payload">Target payload.</param>
            <param name="value">New signal value as bitfield</param>
            <param name="definition">Signal definition.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.SetSignalBytes(System.Byte[],System.Byte[],ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition,System.Boolean,System.UInt32)">
            <summary>
            Writes signal bits into message payload
            </summary>
            <param name="payload">Target payload.</param>
            <param name="value">New signal value as bitfield</param>
            <param name="definition">Signal definition.</param>
            <param name="isDynamic"></param>
            <param name="calcLength"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.WriteSignalBits(System.Byte[],System.UInt64,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Create new byte array which contains given payload updated with given signal value
            </summary>
            <param name="payload">Target payload.</param>
            <param name="value">New signal value as bitfield</param>
            <param name="definition">Signal definition.</param>
            <returns>The updated payload bytes</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.GetSignalBits(System.Byte[],ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Extracts signal value from payload byte array
            </summary>
            <param name="payload">Payload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Masked signal bits</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.GetSignalBits(System.Byte[],ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition)">
            <summary>
            Extracts signal value from payload byte array
            </summary>
            <param name="payload">Payload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Masked signal bits</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.CalculatePosition(System.Int32,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Calculates the position of bitfield for shifting
            </summary>
            <param name="dlc">Number of ayload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Shift position for signal value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.CalculateMotorolaPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the motorola position to shift
            </summary>
            <param name="dlc">data length</param>
            <param name="bitStart">bit start position</param>
            <param name="bitLength">data bites length</param>
            <returns>uint 64 shifting position</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.GenerateNegativeBitMask(System.Int32,System.Int32)">
            <summary>
            Generates a negative bit mask with flexible bit length and bit start (lsb of UInt64 bitfield).
            Example: GenerateNegativeBitMask(12, 11): "...1111111111111111111000000000000111111111111"
            </summary>
            <param name="bitLength">Bit length</param>
            <param name="bitStart">Zero based bit start position</param>
            <returns>Negative bit mask</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.PayloadExtension.GenerateBitMask(System.Int32)">
            <summary>
            BitMask generator, which generates a positive bit mask beginning at 
            position zero (lsb) of UInt64 bit field.
            Example: GenerateBitMask(12): "...000000000000000000000111111111111"
            </summary>
            <param name="bitLength">Length of the bit field</param>
            <returns>Bit mask</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ProtocolTypeName">
            <summary>
            protocol type of a PDU
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ProtocolTypeName.PduMux">
            <summary>
            PDU Mux protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ProtocolTypeName.SomeIP">
            <summary>
            SOMEIP protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps">
            <summary>
            Secure CommunicationProps configuration for protected data inside CAN message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.DataId">
            <summary>
            DATA ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.Length">
            <summary>
            PDU length in bytes 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.AuthAlgorithm">
            <summary>
            Authorization Algorithm
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.AuthInfoTxLength">
            <summary>
            Authorization InfoTxLength
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.AuthenticationRetries">
            <summary>
            Authorization Retries
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.FreshnessCounterSyncattempts">
            <summary>
            Freshness Counter Sync attempts
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.FreshnessTimestampTimePeriodfactor">
            <summary>
            FreshnessTimestamp TimePeriodfactor
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.FreshnessValueId">
            <summary>
            Freshness ValueId
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.Freshnessvaluelength">
            <summary>
            Freshness Value Length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.FreshnessValueTxLength">
            <summary>
            Freshness Value Tx Length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.SecondaryfreshnessValueid">
            <summary>
            Secondaryfreshness Valueid
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.UsefreshnessTimestamp">
            <summary>
            Usefreshness Timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.PduSpecificKey">
            <summary>
            PduSpecificKey
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.SecureCommunicationProps.PduSpecificHash">
            <summary>
            PduSpecificHash
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.INamedIdObject">
            <summary>
            Interface for standard access to object name with id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.INamedIdObject.Id">
            <summary>
            CAN message Id
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.Manufacturer">
            <summary>
            Manufacturer enumeration
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Manufacturer.DBAG">
            <summary>
            Daimler Benz
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Manufacturer.VAG">
            <summary>
            Volkswagen AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Manufacturer.BMWAG">
            <summary>
            BMW AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Manufacturer.PAG">
            <summary>
            Porsche AG
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.Manufacturer.GM">
            <summary>
            General Motors
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ArpCatalog">
            <summary>
            Providing textual representation of an Ethernet/ARP message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ArpCatalog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ArpCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object containing an Ethernet/ARP message to a string representation.
            </summary>
            <param name="message">message object</param>
            <returns>translation as string</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ArpCatalogLoader">
            <summary>
            ARPCatalog factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ArpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Generates ARPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">Not used</param>
            <returns>An ARPCatalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ArpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Generates ARPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">Not used</param>
            <returns>An ARPCatalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1">
            <summary>
            Collection of EthernetMessage objects
            </summary>
            <typeparam name="T">Message class</typeparam>
            <remarks>Based on NamedObjectCollection. Is NOT Thread safe.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs filled collection.
            </summary>
            <param name="collection">Collection which implements IEnumerable interface.</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.messagesById">
            <summary>
            Internal msg id dictionary
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.Item(System.UInt32)">
            <summary>
            Get/set CAN message definition by message id
            </summary>
            <param name="id">message Id</param>
            <returns>EthernetMessageDefinition object</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.Add(`0)">
            <summary>
            Add a CAN message definition object
            </summary>
            <param name="message">Message Definition</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.TryGetValue(System.UInt32,`0@)">
            <summary>
            Gets the message associated with the specified id.
            </summary>
            <param name="id">The id of the message to get.</param>
            <param name="message">When this method returns, contains the message associated with the specified id, if the id is found;
            otherwise, the default value for the message type of the value parameter.This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the EthernetMessageCollection contains an message with the specified id; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetMessageCollection`1.Contains(System.UInt32)">
            <summary>
            Evaluates if the collection contains a message by msgId
            </summary>
            <param name="id">message ID</param>
            <returns>true if message with given ID is found</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition">
            <summary>
            Represents the Ethernet network with different devices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Name">
            <summary>
            The name of the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.NetworkName">
            <summary>
            Network Name as defined in ARXML
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Devices">
            <summary>
            Gets all Devices (ECU) in the Network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Vlans">
            <summary>
            Gets all Vlans in the Network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Services">
            <summary>
            Gets all Ethernet messages defined in the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Version">
            <summary>
            Network version
            </summary>
            <remarks>Valid value range: 0..255</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.VersionWeek">
            <summary>
            Version week date
            </summary>
            <remarks>Valid value range: 0..53</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.VersionYear">
            <summary>
            Version year date
            </summary>
            <remarks>Valid value range: 0..99</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Baudrate">
            <summary>
            Network baudrate
            </summary>
            <remarks>Valid value range: 0..1000000</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.NmMessageCount">
            <summary>
            Network Message Count
            </summary>
            <remarks>Valid value range: 0..64</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.NwmBasicAddress">
            <summary>
            Network Management basic address (NWM-Basisadresse)
            </summary>
            <remarks>Valid value range: 0..536870911</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.NwmType">
            <summary>
            Network Management type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.PDUs">
            <summary>
            Gets all ETHERNET signals defined in the PDUs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.Signals">
            <summary>
            Gets all Ethernet signals defined in the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.ArraySignals">
            <summary>
            Gets all Ethernet Array type signals defined in the network
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.CarSpecificKey">
            <summary>
            CarSpecificKey
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition.CarSpecificHash">
            <summary>
            Car Specific Hash
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog">
            <summary>
            Represents the complete Ethernet catalog over all different networks
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,System.Boolean)">
            <summary>
            The Constructor.
            </summary>
            <param name="network">CAN network definition containing all catalog data</param>
            <param name="crcInclude">Parameter to include CRC in translation</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.IsCrcInclude">
            <summary>
            Parameter to include CRC in translation
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.Network">
            <summary>
            Associated Ethernet network (bus) configuration
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.Devices">
            <summary>
            All Ethernet devices in the catalog
            </summary>
            <remarks>Devices could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.Services">
            <summary>
            All Ethernet messages in the catalog
            </summary>		
            <remarks>Messages could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.PDUs">
            <summary>
            All Ethernet PDUs in the catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.PduMuxMessages">
            <summary>
            Dictionary of all PDUMUX messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.Signals">
            <summary>
            All Ethernet signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.ArraySignals">
            <summary>
            All Ethernet signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.GetStructure(ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Get structure
            </summary>
            <param name="message">IEthernet message</param>
            <returns>list of ethernet signals</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.GetMessageBuilder(ET.FW.Hal.Pdu.IPduMessage)">
            <summary>
            Gets a new instance of message builder
            </summary>
            <param name="message">Ethernet message to create a new builder</param>
            <returns>A new message builder</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.CachedMessages">
            <summary>
            Holds all Ethernet messages for the translation
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.DeveloperPduTranslations">
            <summary>
            Holds all developer pdu messages for translation.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.GetStructure(ET.FW.Hal.Pdu.IPduMessage)">
            <summary>
            Get Structure
            </summary>
            <param name="pduMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translate an IMessage
            </summary>
            <remarks>translates only IEthernetMessages</remarks>
            <param name="message">the message to translate</param>
            <returns>a string representation of the message</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeEnumeration">
            <summary>
            Stores information about a ThriftMe enumeration.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeEnumeration.name">
            <summary>
            The name of the enumeration.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeEnumeration.comment">
            <summary>
            The comment of the enumeration.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeEnumeration.elements">
            <summary>
            The elements of the enumeration.
            Key = name of the element;
            Value = value of the element.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeEnumeration.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor for a ThriftMe enumeration.
            </summary>
            <param name="node">xml node to process</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent">
            <summary>
            Stores information about a ThriftMe event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.id">
            <summary>
            The id of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.authorizationLevel">
            <summary>
            The authorizationLevel of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.timeout">
            <summary>
            The timeout of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.comment">
            <summary>
            The comment of the event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.returnType">
            <summary>
            The returnType of the event.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventParameter">
            <summary>
            A struct for saving information about the parameters of a ThriftMeEvent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventParameter.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.parameters">
            <summary>
            The parameters of the event.
            Key = id of the parameter;
            Value = the parameter.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventException">
            <summary>
            A struct for saving information about the exception of a ThriftMeEvent.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventException.Name">
            <summary>
            The name of the exception.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventException.Type">
            <summary>
            The type of the exception.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.EventException.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="type">The type of the exception.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.exceptions">
            <summary>
            The exceptions of the event.
            Key = id of the exception;
            Value = the exception.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeEvent.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor for a ThriftMe event.
            </summary>
            <param name="node">An event node from the catalog XML file.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction">
            <summary>
            Stores information about a ThriftMe function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.id">
            <summary>
            The id of the function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.authorizationLevel">
            <summary>
            The authorizationLevel of the function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.timeout">
            <summary>
            The timeout of the function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.comment">
            <summary>
            The comment of the function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.returnType">
            <summary>
            The returnType of the function.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionParameter">
            <summary>
            A struct for saving information about the parameters of a ThriftMeFunction.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionParameter.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.parameters">
            <summary>
            The parameters of the function.
            Key = id of the parameter;
            Value = the parameter.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionException">
            <summary>
            A struct for saving information about the exception of a ThriftMeFunction.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionException.Name">
            <summary>
            The name of the exception.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionException.Type">
            <summary>
            The type of the exception.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.FunctionException.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the exception.</param>
            <param name="type">The type of the exception.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.exceptions">
            <summary>
            The exceptions of the function.
            Key = id of the exception;
            Value = the exception.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor for a ThriftMe function.
            </summary>
            <param name="node">A function node from the catalog XML file.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService">
            <summary>
            Stores information about a ThriftMe service.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService.instanceName">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService.type">
            <summary>
            The type of the service.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService.brokerID">
            <summary>
            The ID of the service broker.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService.serviceID">
            <summary>
            The ID of the service.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeService.#ctor(System.Xml.XmlNode)">
            <summary>
            The Constructor
            </summary>
            <param name="node">A service node from the XML file.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker">
            <summary>
            Stores information about a ThriftMe service broker.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.brokerID">
            <summary>
            The ID of the broker (the name).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.device">
            <summary>
            The device which is running the broker.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.ServiceBrokerListener">
            <summary>
            A struct for saving information about the parameters of a ThriftMeFunction.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.ServiceBrokerListener.listenerType">
            <summary>
            The listenerType of the broker (e.g. TCP)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.ServiceBrokerListener.adapter">
            <summary>
            The adapter IP-adress of the broker.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.ServiceBrokerListener.port">
            <summary>
            The port of the broker.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.ServiceBrokerListener.#ctor(System.Xml.XmlNode)">
            <summary>
            The Constructor
            </summary>
            <param name="node">A broker node from the XML file.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.listener">
            <summary>
            Contains all listener for this broker.
            Key = The type of the listener;
            Value = a ThriftMeServiceBrokerListener object.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeServiceBroker.#ctor(System.Xml.XmlNode)">
            <summary>
            The Constructor
            </summary>
            <param name="node">A broker node from the XML file.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException">
            <summary>
            Stores information about a ThriftMe exception.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.name">
            <summary>
            The name of the exception.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.comment">
            <summary>
            The comment of the exception.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.ExceptionElement">
            <summary>
            A struct for saving information about the elements of a ThriftMeException.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.ExceptionElement.Name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.ExceptionElement.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.ExceptionElement.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The type of the element.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.elements">
            <summary>
            The elements of the exception.
            Key = id of the element;
            Value = the element.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeException.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor for a ThriftMe exception.
            </summary>
            <param name="node">xml node to process</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct">
            <summary>
            Stores information about a ThriftMe struct.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.name">
            <summary>
            The name of the struct.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.comment">
            <summary>
            The comment of the struct.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.StructElement">
            <summary>
            A struct for saving information about the elements of a ThriftMeStruct.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.StructElement.Name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.StructElement.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.StructElement.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The type of the element.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.elements">
            <summary>
            The elements of the struct.
            Key = id of the element;
            Value = the element.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeStruct.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor for a ThriftMe struct.
            </summary>
            <param name="node">xml node to process</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.CatalogHelpers">
            <summary>
            Some general helpers used in translating catalog messages.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.CatalogHelpers.ASCIIfyTable">
            <summary>
            A helper table to speed up ASCIIfy.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogHelpers.PrepareASCIIfyTable">
            <summary>
            Prepare the simple table for ASCIIfy to speed up things.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.CatalogHelpers.ASCIIfy(System.Text.StringBuilder,System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Try to print a byte stream as ASCII. Non-printables are shown as '.'.
            </summary>
            <param name="msg">StringBuilder to append text to</param>
            <param name="data">byte stream to print as much in ASCII as possible</param>
            <param name="start">start ASCIIfying here</param>
            <param name="length">ASCIIfy that much</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition">
            <summary>
            Represents a Ethernet device which holds diffent Ethernet message definitions
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.SdDestIpAddress">
            <summary>
            Service Discovery Destination IP address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.UdpMultiCastPort">
            <summary>
            MultiCastPort Number
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.SdMacAddress">
            <summary>
            Vlan specific Mac Address
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition)">
            <summary>
             The Constructor.
            </summary>
            <param name="name">the name of the device</param>
            <param name="network">network relationship</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetNetworkDefinition,System.Boolean)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">the name of the device</param>
            <param name="network">network relationship</param>
            <param name="dummy">inidicates if device definition is a dummy</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Name">
            <summary>
             Device name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Description">
            <summary>
             Device description
            </summary>
            <remarks>
             Not used for dbc format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Dummy">
            <summary>
            Indicates if device definition is a dummy
            </summary>
            <remarks>
             Not used for arxml format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Network">
            <summary>
             Network belonging of the CanDevice
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MacUnicastAddr">
            <summary>
            Hardware media address of the ECU.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.VlanIpDictionary">
            <summary>
            IPv4 address of the ECU to Vlan mapping
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ReceiverVlanPriorityDictionary">
            <summary>
            Vlan to Vlan priority mapping for the Device
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.SocketAddress">
            <summary>
            List of SocketAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ReceiverSocketAddress">
            <summary>
            List of Receiver SocketAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MultiCastMacAddr">
            <summary>
            List of MultiCastMacAddr
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ProvidedServices">
            <summary>
             Device belonging Services
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Vlans">
            <summary>
            Device belonging Services
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ConsumedServices">
            <summary>
            Device belonging Services
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.PduPairs">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.PDUs">
            <summary>
            All transmitting (TX) PDUs
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.DirectPdus">
            <summary>
            Ethernet PDU definition for DirectPdus
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Signals">
            <summary>
             All transmitting (TX) signals
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ArraySignals">
            <summary>
             All transmitting (TX) array signals
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmNode">
            <summary>
             Network Management Node (NWM-Knoten)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmSourceIpAddress">
            <summary>
            Source IpAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmSourcePort">
            <summary>
            Network management source port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmDestIpAddress">
            <summary>
            Source IpAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmDestPort">
            <summary>
            Network management Destination port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.NwmStationAddress">
            <summary>
             Network Management Station Address (NWM-Stationsadresse)
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.AllowHaltDueToClock">
            <summary>
             Boolean flag that controls the transition - 0: Disable clock halt - 1: Enable clock halt
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.AllowPassiveToActive">
            <summary>
            Number of consecutive even/odd cycle pairs that must have valid clock correction terms.
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ClusterDriftDamping">
            <summary>
             Number of consecutive even/odd cycle pairs that must have valid clock correction terms.
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.DecodingCorrection">
            <summary>
            DecodingCorrection
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.DelayCompensationA">
            <summary>
            DelayCompensationA
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ExternOffsetCorrection">
            <summary>
             ExternOffsetCorrection
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ExternRateCorrection">
            <summary>
             ExternRateCorrection
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.KeySlotUsedForStartup">
            <summary>
             pKeySlotUsedForStartup
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.KeySlotUsedForSync">
            <summary>
              KeySlotUsedForSync
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.LatestTx">
             <summary>
            LatestTx
             </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MacroInitialOffsetA">
            <summary>
            MacroInitialOffsetA
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MaxPayloadLengthDynamic">
            <summary>
            pMaxPayloadLengthDynamic
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MicroInitialOffsetA">
            <summary>
            pMicroInitialOffsetA
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MicroPerCycle">
            <summary>
            MicroPerCycle
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.MicroPerMacroNom">
            <summary>
            MicroPerCycle
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.OffsetCorrectionOut">
            <summary>
            pOffsetCorrectionOut
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.RateCorrectionOut">
            <summary>
            RateCorrectionOut
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.SamplesPerMicrotick">
            <summary>
            pSamplesPerMicrotick
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.WakeupPattern">
            <summary>
            WakeupPattern
            </summary>        
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.AcceptedStartupRange">
            <summary>
            Expanded range of measured clock deviation allowed for startup frames during integration. 
            </summary>
            <remarks>Range: 0..1875</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ListenTimeout">
            <summary>
            ListenTimeout
            </summary>
            <remarks>Range: 0..1875</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.Microtick">
            <summary>
            Microtick
            </summary>
            <remarks>Range: 0..1875</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition.ToString">
            <summary>
              Returns the string representation of the object
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition">
            <summary>
            Ethernet PDU definition
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.EventGroup">
            <summary>
            Reference to the signal containing message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Sender">
            <summary>
            Device definition for a PDU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.HeaderId">
            <summary>
            PDU Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.StartPosition">
            <summary>
            Start position of Pdu in a Frame.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.PackingByteOrder">
            <summary>
            packing Byte Order
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Transferpropertyenumsimple">
            <summary>
            Transfer Property
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.UpdateIndicationBitPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.PduSubType">
            <summary>
            Pdu Type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ProtocolName">
            <summary>
            The name of the protocol used by the PDU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.IsComplexPdu">
            <summary>
            if its a complex pdu
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.IsRpcPdu">
            <summary>
            if its a RPC pdu
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.IsDirectPdu">
            <summary>
            if its a Diagnostic pdu
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ServiceId">
            <summary>
            Service ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.InstanceId">
            <summary>
            Instance ID.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.VlanId">
            <summary>
            Vlan ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.MessageId">
            <summary>
            Event ID if IsEvent is true else Method ID
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.InterfaceVersion">
            <summary>
            The interface version for the SOMEIP message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ReturnCode">
            <summary>
            The returncode for the SomeIp Message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.MessageType">
            <summary>
            Someip Message type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ProtocolVersion">
            <summary>
            The Protocol version for the SOMEIP message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SizeOfStructLengthFields">
            <summary>
            Size of length field for complex pdu Struture
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SizeOfArrayLengthFields">
            <summary>
            Size of length field for complex pdu Array
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ClientId">
            <summary>
            Client ID of the SOmeip MEssage
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SessionId">
            <summary>
            SessionID of the Someip Message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SomeIpHeaderBitstart">
            <summary>
            Someip signal header start bit position
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SomeIpHeaderBitLength">
            <summary>
            someip signal header length in bits
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.E2EStartBit">
            <summary>
            Someip signal e2e start bit position
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.E2ELength">
            <summary>
            Someip signal E2e length in bits
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.E2EPresent">
            <summary>
            checks whether the pdu has E2E defined
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.NwmMessage">
            <summary>
            Network Management Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.IsTp">
            <summary>
            Flag for messages which are used for CAN Transport Protocol
            </summary>
            <remarks>
            DBC: set if any of the fields TpTxIndex, DiagRequest, DiagResponse or DiagState is set
            ARXML: Read from xml file
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.DiagResponse">
            <summary>
            Diagnosis Response
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.DiagRequest">
            <summary>
            Diagnosis Request
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.DiagState">
            <summary>
            Diagnosis State
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Dlc">
            <summary>
            Message length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.UnusedBitPattern">
            <summary>
            Default value to be filled for a PDU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.StartValue">
            <summary>
            GenMsgStartValue (Default value)
            </summary>
            <remarks>
            Start value from DBC / unused bit pattern from arxml: default value for message, not containing signal default values.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ModeSelector">
            <summary>
            Mode Selector - Multiplexor Signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.MultiplexorSignals">
            <summary>
            Dictionary with Multiplexor as Key and group of Multiplexor and multiplexed signals as Values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.DefaultPayload">
            <summary>
            Message default payload from catalog, holds default values of signals.
            </summary>
            <remarks>
            Value is merged from message start/default value and signals default values.
            Value must not be changed after initialization.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.CycleTimeActive">
            <summary>
            Cycle time active
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.CycleTime">
            <summary>
            Cycle time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SendType">
            <summary>
            Send type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.NrOfRepetitions">
            <summary>
            Nr of repetitions
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.StartDelayTime">
            <summary>
            Message start delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.DelayTime">
            <summary>
            Message delay time
            </summary>
            <remarks>Valid value range: 0..65535</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.GetSendtypePrio(ET.FW.Hal.Ethernet.Catalogs.SendType)">
            <summary>
            Gets the sendtype prio defined by the table from Tobias Braun.
            </summary>
            <param name="sendtype">The sendtype.</param>
            <returns>return the prio 0 is lowest</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.SecureCommunicationProps">
            <summary>
            Optional Secure Communication Props
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.#ctor(System.String)">
            <summary>
            Constructor with name only.
            </summary>
            <param name="name">Name of the message.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition,ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition"/> class.
            </summary>
            <param name="pName">PDU name</param>
            <param name="eventDef">EVENT GROUP membership</param>
            <param name="sender">Sender for the PDU</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Signals">
            <summary>
            Signals belonging to the EVENT GROUP
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.ArraySignals">
            <summary>
            ArraySignals belonging to the EVENT GROUP
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.E2EProtections">
            <summary>
            Optional End To End Protection
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition.Receivers">
            <summary>
            Service receiving EthernetDevices
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition">
            <summary>
            Represents a Ethernet Event definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.EVENTHANDLER,ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition)">
            <summary>
            
            </summary>
            <param name="eventHandler"></param>
            <param name="definition"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.Id">
            <summary>
            Message unique identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.EventGroupControlType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.DestIpAddress">
            <summary>
            Destination IpAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetEventDefinition.Pdus">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PROVIDEDSERVICEINSTANCE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SDSERVERCONFIG)">
            <summary>
             Parser for AR44 and older NCDs
            </summary>
            <param name="providedserviceinstance">Service instance from xml</param>
            <param name="serverconfig">Service discovery configuration</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.#ctor(ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.PROVIDEDSERVICEINSTANCE,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SOMEIPSDSERVERSERVICEINSTANCECONFIG)">
            <summary>
            Parser for AR2011 NCDs
            </summary>
            <param name="providedserviceinstance">Service instance from xml</param>
            <param name="serverconfig">Service discovery configuration</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.#ctor(System.String,System.UInt32,System.UInt32,ET.FW.Hal.Arxml.Xml.AUTOSAR_00046.SDCLIENTCONFIG)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="instanceId"></param>
            <param name="serverconfig"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.Id">
            <summary>
            Service unique identifier
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.InstanceId">
            <summary>
             Instance Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.InitailDelayMaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.InitailDelayMinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.InitailRepetationBaseDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.InitailRepetationsMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.OfferCyclicDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.RequestResponseDelayMaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.RequestResponseDelayMinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.TTL">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.MajorVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceConfigDefinition.MinorVersion">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition">
            <summary>
            Represents a Ethernet Service definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.#ctor(System.String)">
            <summary>
            Constructor with name only.
            </summary>
            <param name="name">Name of the message.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.#ctor(System.String,System.UInt32,System.UInt32,ET.FW.Hal.Ethernet.Catalogs.EthernetDeviceDefinition,ET.FW.Hal.Ethernet.Catalogs.Arxml.EthernetVlanDefinition)">
            <summary>
            Constructor with name, ID and sender
            </summary>
            <param name="name">name of the message</param>
            <param name="serviceId">Service id of the message</param>
            <param name="instanceId">Instance id of the message</param>
            <param name="sender">sending device</param>
            <param name="vlanDefinition"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Name">
            <summary>
            Message name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Dummy">
            <summary>
            Indicates if the message defines a dummy
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.SlotId">
            <summary>
            slot id for message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Description">
            <summary>
            Message description
            </summary>
            <remarks>
            Not used for dbc format
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.ServiceIdentifier">
            <summary>
             Service Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.InstanceIdentifier">
            <summary>
             Service Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.SourceIpAddress">
            <summary>
            Source IpAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.ServerConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Sender">
            <summary>
            EthernetDevice belonging this Service
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Vlan">
            <summary>
            EthernetDevice belonging this Service
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Pdus">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.EventGroups">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.RpcMethods">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.RpcPdus">
            <summary>
            Remote Procedure Call Pdus.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.Receivers">
            <summary>
            Service receiving EthernetDevices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetServiceDefinition.ReceiverConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal">
            <summary>
            Ethernet Signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            Signal value is extracted from given message payload bytes.
            </summary>
            <param name="definition">EthernetSignal Definition</param>
            <param name="messagePayload">The Ethernet message payload, used to extract message value</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            Signal value is extracted from given message payload bytes.
            </summary>
            <param name="definition">EthernetSignal Definition</param>
            <param name="messagePayload">The Ethernet message payload, used to extract message value</param>
            <param name="clone"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Pdu.IPduMessage,ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            Signal value is extracted from payload of given Ethernet message
            </summary>
            <param name="message">Ethernet Message</param>
            <param name="definition">Definition of the Ethernet signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Pdu.IPduMessage,ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            Signal value is extracted from payload of given Ethernet message
            </summary>
            <param name="message">Ethernet Message</param>
            <param name="definition">Definition of the Ethernet signal</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            </summary>
            <param name="definition">Definition of the can signal</param>
            <param name="rawValue">Raw value of signal</param>
            <remarks>
            Special constructor only for Clone() methode
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
             Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            </summary>
            <param name="definition">Ethernet Signal definition</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.#ctor(ET.FW.Hal.Ethernet.Catalogs.EthernetArraySignalDefinition)">
            <summary>
             Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal"/> class.
            </summary>
            <param name="definition">Array Signal Definition</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Name">
            <summary>
            Name of the Ethernet Signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Message">
            <summary>
            Set message which contains this signal
            Setter updates the signal values, message reference is not buffered
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.GetSignalBits(System.Byte[],ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Extracts signal value from payload byte array
            </summary>
            <param name="payload">Payload bytes</param>
            <param name="definition">Signal definition.</param>
            <returns>Masked signal bits</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.RawValue">
            <summary>
            Access raw value of the signal
            </summary>
            <remarks>
            Value is buffered here. It is not updated, if payload of associated message is modified. 
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.RawBytesValue">
            <summary>
            Access raw bytes of the signal
            </summary>
            <remarks>
            Value is buffered here. It is not updated, if payload of associated message is modified. RawBytesValue
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.ArrayDefinition">
            <summary>
            Full definition of the array signal 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Clone">
            <summary>
            Clones this signal
            </summary>
            <returns>A copy of this object</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Default">
            <summary>
            Default value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Maximum">
            <summary>
            Maximum value for the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Minimum">
            <summary>
            Minimum value for the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.Value">
            <summary>
            String Value for the Signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.GetValue``1">
            <summary>
            Gets the value for the signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignal.SetValue``1(``0)">
            <summary>
            Sets the Value for the signal
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition">
            <summary>
                Ethernet signal definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.#ctor(System.String,ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
                Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition" /> class.
            </summary>
            <param name="name">Signal name</param>
            <param name="pdu">pdu membership</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.#ctor(System.String)">
            <summary>
                Testing constructor
            </summary>
            <param name="name">Signal name</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Byteorder">
            <summary>
                Byte order of the signal in the Ethernet PDU message
            </summary>
            <remarks>Valid values: Intel, Motorola</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.IsCrc">
            <summary>
                Flag for End2End protection CRC
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.IsSequenceCounter">
            <summary>
                Flag for End2End sequence counter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.ToString">
            <summary>
                String representation of the object
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Clone">
            <summary>
                Creates a shallow copy of the current EthernetSignalDefinition object.
            </summary>
            <returns>EthernetSignalDefinition object</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.ComplexSignalName">
            <summary>
            defines the complex signal name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Name">
            <summary>
                Name of the Signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Description">
            <summary>
                Signal description
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.InternalType">
            <summary>
                Internal signal type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.SignalGroupName">
            <summary>
                Name of the SignalGroup
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.PDU">
            <summary>
                Reference to the signal containing message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Receivers">
            <summary>
                Reference collection to the receiving Ethernet devices
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Multiplexor">
            <summary>
                Multiplexor type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.IsMultiplexed">
            <summary>
                Signal belongs to a multiplexor group
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.IsUBitSignal">
            <summary>
             UBit Signal Type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.UBitSignalName">
            <summary>
            UBit Signal Name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.MultiplexorGroup">
            <summary>
                Relation to a multiplexor group
            </summary>
            <remarks>
                Property is obsolete, because some rare signals are assigned to multiple groups. Use collection
                MultiplexorGroups instead.
            </remarks>
            <value>
                First entry of MultiplexorGroups collection, 0 if no group assigned or signal is Multiplexor
            </value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.MultiplexorGroups">
            <summary>
                Relation to multiplexor group(s)
            </summary>
            <remarks>
                In some rare cases a signal is assigned to more than one group
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.CycleTime">
            <summary>
                Generic signal cycle time
            </summary>
            <remarks>
                Unit: ms,
                Valid value range: 0..65535
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.CycleTimeActive">
            <summary>
                Generic signal cycle time active
            </summary>
            <remarks>
                Unit: ms,
                Valid value range: 0..65535
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.SendType">
            <summary>
                Generic signal send type
            </summary>
            <remarks>As defined in SendType</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.GenSigTimeout">
            <summary>
                Interaction Layer Timeout Supervision
            </summary>
            <remarks>
                Unit: ms,
                Valid value range: 0..65535
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.BitLength">
            <summary>
                Bit length of the signal
            </summary>
            <remarks>Valid value range: 1..64</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.BitStart">
            <summary>
                Bit start position of the signal in the Ethernet message
            </summary>
            <remarks>Valid value range: 0..63</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Factor">
            <summary>
                Value range conversation multiplicator factor. (bit representation - real representation)
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Offset">
            <summary>
                Value range conversation offset. (bit representation - real representation)
            </summary>
            <remarks>Valid value range: double</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Unit">
            <summary>
                Unit of the real representation of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.BitwiseMinimum">
            <summary>
                Bitwise minimum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.BitwiseMaximum">
            <summary>
                Bitwise maximum value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.BitwiseDefault">
            <summary>
                Bitwise default value (DBC: GenSigStartValue)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Values">
            <summary>
                State definitions of the values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.Mask">
            <summary>
                State definitions of the MASK values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.ScaleValue">
            <summary>
            Getting the scale value which contains Mask Value and Symbol in CompuMethod.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.GetMinimum``1">
            <summary>
                Get allowed minimum
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Minimum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.GetMaximum``1">
            <summary>
                Get allowed maximum
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Maximum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.GetDefault``1">
            <summary>
                Get default value
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Default value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.ConvertToRaw``1(``0)">
            <summary>
                Convert signal value to raw value
                Method handles numerical and textual values
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">The Value</param>
            <returns>Converted raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.StringToRaw(System.String)">
            <summary>
                Calculate raw value (bitfield) from string value
                Method handles text constants (e.g. SNA), bool values (e.g. true) and numerical values
            </summary>
            <param name="value">string value</param>
            <returns>raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.NumericToRaw``1(``0)">
            <summary>
                Calculate raw value (bitfield) from specific typed numeric value.
                Signal value is not modified here.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">value from type T</param>
            <returns>raw value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.RawToValue``1(System.UInt64)">
            <summary>
                Get typed value from raw value (bitfield)
                This method considers value names (enumeration) for string type
            </summary>
            <typeparam name="T">Type of signal value</typeparam>
            <param name="bitValue">raw value of Ethernet signal</param>
            <returns>value from type T of Ethernet signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.RawToString(System.UInt64)">
            <summary>
                Calculate string value from given raw value (bitfield)
                This method considers value names (enumeration)
            </summary>
            <param name="bitValue">raw value of Ethernet signal</param>
            <returns>string value of signal with unit</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.RawToStringNoUnit(System.UInt64)">
            <summary>
                Calculate string value from given raw value (bitfield)
                This method considers value names (enumeration)
            </summary>
            <param name="bitValue">raw value of Ethernet signal</param>
            <returns>string value of signal without unit</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.TryGetRawValueAsString(System.UInt64,System.String@)">
            <summary>
                Try to get string value from given raw value (bitfield) with value names (enumeration)
                or bool conversion
            </summary>
            <param name="bitValue">raw value of Ethernet signal</param>
            <param name="value">string value of signal without unit</param>
            <returns>True  if bit-value was converted successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition.RawToNumeric``1(System.UInt64)">
            <summary>
                Calculate specific typed value from given raw value (bitfield)
                This method considers only numerical values
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="bitValue">raw value</param>
            <returns>value from type T</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.Id">
            <summary>
             Service Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.pduName">
            <summary>
            Pdu Name associated with socket
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.InstanceId">
            <summary>
             Instance Id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.IpAddress">
            <summary>
            Destination IpAddress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.ServiceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.Vlan">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.EcuDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.EthernetSocketAddressDefinition.ClientConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal">
            <summary>
            Ethernet signal interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.Definition">
            <summary>
            Full definition of the signal 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.ArrayDefinition">
            <summary>
            Full definition of Array Signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.Default">
            <summary>
            Gets default value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.Maximum">
            <summary>
            Gets maximum value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.Minimum">
            <summary>
            Gets minimum value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.Value">
            <summary>
            Access signal value as string
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.RawValue">
            <summary>
            Access raw value of the signal
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.RawBytesValue">
            <summary>
            Bytes value for an array signal
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.GetValue``1">
            <summary>
            Get typed value.
            Method returns the converted real value. Typeparam T must match signal definition.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <returns>Signal value</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal.SetValue``1(``0)">
            <summary>
            Sets typed value.
            Method converts and sets the given real value. Typeparam T must match signal definition.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">Typed value to set</param>
            <remarks>
            Method throws exception, if given value cannot be set.
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalog">
            <summary>
            Providing textual representation of an Ethernet message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object containing a UDP message to a string representation.
            </summary>
            <param name="message">message object</param>
            <returns>translation as string</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalogLoader">
            <summary>
            EthernetCatalog factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Generates ICMPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">Not used</param>
            <returns>An ICMPCatalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IcmpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Generates ICMPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">Not used</param>
            <returns>An ICMPCatalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IPv4Catalog">
            <summary>
            Providing textual representation of an Ethernet message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IPv4Catalog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IPv4Catalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object containing an Ethernet message to a string representation.
            </summary>
            <param name="message">message object</param>
            <returns>translation as string</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IPv4CatalogLoader">
            <summary>
            EthernetCatalog factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IPv4CatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Generates IPv4Catalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">Not used</param>
            <returns>An IPv4Catalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IPv4CatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Generates IPv4Catalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">Not used</param>
            <returns>An IPv4Catalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.NwmType">
            <summary>
            Network Management Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.central">
            <summary>
            central (zentral - MBW210)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.decentral">
            <summary>
            decentral (MB-OSAN)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.none">
            <summary>
            none (keines)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.VAG_OSEK">
            <summary>
            VAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.BMW_OSEK">
            <summary>
            BMW OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.PAG_OSEK">
            <summary>
            PAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.DBAG_OSEK">
            <summary>
            DBAG OSEK
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.NwmType.Autosar">
            <summary>
            Autosar NM
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.SendType">
            <summary>
            Send types (could be Daimler specific)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.Undefined">
            <summary>
            not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicX">
            <summary>
            cyclic transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.spontanX">
            <summary>
            spontanous transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicIfActiveX">
            <summary>
            cyclic if active
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.spontanWithDelay">
            <summary>
            spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicAndSpontanX">
            <summary>
            cyclic and spontan
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicAndSpontanWithDelay">
            <summary>
            cyclic and spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.spontanWithRepitition">
            <summary>
            spontan with  repitition
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicIfActiveAndSpontanWD">
            <summary>
            cyclic if active and spontan with delay
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicIfActiveFast">
            <summary>
            cyclic if active fast
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.cyclicWithRepeatOnDemand">
            <summary>
            cyclic with repeat on demand
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.SendType.none">
            <summary>
            no transmission
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog">
            <summary>
            Providing textual representation of an Ethernet message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.Chat">
            <summary>
            Dictionary to store TCP connection details
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.Reset">
            <summary>
            Will be called when a reload happens.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object containing a UDP message to a string representation.
            </summary>
            <param name="message">message object</param>
            <returns>translation as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.TCPoptions(System.Text.StringBuilder,System.Byte[],System.UInt16,System.UInt16)">
            <summary>
            Disassemble TCP options
            </summary>
            <param name="msg">StringBuilder to append text to</param>
            <param name="data">byte stream containing options of variable size</param>
            <param name="start">starting index of options inside data</param>
            <param name="length">length of options inside data</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalog.FindChat(ET.FW.Hal.Ethernet.Protocols.TcpMessage)">
            <summary>
            Find the corresponding chat details of an ongoing TCP connection
            </summary>
            <param name="tcp">message to lookup chat details</param>
            <returns>Chat details or null</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.TcpCatalogLoader">
            <summary>
            EthernetCatalog factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Generates TCPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">Not used</param>
            <returns>An TCPCatalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.TcpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Generates TCPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">Not used</param>
            <returns>An TCPCatalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog">
            <summary>
            Contains the function catalog and service deployment for the Thrift.Me communication. This class can read 
            both from XML files and uses them to translate the binary data from a Thrift.Me message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.enumerations">
            <summary>
            Contains all available information about a ThriftMe enumeration.
            Key = name of the enumeration;
            Value = an enumeration object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.structs">
            <summary>
            Contains all available information about a ThriftMe struct.
            Key = name of the struct;
            Value = a struct object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.exceptions">
            <summary>
            Contains all available information about a ThriftMe exception.
            Key = name of the exception;
            Value = an exception object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.functions">
            <summary>
            Contains all available information about a ThriftMe function.
            Key = id of the function;
            Value = a function object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.events">
            <summary>
            Contains all available information about a ThriftMe event.
            Key = id of the event;
            Value = an event object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.services">
            <summary>
            Contains all available information about a ThriftMe service.
            Key = The ID of the service;
            Value = a ThriftMeService object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.brokers">
            <summary>
            Contains all available information about a ThriftMe service broker.
            Key = The ID of the broker;
            Value = a ThriftMeServiceBroker object.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.index">
            <summary>
            The global index for decoding the message payload.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.MaxNumberOfOutputs">
            <summary>
            Defines how long the output of parameter values should be.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.TranslateMessage(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object to an string representation
            </summary>
            <param name="message">message object</param>
            <returns>translation as MessageTranslation</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.parseFcat(System.Xml.XmlDocument)">
            <summary>
            Parses the whole function catalog and saves all required information.
            </summary>
            <param name="doc">The function catalog as XML file.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.parseDeployment(System.Xml.XmlDocument)">
            <summary>
            Parses the whole service deployment and saves all required information.
            </summary>
            <param name="doc">The service deployment as XML file.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object to a string representation.
            </summary>
            <param name="message">A Thrift.Me message.</param>
            <returns>The translated message as string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.Translate(ET.FW.Core.Messaging.IMessage,ET.FW.Core.Common.FrameworkError@)">
            <summary>
            Translates a message object to a string representation.
            </summary>
            <param name="message">A Thrift.Me message.</param>
            <param name="frameworkError">framework error when occoured</param>
            <returns>The translated message as string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.translateMessageData(System.Byte[],ET.FW.Hal.Ethernet.Catalogs.CatalogClasses.ThriftMeFunction,ET.FW.Core.Common.FrameworkError@)">
            <summary>
            Translates the payload of a Thrift.Me message to a printable string.
            This method translates only the field header (datatype and ID of the value) and calls 
            translateValue() for the translation of each value.
            </summary>
            <param name="data">The payload of a Thrift.Me message.</param>
            <param name="func">The function which was transmitted</param>
            <param name="frameworkError">framework error when occoured</param>
            <returns>The translated message data as string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.translateValue(System.Byte[],System.Int32,ET.FW.Core.Common.FrameworkError@)">
            <summary>
            Translates a single value to a string.
            </summary>
            <param name="data">The payload of a Thrift.Me message.</param>
            <param name="datatype">The datatype of the next value.</param>
            <param name="frameworkError">framework error when occoured</param>
            <returns>The translated value as string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalog.getNameOfType(System.Int32)">
            <summary>
            Returns the name of datatype by getting its number as parameter.
            </summary>
            <param name="type">The number of a datatype</param>
            <returns>The name of a datatype.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalogLoader">
            <summary>
            ThriftMeCatalog factory.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Reads the XML functioncatalog and saves all important information in a ThriftMeCatalog object.
            </summary>
            <param name="configuration">catalog configuration</param>
            <param name="fullSourcePath">full source path</param>
            <returns>a catalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.ThriftMeCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Reads the XML functioncatalog and saves all important information in a ThriftMeCatalog object.
            </summary>
            <param name="configuration">catalog configuration</param>
            <param name="stream">input stream</param>
            <returns>loaded catalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.UdpCatalog">
            <summary>
            Providing textual representation of an Ethernet message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.UdpCatalog.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.UdpCatalog.Translate(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Translates a message object containing a UDP message to a string representation.
            </summary>
            <param name="message">message object</param>
            <returns>translation as string</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.UdpCatalogLoader">
            <summary>
            EthernetCatalog factory
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.UdpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.IO.Stream)">
            <summary>
            Generates UDPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="stream">Not used</param>
            <returns>An UDPCatalog</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.UdpCatalogLoader.Load(ET.FW.Config.Catalogs.CatalogConfiguration,System.String)">
            <summary>
            Generates UDPCatalog (independent from source)
            </summary>
            <param name="configuration">Configuration of the catalog</param>
            <param name="fullSourcePath">Not used</param>
            <returns>An UDPCatalog</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog">
            <summary>
            Interface for the Ethernet specifics of the ICatalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.Network">
            <summary>
            Associated Ethernet network (bus) configuration
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.Devices">
            <summary>
            All Ethernet devices in the catalog
            </summary>
            <remarks>Devices could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.PDUs">
            <summary>
            All ETHERNET PDUs (messages) in the catalog
            </summary>		
            <remarks>Messages could be multiple defined in different networks</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.Signals">
            <summary>
            All Ethernet signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.ArraySignals">
            <summary>
            All Ethernet signals in the catalog
            </summary>
            <remarks>Messages could be multiple defined</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog.GetStructure(ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Get Signals from of the Ethernet message
            </summary>
            <param name="message">Ethernet message to translate to signal structure</param>
            <returns>Etherent signals from message</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.AuthenticateDiagnosticsUser">
            <summary>
            Start Authenticate Diagnostic User or Tester via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.AuthenticateDiagnosticsUser.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,ET.FW.Hal.Ethernet.Diagnostics.AuthenticationDirectionType,ET.FW.Hal.Ethernet.Diagnostics.AuthenticationTaskType,System.TimeSpan,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="direction"></param>
            <param name="task"></param>
            <param name="authenticationCerificate"></param>
            <param name="timeout">Job timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.AuthenticateDiagnosticsUser.VerificationResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.AuthenticateDiagnosticsUser.AuthenticationResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.AuthenticateDiagnosticsUser.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationDirectionType">
            <summary>
            Authentication Direction Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationDirectionType.Unidirectional">
            <summary>AuthenticationDirectionType</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationDirectionType.Bidirectional">
            <summary>Stop Routine - positive response required</summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationTaskType">
            <summary>
            Authentication Task Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationTaskType.InitiateAuthentication">
            <summary>Verify Certificate (Initiate Authentication)</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationTaskType.VerifyCertificateOwnership">
            <summary>Verify Certificate Ownership</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationTaskType.DeAuthenticate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationVerificationResult">
            <summary>
            Authentication Verification Result
            </summary>//todo Update for remianing results from odx-d file
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationVerificationResult.CertificateVerified">
            <summary>Certificate verified, Ownership verification necessary</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationVerificationResult.AuthenticationComplete">
            <summary>Ownership verified, authentication complete</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.AuthenticationVerificationResult.DeAuthentication">
            <summary>
            De-authentication successful
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ClearDiagnosticInfoService">
            <summary>
            UDS service: Clear Diagnostic Information
            Service clears all DTCs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ClearDiagnosticInfoService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.UInt32)">
            <summary>
            Constructor (used for DTC groups)
            </summary>
            <param name="session">CAN TP session</param>
            <param name="timeout">service timeout</param>
            <param name="dtc">DTC/group code of DTC(s) to clear (0xFFFFFF for all)</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession,System.TimeSpan,ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType)">
            <summary>
            
            </summary>
            <param name="payloadType"></param>
            <param name="requestTimeout"></param>
            <param name="session"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.RetryCount">
            <summary>
            Number of retries for this service.
            </summary>
            <remarks>
            Value hast to be set before starting the service, it is decremented on every retry due to timeout
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.doipType">
            <summary>
            service parameters (optional)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.RoutingResponseErrorMessage">
            <summary>
            Routing Response Error Message if any
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.NoResponseRequired">
            <summary>
            Flag for requests which require no (positive) response
            If flag is set, a response timeout causes the service to be successfully completed, otherwise a timeout causes service failure
            </summary>
            <remarks>
            Flag is set by derived service classes, if individual service parameter indicate it
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.Start">
            <summary>
            Start service: send request, wait for response(s) and handle it
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.SendRequest">
            <summary>
            Sends the diagnostics service request.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.TimeoutDefault">
            <summary>
            Default timeout for response (based on P2 time, with additional delay due to communication and windows latencies)
            P2 time 25ms .. 50 ms
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.TimeoutNoResponse">
            <summary>
            Default timeout for requests which do not require a response response (based on min P3 time, with additional delay due to communication and windows latencies)
            P3 time 55ms .. 5s
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.Decoupler">
            <summary>
            Event decoupler for incoming events
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.currentTimeout">
            <summary>
            Current timeout
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.TimeoutPending">
            <summary>
            Extended response timeout after pending response from ECU (based on P3/P2* time, with additional delay due to communication and windows latencies)
            P3/P2* time 55ms .. 5s
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.Session">
            <summary>
            CAN TP session to use
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.timeoutTimer">
            <summary>
            Timer used for timeout checking
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.Session_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IDoIPMessage})">
            <summary>
            Handler for TP messages of this session
            </summary>
            <param name="sender">the TP session</param>
            <param name="e">event args containig the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.HandleResponse(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            Handle received messages
            </summary>
            <param name="response">response message</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.TimeoutHandler(System.Object)">
            <summary>
            Response timeout handler
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DaignosticsRoutingService.Shutdown">
            <summary>
            Shutdown job: stop timer, disconnect from session output
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService">
            <summary>
            Common base class for diagnostics service requests using CAN TP protocol.
            Class contains common implementation for KWP2000 and UDS protocol.
            </summary>
            <remarks>
            if RetryCount property is set, the service request is repeated on timeout
            RetryCount property is read from session, if session is of type DiagnosticsSession
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.Byte,System.Nullable{System.Byte},System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService"/> class.
            </summary>
            <param name="session">TP session to use. If session is of type DiagnosticsSession, it controls the number of retries of this service</param>
            <param name="timeout">job timeout</param>
            <param name="serviceID">service ID</param>
            <param name="subfunction">service subfunction, null for none</param>
            <param name="parameters">additional parameters (optional)</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.Byte)">
            <summary>
            Constructor for services without subfunction
            </summary>
            <param name="session">TP session to use. If session is of type DiagnosticsSession, it controls the number of retries of this service</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.RetryCount">
            <summary>
            Number of retries for this service.
            </summary>
            <remarks>
            Value hast to be set before starting the service, it is decremented on every retry due to timeout
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.serviceID">
            <summary>
            Request service ID (as byte)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Subfunction">
            <summary>
            Subfunction / (UDS: LEV)
            </summary>
            <value>subfunction, null for none</value>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Parameters">
            <summary>
            service parameters (optional)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.NoResponseRequired">
            <summary>
            Flag for requests which require no (positive) response
            If flag is set, a response timeout causes the service to be successfully completed, otherwise a timeout causes service failure
            </summary>
            <remarks>
            Flag is set by derived service classes, if individual service parameter indicate it
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Start">
            <summary>
            Start service: send request, wait for response(s) and handle it
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.SendRequest">
            <summary>
            Sends the diagnostics service request.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Subfunction (opt.), Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.TimeoutDefault">
            <summary>
            Default timeout for response (based on P2 time, with additional delay due to communication and windows latencies)
            P2 time 25ms .. 50 ms
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.TimeoutNoResponse">
            <summary>
            Default timeout for requests which do not require a response response (based on min P3 time, with additional delay due to communication and windows latencies)
            P3 time 55ms .. 5s
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.currentTimeout">
            <summary>
            Current timeout
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.TimeoutPending">
            <summary>
            Extended response timeout after pending response from ECU (based on P3/P2* time, with additional delay due to communication and windows latencies)
            P3/P2* time 55ms .. 5s
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Session_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IDoIPMessage})">
            <summary>
            Handler for TP messages of this session
            </summary>
            <param name="sender">the TP session</param>
            <param name="e">event args containig the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.TimeoutHandler(System.Object)">
            <summary>
            Response timeout handler
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Shutdown">
            <summary>
            Shutdown job: stop timer, disconnect from session output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Session">
            <summary>
            CAN TP session to use
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.timeoutTimer">
            <summary>
            Timer used for timeout checking
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.ReSendRoutingRequest">
            <summary>
            Re sends the routing requests and once its successful, re-sends the previous diagnostic request
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.HandleResponse(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            Handle received messages
            </summary>
            <param name="response">response message</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.authenticateDone">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.currentService">
            <summary>
            Currently executed service (KWP2000 / UDS)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.Error">
            <summary>
            Error (negative response)
            </summary>
            <value>Undefined for no error code (could be timeout)</value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.ErrorText">
            <summary>
            Error as text 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.ResponseData">
            <summary>
            Response message payload data.
            Array contains complete payload, starting with ServiceID byte.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.ResponseValid">
            <summary>
            Check if service response data contains valid data
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.MinResponseBytes">
            <summary>
            Expected number of data bytes, should be set by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.CheckResponseLength">
            <summary>
            Check length of message payload
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.CheckResponseData">
            <summary>
            Check response data bytes (may be implemented by derived services for additional checks)
            </summary>
            <returns>true if data bytes are okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.ToString">
            <summary>
            return textual representation of object
            </summary>
            <returns>object as text</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsService.DoIpHeaderLength">
            <summary>
            Indicates the DoIp Header length
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.DefaultTimeout">
            <summary>
            Default timeout for internal requests
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.#ctor(ET.FW.Hal.Devices.Socket.ITcpChannel,System.Byte,System.UInt16,System.UInt16,System.String,System.Byte[])">
            <summary>
            The constructor
            </summary>
            <param name="channel">TCP Channel</param>
            <param name="version">Protocol version</param>
            <param name="sourceAddress">Source address</param>
            <param name="destinationAddress">Target address</param>
            <param name="ecuName">Ecu name</param>
            <param name="vin"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.DiagProtocol">
            <summary>
            Diagnostics protocol for the particular ECU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.Retries">
            <summary>
            Default number of retries for the services which uses this session
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.IsExtendedSession">
            <summary>
            Flag to indicate active extended session
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.SendMessage(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            Sends a DoIP Message
            </summary>
            <param name="request">DoIP Message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.StopExtendedSession">
            <summary>
            Switch corresponding ECU back to default session
            Executes "session control" request and stops cyclic sending of "tester present" messages
            </summary>
            <returns>Job to monitor the operation</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.StartExtendedSession">
            <summary>
            Switch corresponding ECU to extended diagnostics session
            Execute "session control" request and start cyclic sending of "tester present" messages
            </summary>
            <returns>Job to monitor the operation</returns>
            <remarks>DiagProtocol property must have correct value for the ECU, otherwise session start fails.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.StopTesterPresent">
            <summary>
            Executes the stop extended session.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.StartEnded(System.Object,ET.FW.Core.Jobs.JobStateEventArgs)">
            <summary>
            Ended handler for start extended session job
            </summary>
            <param name="sender">start session request</param>
            <param name="e">job state</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.testerPresentTimer">
            <summary>
            Timer used for cyclic tester present message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession.TesterPresentHandler(System.Object)">
            <summary>
            Tester present timer handler: send cyclic tester present message
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSessionControlService">
            <summary>
            UDS service: Switch active diagnostics session
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSessionControlService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.SessionType)">
            <summary>
            Service constructor with parameters to initialize it.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="type">session type to activate</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSessionControlService.Type">
            <summary>
            Session type to switch to
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.SessionType">
            <summary>
            Diagnostics session types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.Default">
            <summary>Default session</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.Programming">
            <summary>Programming session</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.ExtendedDiagnostics">
            <summary>Extended Diagnostics session</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.SafetySystemDiagnostics">
            <summary>Safety System Diagnostics session</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.Standby">
            <summary>Stand by session</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.SessionType.NoPositiveResponseFlag">
            <summary>Flag which indicates that no positive response shall be returned</summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.CreateMessage">
            <summary>
            Create TX message for this session
            </summary>
            <returns>the newly created TP message</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.Vin">
            <summary>
            Vin Number
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.ecuName">
            <summary>
            ecu name
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.#ctor(ET.FW.Hal.Devices.Socket.ITcpChannel,System.Byte,System.UInt16,System.UInt16,System.String,System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.SendMessage(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            Send CAN TP (request) message
            </summary>
            <param name="msg">the message</param>
            <returns>
            Send name, which indicates if message could be sent, further errors are not monitored here
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.SendDiagRouting(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.EcuResetService">
            <summary>
            ECU reset service executes a Power On Reset
            </summary>
            <remarks>Service is identical for KWP2000 / UDS protocols</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.EcuResetService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.EcuResetService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">job timeout</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.EcuResetService.ResetMode">
            <summary>
            reset mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.EcuResetService.ResetMode.PowerOnReset">
            <summary> Hard reset </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.IDoIpTpMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.Nrc">
            <summary>
            NRC (negative response codes)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ProtocolType">
            <summary>
            Diagnostics protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ProtocolType.Undefined">
            <summary>Undefined protocol</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ProtocolType.Kwp2000">
            <summary>KWP 2000</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ProtocolType.Uds">
            <summary>UDS (Unified Diagnostic Service)</summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo">
            <summary>
            UDS service: Read Active Diagnostic Information
            </summary>
            <remarks>
            At the mopment only diag version and active session fields are translated, 
            other data can be extracted from ResponsePayload
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo.ActDiagVersion">
            <summary>
            Extract active diag version
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo.DiagVersion">
            <summary>
            Diag version string (Response bytes 0-2 as hex values e.g. 028100)
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadActiveDiagnosticInfo.ActDiagSession">
            <summary>
            Extract active diag session
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService">
            <summary>
            UDS service: Read data by identifier
            </summary>
            <remarks>
            On success the read data can be taken from ResponseData property starting with index 3.
            Response data interpretation may be implemented by derived servic classes for specific local identifiers.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="identifier">identifier of data to read</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.StandardDataID)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="identifier">Standard data identifier of data to read</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService.Identifier">
            <summary>
            Identifier of data to read
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDataByIdentifierService.CheckResponseData">
            <summary>
            Check response data bytes (byte 1 and 2 must contain the requested identifier)
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService">
            <summary>
            UDS service: Read Diagnostic Trouble Codes and related information
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.DtcInfoRequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="requestType">service subfunction / Type of read DTC info request</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.DtcInfoRequestType,ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="requestType">service subfunction / Type of read DTC info request</param>
            <param name="stateMask">DTC status mask for filtering of DTCs to report</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.DtcDataLength">
            <summary>
            Size of one DTC information block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.DtcCount">
            <summary>
            Number of DTCs contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.StatusAvailabilityMask">
            <summary>
            DTC status availability mask: Mask contains all states which are supported by the ECU
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadDtcInfoService.GetDtc(System.Int32)">
            <summary>
            Extract DTC information from response
            </summary>
            <param name="idx">DTC index must be smaller than DtcCount</param>
            <returns>DTC code and state</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DtcInfoRequestType">
            <summary>
            ReadDtcInfo subfunctions / request types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcInfoRequestType.SupportedDtcs">
            <summary>Report all supported DTCs</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcInfoRequestType.DtcsByStatus">
            <summary>Report all DTCs which match given status mask</summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DtcAndState">
            <summary>
            DTC code + DTC state
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcAndState.Code">
            <summary>
            DTC code
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcAndState.State">
            <summary>
            DTC state (direct from KWP2000 message)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds">
            <summary>
            DTC state used by UDs services
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.TestFailed">
            <summary>Most recent test failed</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.TestFailedThisOpCycle">
            <summary>Test failed at least once during current operation cycle</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.Pending">
            <summary>Test failed during current or last completed operation cycle</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.Confirmed">
            <summary>DTC has failed at least once since the last call to Clear Diagnostic Information and self-healing criteria have not yet been satisfied and the DTC has not been removed from the fault memory due to an overflow of the available fault records</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.TestNotCompleted">
            <summary>DTC test has not run to completion since the last time diagnostic information was cleared.</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.TestFailedSinceLastClear">
            <summary>DTC test returned a Test Failed This Operation Cycle = 1 result at least once since the last time diagnostic information was cleared.</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.TestNotCompletedThisOpCycle">
            <summary>DTC test has not run to completion this operation cycle (or since the last time diagnostic information was cleared this operation cycle).</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.WarningIndicator">
            <summary>Warning indicator requested to be ON.</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.DtcStateUds.All">
            <summary>Combination of all states </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier">
            <summary>
            Request the Backend_CA_Certificate_Identification via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="timeout">Job timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier.CertificateIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuCertificate">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuCertificate.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="timeout">Job timeout.</param>
            <param name="requestId">requestId</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuCertificate.Nonce">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuCertificate.EphemeralEcuPublicKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuSerialNumber">
            <summary>
            Request ECU serial number via UDS.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuSerialNumber.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Constructor for ECU serial number
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuSerialNumber.SerialNumber">
            <summary>
            Serial number
            </summary>
            <value>
            Diagnostics response payload as string
            </value>
            <remarks>T
            Trailing 0-bytes are skipped
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEStandVersion">
            <summary>
            Request E-stand version via UDS
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadEStandVersion.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.StandardDataID)">
            <summary>
            Initializes a new instance of the ReadEStandVersion class
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="standardDataId">Data ID changes for each ECU</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadEStandVersion.EStandVersion">
            <summary>
            EStandVersion info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadHWPartNumber">
            <summary>
            Request HW part number via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadHWPartNumber.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific HW part number
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadHWPartNumber.HWNumber">
            <summary>
            Extract HW number from response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadHWSupplierID">
            <summary>
            Request HW supplier identification via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadHWSupplierID.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadHWSupplierID"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadHWSupplierID.HWSupplier">
            <summary>
            Extract HW version from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadHWVersion">
            <summary>
            Request HW version via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadHWVersion.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadHWVersion"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadHWVersion.HWVersion">
            <summary>
            Extract HW version from response data
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers">
            <summary>
            Request SW part number(s) via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific SW part numbers
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers.ModulePartNumberLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers.ModuleCount">
            <summary>
            Number of modules contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of modules
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWPartNumbers.GetPartNumber(System.Int32)">
            <summary>
            Extract part number from response
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module part number</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions">
            <summary>
            Request SW version(s) via UDS. 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Constructor for Mercedes Car Group specific SW part numbers
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions.ModuleVersionLength">
            <summary>
            Size of module data block in bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions.ModuleCount">
            <summary>
            Number of modules contained in response
            </summary>
            <remarks>
            Property is only valid, after service is successfully completed!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions.CheckResponseLength">
            <summary>
            Check length of response data, length depends on number of modules
            </summary>
            <returns>true if length is okay</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadSWVersions.GetSWVersion(System.Int32)">
            <summary>
            Extract version from response data
            </summary>
            <param name="module">Module number (0..ModuleCount-1)</param>
            <returns>module version</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ReadVinDataIdentifier">
            <summary>
            Request the VIN Data Identifier
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.ReadVinDataIdentifier.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.ReadEcuBackendCertificateIdentifier"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="timeout">Job timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.ReadVinDataIdentifier.VinIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService">
            <summary>
            UDS service: Routine Control By Identifier
            </summary>
            <remarks>
            Service does NOT switch ECU diagnostic session. If session control is required, it should be implemented by calling method.
            On success the returned status data can be taken from ResponseData property starting with index ResponsePayloadIndex (4).
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType,System.UInt16,System.Byte[])">
            <summary>
            The Constructor.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">Service timeout</param>
            <param name="type">Routine Control Type: Start/Stop/Request Results</param>
            <param name="identifier">Identifier of data to read</param>
            <param name="data">Data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService.Identifier">
            <summary>
            Identifier of data to write
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService.ResponsePayloadIndex">
            <summary>
            Index of first payload data byte in response array
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Level/Type, Identifier, Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlService.CheckResponseData">
            <summary>
            Check response data bytes.
            Byte 2 and 3 must contain the requested identifier.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType">
            <summary>
            Routine Control type 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType.StartRoutine">
            <summary>Start Routine - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType.StopRoutine">
            <summary>Stop Routine - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType.RequestRoutineResults">
            <summary>Request Routine Results - positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType.StartRoutineNoPositiveResponseRequired">
            <summary>Start Routine - no positive response required</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.RoutineControlType.StoptRoutineNoPositiveResponseRequired">
            <summary>Stop Routine - no positive response required</summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.SendRoutingRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.SendRoutingRequest.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DiagnosticsSession,System.TimeSpan)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.ServiceID">
            <summary>
            Common service IDs for KWP2000 and UDS protocols
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.ServiceID.PositiveResponseFlag">
            <summary>
            The positive response flag
            </summary>
            <remarks>
             Positive response uses request service ID with bit 6 set (serviceID | 0x40)
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.StandardDataID">
            <summary>
            UDS: Standard Data Identifiers for Read Data by Identifier service
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel">
            <summary>
            TcpEthernetChannel is used for sending and recieving TCP message using Ethernet Bus
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.#ctor(ET.FW.Hal.Ethernet.MacAddress,ET.FW.Hal.Ethernet.MacAddress,System.Net.IPAddress,System.Net.IPAddress,System.UInt16,System.UInt16,ET.FW.Hal.Ethernet.IEthernetBus)">
            <summary>
            
            </summary>
            <param name="sourceMacAddress"></param>
            <param name="destMacAddress"></param>
            <param name="sourceIpAddress"></param>
            <param name="destIpAddress"></param>
            <param name="sourceTcpPort"></param>
            <param name="destinationTcpPort"></param>
            <param name="ethBus"></param>
        </member>
        <member name="E:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.OnMessageRecieved">
            <summary>
            Output event which signals all outgoing messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.WritetoClient(System.Byte[])">
            <summary>
            
            </summary>
            <param name="messageBytes"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.Stop">
            <summary>
            
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.SendAcknowledgement">
            <summary>
            Send TCP Acknowledgement
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.Start">
            <summary>
            Start the channel access
            </summary>
            <returns>true on sucess</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.syncObj">
            <summary>
            Synchronization object, used for synchronization of member access
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.RetryCount">
            <summary>
            Number of retries for this service.
            </summary>
            <remarks>
            Value hast to be set before starting the service, it is decremented on every retry due to timeout
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.TcpEthernetChannel.TimeoutHandler(System.Object)">
            <summary>
            Response timeout handler
            </summary>
            <param name="state">state object, not used here</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.UdsService">
            <summary>
            UDS over CAN service
            </summary>
            <remarks>
            Class may be used as base class for more specific UDS service classes
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Diagnostics.UdsService.NoPositiveResponseFlag">
            <summary>
            Subfunction level flag which indicates that no positive response shall be returned.
            Request with this bit set in subfunction level byte are not acknowledged by receiver, only negative responses may be received
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.UdsService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.ServiceID,System.Nullable{System.Byte},System.Byte[])">
            <summary>
            Constructor for services
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
            <param name="level">LEV: service subfunction level, null for none. If bit 7 (0x80) of level is set, the service requires no response!</param>
            <param name="parameters">additional parameters (optional)</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.UdsService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,ET.FW.Hal.Ethernet.Diagnostics.ServiceID)">
            <summary>
            Constructor for services without subfunction
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">service timeout</param>
            <param name="serviceID">service ID</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.UdsService.ServiceID">
            <summary>
            Request service ID
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService">
            <summary>
            UDS service: Write data by identifier
            </summary>
            <remarks>
            Service does NOT switch ECU diagnostic session. If session control is required, it should be implemented by calling method.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService.#ctor(ET.FW.Hal.Ethernet.Diagnostics.DoIpTpSession,System.TimeSpan,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService"/> class.
            </summary>
            <param name="session">TP session to use</param>
            <param name="timeout">Service timeout</param>
            <param name="identifier">Identifier of data to read</param>
            <param name="data">Data block to write</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService.Identifier">
            <summary>
            Identifier of data to write
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService.CreatePayload">
            <summary>
            Initialize request payload: { ServiceID, Identifier, Parameters (opt.) }
            </summary>
            <returns>payload byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Diagnostics.WriteDataByIdentifierService.CheckResponseData">
            <summary>
            Check response data bytes (byte 1 and 2 must contain the requested identifier)
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.E2EObserver">
            <summary>
            Observer for Ethernet messages which validates E2E protection CRC fields
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.E2EObserver.profile">
            <summary>
            E2E profile implementation for CRC calculation 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.E2EObserver.Create(ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog)">
            <summary>
            Creates an E2E observer instance for given catalog if necessary.
            E2E observer is created if catalog contains any E2E definitions and if the E2E definition profile is supported by observer implementation.
            </summary>
            <param name="catalog">The Ethernet catalog.</param>
            <returns>New E2E observer for given Ethernet catalog, null if no E2E protection is configured</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.E2EObserver.#ctor(ET.FW.Hal.Ethernet.Catalogs.IEthernetCatalog)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.E2EObserver"/> class.
            </summary>
            <param name="catalog">The Ethernet catalog.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.E2EObserver.CheckMessage(ET.FW.Hal.Ethernet.Catalogs.EthernetPduDefinition)">
            <summary>
            Checks E2E protection CRC of given message. If message is E2E protected and the CRC is invalid an <see cref="T:ET.FW.Core.Messaging.MessageError"/> is set to the message.
            </summary>
            <param name="pdu">The CAN message to check.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetBus">
            <summary>
            Ethernet bus API allows sending and receiving of Ethernet messages
            </summary>
            <remarks>
            Class must be public, because instances are created via reflection
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetBus.#ctor(System.String)">
            <summary>
            Constructor with bus name
            </summary>
            <param name="name">bus name</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetBus.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetBus.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol},ET.FW.Core.Hal.IChannelAccess,System.Boolean)">
            <summary>
            Configure and initialize bus
            </summary>
            <param name="protocols">collection of protocols for bus (configured in XML-file)</param>
            <param name="channelAccess">Channel access, needed for cyclic sending </param>
            <param name="offline">is true if bus is used offline</param>
            <returns>true if initialization was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetBus.Dispose">
            <summary>
            Shutdown bus API
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.ChannelAccess">
            <summary>
            optional channel access in HAL
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.StdProtocol">
            <summary>
            Protocol for standard Ethernet messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.BRProtocol">
            <summary>
            Protocol for transport protocol messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.EventProtocol">
            <summary>
            Protocol for Ethernet event/error pseudo messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.SomeIpProtocol">
            <summary>
            Protocol for standard Ethernet messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.ArpProtocol">
            <summary>
            Protocol for standard ARP messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.UdpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.PduProtocol">
            <summary>
            Protocol for standard ARP messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.DoIPProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.NetworkManagement">
            <summary>
            Gets the network management.
            </summary>
            <value>The network management.</value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetBus.TcpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetErrorCode">
            <summary>
            Enum for the ETHERNET Error Codes.
            ErrorCodes from 1 to 255 are common ErrorCodes,
            those with values greater than 255 are ETHERNET-sepcific.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.MessageCorrupt">
            <summary>
            Message is corrupt, HW signalled errors in message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.MessageIncomplete">
            <summary>
            Message not complete
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.DestinationNotSet">
            <summary>
            Destination is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.SourceNotSet">
            <summary>
            Source is not set
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.NoProtocol">
            <summary>
            No protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.NoCatalog">
            <summary>
            No catalog
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.ExceptionOccured">
            <summary>
            An exception occured
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.WrongMessageType">
            <summary>
            Wrong message-type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.WrongHwTimestamp">
            <summary>
            Wrong Hardware Timestamp
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.InavlidE2ECrc">
            <summary>
            End To End Protection CRC error
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetErrorCode.Unknown">
            <summary>
            Unknown Error
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetErrorEvent">
            <summary>
            Etherent bus error event
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetErrorEvent.Error">
            <summary>
            Etherent bus error type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetErrorEvent.Text">
            <summary>
            Event description in plain text (optional)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetErrorEvent.EventText">
            <summary>
            Textual event description (used e.g. for Translate() )
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetEventProtocol">
            <summary>
            Hardware protocol for Ethernet Event messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetEventProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.EthernetEventProtocol"/> class.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetNMEvent`1">
            <summary>
            Ethernet NM event base class
            </summary>
            <typeparam name="TNMState">The type of the NM state.</typeparam>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMEvent`1.NMProtocol">
            <summary>
            Gets the type of the network management.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMEvent`1.Id">
            <summary>
            NM node ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMEvent`1.NMState">
            <summary>
            The networkmanagement state as byte (value meaning depends on NMProtocol)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMEvent`1.EventText">
            <summary>
            Event text
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetNMOsekEvent">
            <summary>
            Ethernet network managment event (Osek)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMOsekEvent.NMProtocol">
            <summary>
            Get type of network management: OSEK
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMOsekEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the EthernetNMEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMOsekEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the EthernetNMEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetNMAutosarEvent">
            <summary>
            Ethernet natwork managment event (Autosar)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMAutosarEvent.NMProtocol">
            <summary>
            Get type of network management: OSEK
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMAutosarEvent.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the EthernetNMAutosarEvent using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMAutosarEvent.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the EthernetNMAutosarEvent using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetNMNode">
            <summary>
            Represents a single network management (NM) node.
            </summary>
            <remarks>Non generic base functionality.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMNode.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="sourceMacAddress">The network basic address.</param>
            <param name="destinationMacAddress">The station address of the node.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.Id">
            <summary>
            Nm Id.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.SourceMacAddress">
            <summary>
            Network Management SourceMacAddress (NWM-Basisadresse)
            </summary>
            <remarks>Valid value range: 0..536870911</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.DestinationMacAddress">
            <summary>
            Network Management DestinationMacAddress (NWM-Stationsadresse)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.Name">
            <summary>
            Descriptive name of this node
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMNode.Wakeup">
            <summary>
            Wakes the node up
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.StayAwake">
            <summary>
            Set stay awake
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.Observing">
            <summary>
            Gets or sets the value indicating whether this node is an observing node.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode.StayAwakeImpl">
            <summary>
            Stay awake implementation.
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Ethernet.EthernetNMNode.PropertyChanged">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a 
            property is changed on a component.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMNode.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Ethernet.EthernetNMNode.BusSleepIndication">
            <summary>
            This occurs when the node signals its sleep readiness.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMNode.OnBusSleepIndication">
            <summary>
            This function will be called when the node signals its sleep readiness.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetNMNode`1">
            <summary>
            Represents a single network management (NM) node based on <c>NMStateType</c>.
            </summary>
            <typeparam name="NMStateType">The nm protocol type.</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetNMNode`1.#ctor(System.String,System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="sourceMacAddress">The network basic address.</param>
            <param name="destinationMacAddress">The station address of the node.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetNMNode`1.State">
            <summary>
            Current nm node state based on <c>NMStateType</c>.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMStateOsek">
            <summary>
            Network management node states OSEK.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.Sleep">
            <summary>
            Sleep mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.Alive">
            <summary>
            Alive event state.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.Ring">
            <summary>
            Stay awake mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.SleepIndication">
            <summary>
            Sleep indication.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.SleepAck">
            <summary>
            Sleep acknowledge.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateOsek.LimpHome">
            <summary>
            Limp home.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMStateAutosar">
            <summary>
            Network management node states Autosar.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateAutosar.BusSleepMode">
            <summary>
            Bus sleep mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateAutosar.RepeatMessage">
            <summary>
            Repeat message mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateAutosar.NormalOperation">
            <summary>
            Normal operation mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateAutosar.ReadySleep">
            <summary>
            Ready sleep.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateAutosar.PrepareBusSleepMode">
            <summary>
            Prepare bus sleep mode (sleep acknowledge).
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMStateNone">
            <summary>
            Network management node states None.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMStateNone.Active">
            <summary>
            Always Active
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetFrameType">
            <summary>
            The different FrameTypes of an EthernetFrame.
            Source: de.wikipedia.org/Ethernet
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetMessage">
            <summary>
            An Ethernet message is used in Ethernet over Most
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessage.Destination">
            <summary>
            Target Address of the Message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessage.VLANInfo">
            <summary>
            VLAN Identifier if FrameType == 0x8100
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessage.Source">
            <summary>
            Source Address of the Message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetMessage.#ctor">
            <summary>
            Initializes a new instance of the EthernetMessage class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessage.FrameType">
            <summary>
            FrameType (Byte[0] and Byte[1] of Payload)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetMessage.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the EthernetMessage using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetMessage.SerializeAddress(System.IO.BinaryWriter,ET.FW.Hal.Ethernet.MacAddress)">
            <summary>
            Serializes the address.
            </summary>
            <param name="writer">The writer.</param>
            <param name="address">The mac address.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetMessage.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the EthernetMessage using the the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetMessageFactory">
            <summary>
            factory for Ethernet messages and related messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessageFactory.Instance">
            <summary>
            The only one object
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType">
            <summary>
            Represents the different message types.
            </summary>
            <remarks>
            TAKE CARE:
            Enum value must match index of corresponding message types in 'types' array
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Undefined">
            <summary>Message type undefined</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Ethernet">
            <summary>Ethernet Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Arp">
            <summary>ARP Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.IPv4">
            <summary>IPv4 Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Icmp">
            <summary>ICMP Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Tcp">
            <summary>TCP Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.Udp">
            <summary>UDP Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.ThriftMe">
            <summary>ThriftMe Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.SomeIP">
            <summary>Some/IP Message</summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.BusEvent">
            <summary>Bus Event </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.AutosarPduMultiplexMessage">
            <summary>AutosarPduMultiplex Message </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.EthernetNM">
            <summary>
            Ethernet NM message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.MessageType.DoIp">
            <summary>
            DoIP message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetMessageFactory.Types">
            <summary>
            List of all supported types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetMessageFactory.types">
            <summary>
            Array of all supported message types
            </summary>
            <remarks>
            TAKE CARE:
            Array index must match corresponding MessageType enum value - 1
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetMessageFactory.#ctor">
            <summary>
            Private constructor, to avoid explicit instantiation
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetProtocol">
            <summary>
            Protocol for Ethernet
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.#ctor(ET.FW.Core.Messaging.IMessageFactory,ET.FW.Hal.Messaging.ITransmitter{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.EthernetProtocol" /> class.
            </summary>
            <param name="messageFactory">The message factory.</param>
            <param name="transmitter">The transmitter.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,ET.FW.Hal.Ethernet.MacAddress,ET.FW.Hal.Ethernet.MacAddress,System.Byte[])">
            <summary>
            Decode ethernet data and create message
            </summary>
            <typeparam name="TNewMessage">Result message type, must be EthernetMessage or derived class</typeparam>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>ethernet message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.DecodeData(System.Byte[],ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Decodes Raw-Data into IEthernetMessage
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.DecodeData(System.Byte[],System.Int32,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Decodes Raw-Data into IEthernetMessage
            </summary>
            <param name="data">data bytes</param>
            <param name="startIdx">start index of frame type/payload in raw data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.EncodeData(ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Encodes an IEthernetMessage to RAW-Data.
            </summary>
            <param name="message">Ethernet message to encode</param>
            <returns>raw byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented.
            </summary>
            <param name="ethId">The ethernet Id of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.UnRegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unregister/Stop the auto increment.
            </summary>
            <param name="ethId">The ethernet of the message.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetProtocol.E2EProtection">
            <summary>
            Access handler for E2E protections
            </summary>
            <value>
            E2E protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetProtocol.SecOcProtection">
            <summary>
            Access handler for SecOC protections
            </summary>
            <value>
            SecOC protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetProtocol.EnableE2EObserver">
            <summary>
            Parameter which controls usage of E2E protection observer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetProtocol.e2eObserver">
            <summary>
            E2E observer instance, set if E2E protection CRC check is enabled and E2E protection is configured for the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetProtocol.OnOutput(ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Raise message output event.
            Before the message is signaled E2E CRC check is performed
            </summary>
            <param name="args">output event arguments</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetProtocol.Catalog">
            <summary>
            Optional Catalog for message re-translation
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetProtocolType">
            <summary>
            The different protocol numbers of an IP-Frame (works for v4 and v6)
            Source: http://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetBusState">
            <summary>
            Fundamental bus states
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetBusState.Undefined">
            <summary>
            State could not be determined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetBusState.Asleep">
            <summary>
            Bus is asleep (no messages)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetBusState.Awake">
            <summary>
            Bus is awake (messages are fired)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetTpIDPair">
            <summary>
            Pair of ETHERNET IDs for sending and receiving of data via ETHERNET TP 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetTpIDPair.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor, create and initialitze an ETHERNET ID pair
            </summary>
            <param name="txID">ETHERNET ID for sent data (Diagnostics: request ID)</param>
            <param name="rxID">ETHERNET ID for received data(Diagnostics: response ID)</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetTpIDPair.TxID">
            <summary>
            ETHERNET ID for sent messages 
            Request ID for diagnostics tester
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetTpIDPair.RxID">
            <summary>
            ETHERNET ID for received messages
            Response ID for diagnostics tester
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.EthernetTpIDPair.Valid">
            <summary>
            Check if both ETHERNET IDs are valid (not 0)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetTpIDPair.ToString">
            <summary>
            Get string representation of this object
            </summary>
            <returns>object as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetTpIDPair.Equals(System.Object)">
            <summary>
            Check for equality
            </summary>
            <param name="obj">other object to compare</param>
            <returns>true if other object is equal</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetTpIDPair.GetHashCode">
            <summary>
            Calculate hash
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetUplinkOnlyProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetUplinkOnlyProtocol.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetUplinkOnlyProtocol.CreateMessage``1(System.DateTime,System.Nullable{System.DateTime},ET.FW.Core.Messaging.RxTx,ET.FW.Hal.Ethernet.MacAddress,ET.FW.Hal.Ethernet.MacAddress,System.Byte[])">
            <summary>
            Decode ethernet data and create message
            </summary>
            <typeparam name="TNewMessage">Result message type, must be EthernetMessage or derived class</typeparam>
            <param name="timestamp">ET timestamp</param>
            <param name="hwTimestamp">HW timestamp</param>
            <param name="rxTx">RxTx field</param>
            <param name="source">message source address</param>
            <param name="destination">message target address</param>
            <param name="data">raw data bytes, containing MOST ID, segmentation info and payload</param>
            <returns>ethernet message object, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.EthernetUplinkOnlyProtocol.DecodeData(System.Byte[],ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Decodes Raw-Data into IEthernetMessage
            </summary>
            <param name="data">data bytes</param>
            <param name="message">message to receive decoded data</param>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IAutoIncrementHandler">
            <summary>
            Interface for handling of auto increment area(s) inside CAN messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IAutoIncrementHandler.RegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an auto increment for an area where a value is automaticlly incremented.
            </summary>
            <param name="ethId">The ETHERNET message identifier.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
            <returns>
            true on success
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IAutoIncrementHandler.UnRegisterAutoIncrement(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unregister/Stop the auto increment.
            </summary>
            <param name="ethId">The ETHERNET message identifier.</param>
            <param name="startPos">start bit of auto increment area (bit based)</param>
            <param name="length">width of bit field auto increment</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetBus">
            <summary>
            Ethernet bus API
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.StdProtocol">
            <summary>
            Protocol for transmitting/receiving of Ethernet standard messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.BRProtocol">
            <summary>
            Protocol for transport protocol messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.EventProtocol">
            <summary>
            Protocol for CAB event/error pseudo messages
            </summary>
            <remarks>Protocoll handles standard and TP events</remarks>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.SomeIpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.ArpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.UdpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.PduProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.DoIPProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.NetworkManagement">
            <summary>
            Gets the network management.
            </summary>
            <value>The network management.</value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetBus.TcpProtocol">
            <summary>
            TCP Protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetErrorEvent">
            <summary>
            CAN bus error event interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetErrorEvent.Error">
            <summary>
            Gets the type of the error.
            </summary>
            <value>The type of the error.</value>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.EthernetError">
            <summary>
            Represents a Ethernet error message.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetError.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetError.LinkUp">
            <summary>
            Determinates Link up state of ethernet channel
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.EthernetError.LinkDown">
            <summary>
            Determinates Link down state of ethernet channel
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetEvent">
            <summary>
            Base interface for all Ethernet events/error messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetNetworkManagement">
            <summary>
            Network management
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.CurrentNodes">
            <summary>
            All current (active) Nm nodes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.AddSimulatingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Add a new simulating NM node.
            </summary>
            <param name="sourceMacAddress">The nm basic address in the network.</param>
            <param name="destinationMacAddress">The nm node address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.AddObservingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Add a new observing NM node. (Observes HW NM devices)
            </summary>
            <param name="sourceMacAddress">The nm basic address in the network.</param>
            <param name="destinationMacAddress">The nm node address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.RemoveNode(ET.FW.Hal.Ethernet.EthernetNMNode)">
            <summary>
            Remove a NM node.
            </summary>
            <param name="node">NMNode to deregister.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.Type">
            <summary>
            Nm type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.Protocol">
            <summary>
            Nm protocol.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNetworkManagement.State">
            <summary>
            Global NM state
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMType">
            <summary>
            Networkmanagement type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMType.Undefined">
            <summary>
            The nm type is undefined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMType.Direct">
            <summary>
            Direct nm with special nm messages
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMType.Indirect">
            <summary>
            Indirect nm without special nm messages
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMProtocolType">
            <summary>
            Networkmanagement protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMProtocolType.None">
            <summary>
            No nm used
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMProtocolType.Osek">
            <summary>
            OSEK nm protocol
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMProtocolType.Autosar">
            <summary>
            Autosar nm protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NMBusState">
            <summary>
            Fundamental bus states
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMBusState.Undefined">
            <summary>
            State could not be determined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMBusState.Asleep">
            <summary>
            Bus is asleep (no messages)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NMBusState.Awake">
            <summary>
            Bus is awake (messages are fired)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetNMEvent">
            <summary>
            Ethernet network management events interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNMEvent.NMProtocol">
            <summary>
            Gets the NM protocol.
            </summary>
            <value>The NM protocol.</value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNMEvent.Id">
            <summary>
            The node ID of then event sender.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetNMEvent`1">
            <summary>
            Ethernet network management events interface
            </summary>
            <typeparam name="TNMState">NM state type, depending on protocol</typeparam>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetNMEvent`1.NMState">
            <summary>
            The NM state depending on NM protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetTransmitter">
            <summary>
            Interface for hardware port which sends standard CAN messages and handles cyclic CAN messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.SendCyclicMessage(ET.FW.Hal.Ethernet.IEthernetMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode,System.TimeSpan,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="repeatCount">The repeat count of the message. The message is send once and then the count of repetitions (repeatCount = 0 means the message is send once)</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <param name="sendType">signal send type (transmit type)</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.SendSpontanXMessage(ET.FW.Hal.Ethernet.IEthernetMessage,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Sends/register a SpontanX type message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <param name="sendType">signal send type (transmit type)</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.StopSend(System.UInt32,System.UInt16,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="servId">The can id of the message to stop.</param>
            <param name="Vlan"></param>
            <param name="msgType"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.RegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.UnRegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.SendVssCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Ethernet side Vss message
            <param name="pduId">pduID</param>
            <param name="pduVssKey">Pdu Vss Key</param>/>
            <param name="sourceMAC">source MAC</param>
            <param name="sourceIp">source IP</param>
            <param name="sourcePort">source Port</param>
            <param name="destinationMAC">destination MAC</param>
            <param name="destinationIp">destination IP</param>
            <param name="destinationPort">destination Port</param>
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.SendVssOffsetCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Ethernet side real time offset command
            <param name="pduId">pduID</param>
            <param name="pduRealTmOffsetKey">Pdu Real Time offset key</param>/>
            <param name="sourceMAC">source MAC</param>
            <param name="sourceIp">source IP</param>
            <param name="sourcePort">source Port</param>
            <param name="destinationMAC">destination MAC</param>
            <param name="destinationIp">destination IP</param>
            <param name="destinationPort">destination Port</param>
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.SendVinCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Vin message
            </summary>
            <param name="pduId">The Pdu Id of the messgae</param>
            <param name="vinBytes">Vin in bytes</param>
            <param name="pduVinKey">Pdu Vin Key</param>
            <param name="sourceMAC">source MAC</param>
            <param name="sourceIp">source IP</param>
            <param name="sourcePort">source Port</param>
            <param name="destinationMAC">destination MAC</param>
            <param name="destinationIp">destination IP</param>
            <param name="destinationPort">destination Port</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.IEthernetTransmitter.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode">
            <summary>
            Different modes for payload change of cyclic transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode.Next">
            <summary>
            Payload is changed with next regular transmission
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode.Spontanous">
            <summary>
            An extra message transmission with new payload is sent immediately and the value is stored. 
            The cycle time is not changed!
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode.Immediately">
            <summary>
            An extra message transmission with new payload is sent immediately and the value is stored. 
            The cycle time and the repetition are changed!
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode.NextImmediately">
            <summary>
            Payload is changed with next regular transmission
            The cycle time and the repetition are changed!
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetChannelAccess">
            <summary>
            Common Interface for Ethernet channel accesses
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetChannelAccess.NetworkManagement">
            <summary>
             Gets the network management.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetChannelAccess.EthernetProtocol">
            <summary>
            Ethernet Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetChannelAccess.EventProtocol">
            <summary>
            Ethernet Event protocol
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetMessage">
            <summary>
            Ethernet message that is used for example in Ethernet over Most
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetMessage.Destination">
            <summary>
            Target address (16 bit)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetMessage.Source">
            <summary>
            Source address (16 bit)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetMessage.FrameType">
            <summary>
            FrameType (Byte[0] and Byte[1] of Payload) if FrameType != 0x8100
            FrameType (Byte[4] and Byte[5] of Payload) if FrameType == 0x8100
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.IEthernetMessage.VLANInfo">
            <summary>
            VLAN Info
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.IEthernetProtocol">
            <summary>
            Interface for EthernetProtocols
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.Messages.Error("An error occured");
            </code></example>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Log.Ethernet">
            <summary>
            Logger with code "Ethernet"
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Log.EthernetNM">
            <summary>
            Logger with code "EthernetNM"
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Log.EthernetDiag">
            <summary>
            Logger with code "Ethernet"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.MacAddress">
            <summary>
            Eextended MAC address wrapper for ET Framework (adds handling of address as ulong)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.MacAddress.ByteCount">
            <summary>
            Size of address in bytes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the MacAddress class.
            </summary>
            <param name="address">A System.Byte array containing the address.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.#ctor(ET.FW.Hal.Ethernet.MacAddress)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="source">Address to be copied</param>
            <remarks>byte array of source address is cloned</remarks>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.GetAddressBytes">
            <summary>
            GetAddressBytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.FromUInt64(System.UInt64)">
            <summary>
            Create new instance of MacAddress class
            </summary>
            <param name="address">MAC address as binary value</param>
            <returns>newly created MAC address object</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.FromString(System.String,System.Char)">
            <summary>
            Create new instance of MacAddress class
            </summary>
            <param name="address">MAC address as hex-string value (XX-XX-XX-XX-XX-XX)</param>
            <param name="separator">The separator between the single byte-values. Default is '-'</param>
            <returns>newly created MAC address object</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.FromInt64(System.Int64)">
            <summary>
            Create new instance of MacAddress class
            </summary>
            <param name="address">MAC address as binary value</param>
            <returns>newly created MAC address object</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.ToUInt64">
            <summary>
            Convert MAC address to binary value
            </summary>
            <returns>binary value</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.MacAddress.Broadcast">
            <summary>
            Broadcast Address
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.MacAddress.None">
            <summary>
            No address
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.MacAddress.ToString(System.Char)">
            <summary>
            Convert MAC address to text.
            Address format: XX-XX-XX-XX-XX-XX ('-' can be replaced by other character)
            </summary>
            <param name="separator">separator character, normally '-'</param>
            <returns>address as text</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1">
            <summary>
            Base class for all EthernetNetworkManagement services.
            </summary>
            <typeparam name="TNMProtocol">NM protocol specific state enum</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1"/> class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.CurrentNodes">
            <summary>
            All current (active) Nm nodes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.currentNodes">
            <summary>
            Internal access to the current nodes.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.AddSimulatingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Add a new NM node.
            </summary>
            <param name="sourceMacAddress">The nm basic address in the network.</param>
            <param name="destinationMacAddress">The nm node address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.CreateSimulatingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates a simulated node.
            </summary>
            <param name="sourceMacAddress">The nm basic address.</param>
            <param name="destinationMacAddress">The nm node station address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.AddObservingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Add a new NM node.
            </summary>
            <param name="sourceMacAddress">The nm basic address in the network.</param>
            <param name="destinationMacAddress">The nm node address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.CreateObservingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates a observing node.
            </summary>
            <param name="sourceMacAddress">The nm basic address.</param>
            <param name="destinationMacAddress">The nm node station address.</param>
            <param name="ethernetMessage">The Ethernet message.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.RemoveNode(ET.FW.Hal.Ethernet.EthernetNMNode)">
            <summary>
            Remove a NM node.
            </summary>
            <param name="node">NMNode to deregister.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.State">
            <summary>
            Current nm bus state.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{`0})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containing new state</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementAutosarBase">
            <summary>
            Base class for Autosar based Ethernet Network Managment implementations.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementAutosarBase.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementAutosarBase.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{ET.FW.Hal.Ethernet.NMStateAutosar})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containig new state</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone">
            <summary>
            Dummy Network Management implementation for no NM
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.#ctor">
            <summary>
            NM Constructor.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.Protocol">
            <summary>
            The nm protocol.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.NodeStateChanged(System.Object,ET.FW.Core.Common.ValueChangedEventArgs{ET.FW.Hal.Ethernet.NMStateNone})">
            <summary>
            Internal mapping node state to bus state
            </summary>
            <param name="sender">Event sender: node</param>
            <param name="e">Event args containig new state</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.CreateSimulatingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates a simulated node.
            </summary>
            <param name="sourceMacAddress">The nm basic address.</param>
            <param name="destinationMacAddress">The nm node station address.</param>
            <param name="ethernetMessage">The EthernetMessage.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNetworkManagementNone.CreateObservingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates a observing node.
            </summary>
            <param name="sourceMacAddress">The nm basic address.</param>
            <param name="destinationMacAddress">The nm node station address.</param>
            <param name="ethernetMessage">The EthernetMessage.</param>
            <returns>The simulated nm node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMMessageDefinitions">
            <summary>
            Internal helper class which provides the NM message definitions.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMMessageDefinitions.#ctor(System.String,System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMMessageDefinitions"/> class from being created.
            </summary>
            <param name="name">Name of the message.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMMessageDefinitions.GetAutosarDefinition(System.String)">
            <summary>
            Autosar NM message definition.
            </summary>
            <param name="sourceMacAddress">Ethernet identifier.</param>
            <returns>
            Message definition.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMNoneNode">
            <summary>
            Represents a single network management (NM) node for CAN logging.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMNoneNode.#ctor(System.Boolean)">
            <summary>
            Node Constructor.
            </summary>
            <param name="observing">Observing flag value</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMNoneNode.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMNoneNode.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar">
            <summary>
            Autosar NM node implementation
            </summary>
            <remarks>
            Node state may become wrong if timeout and receive event handling overlap
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.RepeatMessageTime">
            <summary>
            Time after RepeatMessage is left
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.NMTimeoutTime">
            <summary>
            Time after PrepareBusSleep is entered
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.WaitBusSleepTime">
            <summary>
            Time after BusSleep is entered.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.syncRoot">
            <summary>
            Locking over all timer objects
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.#ctor(ET.FW.Hal.Ethernet.IEthernetChannelAccess,System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            The Constructor.
            </summary>
            <param name="channel">channel access.</param>
            <param name="sourceMacAddress">nm basic address.</param>
            <param name="destinationMacAddress">nm station address.</param>
            <param name="ethernetMessage">Ethernet Message.</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.StayAwakeImpl">
            <summary>
            Stay awake logic implementation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.IsInNetworkMode">
            <summary>
            Indicates if the nm node is in network mode.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.RepeatMessageBit">
            <summary>
            Switches the network to the repeat msg state (only in the network mode).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.AwakeIgnitionOn">
            <summary>
            NM userdata parameter.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.NetworkManagementMode">
            <summary>
            Current nm mode.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.BusSleepModeEnter">
            <summary>
            BusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.PrepareBusSleepModeEnter">
            <summary>
            PrepareBusSleep mode enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.NetworkModeEnter">
            <summary>
            NetworkMode mode enter activities.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.NetworkModeState">
            <summary>
            Current NetworkMode state.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.RepeatMessageStateEnter">
            <summary>
            RepeatMessage state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.NormalOperationStateEnter">
            <summary>
            NormalOperation state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.ReadySleepStateEnter">
            <summary>
            ReadySleep state enter activities.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.OnNMTimeout(System.Object)">
            <summary>
            OnRxIndication activities.
            </summary>
            <param name="stateInfo">The state info.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.OnMessageReceived(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            StandardEthernet_UplinkOutput activities.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.timeLastNMMessage">
            <summary>
            Time, the last NM message reception/transmissin was notified
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMObservingNodeAutosar.Dispose">
            <summary>
            Disposes the nm node.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.NetworkManagementMode">
            <summary>
            Autosar NM modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkManagementMode.BusSleep">
            <summary>
            Bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkManagementMode.PrepareBusSleep">
            <summary>
            Prepare bus sleep
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkManagementMode.Network">
            <summary>
            Network mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.NetworkModeState">
            <summary>
            Network mode states (substates of NetworkManagementMode.Network)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkModeState.NormalOperation">
            <summary>
            Normal operation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkModeState.RepeatMessage">
            <summary>
            Repeat message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.NetworkManagement.NetworkModeState.ReadySleep">
            <summary>
            Ready sleep
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions">
            <summary>
            Internal helper class which provides the NM signal definitions.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions"/> class from being created.
            </summary>
            <param name="name">The name of the signal.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.RepeatMessageRequest">
            <summary>
            RepeatMessageRequest signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.SourceNodeIdentifier">
            <summary>
            SourceNodeIdentifier signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.WakeupRsn">
            <summary>
            WakeupRsn signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.AwakeDiagActv">
            <summary>
            AwakeDiagActv signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.EthernetNMSignalDefinitions.AwakeIgnitionOn">
            <summary>
            AwakeIgnitionOn signal definition. (Autosar)
            </summary>
            <returns>The signal definition.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.NetworkManagement.ObservingNetworkManagementAutosar">
            <summary>
            Passive Autosar Network Management implementation
            This implementation supports only observing nodes.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.ObservingNetworkManagementAutosar.#ctor(ET.FW.Hal.Ethernet.IEthernetChannelAccess)">
            <summary>
            The Constructor.
            </summary>
            <param name="channelAccess">The channel access the NM is responsable for</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.NetworkManagement.ObservingNetworkManagementAutosar.Type">
            <summary>
            The nm type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.ObservingNetworkManagementAutosar.CreateSimulatingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates a simulated node. Not supported here!
            </summary>
            <param name="sourceMacAddress">The NM basic address.</param>
            <param name="destinationMacAddress">The NM node station address.</param>
            <param name="ethernetMessage">The EthernetMessage.</param>
            <returns>null, simulation is not supported here</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.NetworkManagement.ObservingNetworkManagementAutosar.CreateObservingNode(System.String,System.String,ET.FW.Hal.Ethernet.IEthernetMessage)">
            <summary>
            Creates an observing node.
            </summary>
            <param name="sourceMacAddress">The NM basic address.</param>
            <param name="destinationMacAddress">The NM node station address.</param>
            <param name="ethernetMessage">The EthernetMessage.</param>
            <returns>The simulated NM node.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess">
            <summary>
            Ethernet channel access for offline mode
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess.#ctor(ET.FW.Core.Hal.IEquipment,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="equipment"></param>
            <param name="portName"></param>
            <param name="name"></param>
            <param name="portType"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess.EthernetProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess.EventProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess.CreateHardwareProtocol(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.OfflineEthernetChannelAccess.NetworkManagement">
            <summary>
            Network Management 
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ArpMessage">
            <summary>
            Ethernet/ARP message that is used for address resolution
            Source for description: http://en.wikipedia.org/wiki/Address_Resolution_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.HWAddrType">
            <summary>
            This field specifies the network protocol type. Example: Ethernet is 1.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.ProtocolAddrType">
            <summary>
            This field specifies the internetwork protocol for which the ARP request is intended.
            For IPv4, this has the value 0x0800. The permitted values share a numbering
            space with those for EtherType.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.HWAddrSize">
            <summary>
            Length (in octets) of a hardware address. Ethernet addresses size is 6.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.ProtocolAddrSize">
            <summary>
            Length (in octets) of addresses used in the upper layer protocol. (The upper layer protocol specified in ProtocolAddrType.) IPv4 address size is 4.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.Operation">
            <summary>
            Specifies the operation that the sender is performing: 1 for request, 2 for reply.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.SourceMACAddr">
            <summary>
            Hardware media address of the sender.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.SourceIPAddr">
            <summary>
            Internetwork address of the sender.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.DestinationMACAddr">
            <summary>
            Media address of the intended receiver. This field is ignored in requests.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.DestinationIPAddr">
            <summary>
            Internetwork address of the intended receiver.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpMessage.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol">
            <summary>
            Protocol handling of Ethernet/ARP messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol.#ctor(System.String,ET.FW.Hal.Ethernet.IEthernetProtocol)">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol.Decoupler">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol.decoupler">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ArpSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.DoIPMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.DoIPMessage.ProtocolVersion">
            <summary>
            Identifies the protocol version of DoIP packets
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.DoIPMessage.InverseProtocolVersion">
            <summary>
            Contains the bit-wise inverse value of the protocol version, which is used in conjunction with the DoIP protocol version as a protocol verification pattern
            to ensure that a correctly formatted DoIP message is received.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.DoIPMessage.PayloadType">
            <summary>
            Contains information about how to interpret the data following the generic DoIP header
             </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.DoIPMessage.Uplink">
            <summary>
            The next higher level of the protocol, e.g. an TCP message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPMessage.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol">
            <summary>
            Protocol handling of DoIP messages coming from TCP messages
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IUdpMessage},ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
            <param name="downlink1"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.SendMessage(ET.FW.Hal.Ethernet.Protocols.IDoIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IUdpMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.Downlink2_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse.VIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse.LogicalAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse.EntityIdentification">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse.GroupIdentification">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.DoIPVehicleIdentificationResponse.#ctor(ET.FW.Hal.Ethernet.Protocols.DoIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage">
            <summary>
            EthernetPduMessage
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage.Length">
            <summary>
            Pdu payload length
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage.PduId">
            <summary>
            Pdu HeaderId
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduMessage.GetCacheKey">
            <summary>
            Get CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage">
            <summary>
            EthernetPduSignalChanged Message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.#ctor">
            <summary>
            Create a new instance of the EthernetSignalChangedMessage class.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.UId">
            <summary>
            the id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Payload">
            <summary>
            the payload
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Timestamp">
            <summary>
            the timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.HWTimestamp">
            <summary>
            the timestamp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.RxTx">
            <summary>
            the type
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Protocol">
            <summary>
            the protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Translate">
            <summary>
            Translate Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.TranslateMessage">
            <summary>
            Translate Message
            </summary>
            <returns>Translated Message</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.MessageError">
            <summary>
            Message Error
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.HasError">
            <summary>
            checks HasError
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.GetCacheKey">
            <summary>
            Get CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Id">
            <summary>
            pdu id
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.IsExtended">
            <summary>
            Is Extended
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.ChangedSignals">
            <summary>
            Changed Signals
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalChangedMessage.Fill(ET.FW.Hal.Pdu.IPduMessage,System.Collections.Generic.IEnumerable{ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal})">
            <summary>
            fills the message
            </summary>
            <param name="pduMessage">pdu Message</param>
            <param name="changedSignals">changed Signals</param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol">
            <summary>
            Protocol for handling of multiple identical Ethernet signals.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.EthernetPduMessageEntry.PduDefinition">
            <summary>
            Message definition from Catalog
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.EthernetPduMessageEntry.Message">
            <summary>
            Last message received
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.EthernetPduMessageEntry.Signals">
            <summary>
            Dictionary containing last signal values
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.Catalog">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Pdu.IPduMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.EnableE2EProtectionSignals">
            <summary>
            Flag to enable handling of E2E protection signals, normally this signals are ignored
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.CheckSignal(ET.FW.Hal.Ethernet.Catalogs.EthernetSignalDefinition)">
            <summary>
            Checks if signal should be handled here
            </summary>
            <param name="definition">The signal definition.</param>
            <returns>true to enable handling of signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.CheckSignal(ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal)">
            <summary>
            Checks if signal should be handled here
            </summary>
            <param name="signal">The signal to get the definition.</param>
            <returns>true to enable handling of signal</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Pdu.IPduMessage})">
            <summary>
            downlink output
            </summary>
            <param name="sender">sender object</param>
            <param name="e">event args</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSignalSoftwareProtocol.CheckValue(ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal,ET.FW.Core.Messaging.MessageError@)">
            <summary>
            check given signal value
            </summary>
            <param name="signal">the signal to check</param>
            <param name="messageError">The message error.</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol">
            <summary>
            Protocol handling of AutosarPDUMux messages from Udp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IUdpMessage})">
            <summary>
            AutosarPduMultiplex SoftwareProtocol
            </summary>
            <param name="name">protocol name</param>
            <param name="downLink">down link name</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.SendMessage(ET.FW.Hal.Pdu.IPduMessage)">
            <summary>
            Send message, not supported here.
            </summary>
            <param name="message">message to be sent</param>
            <returns>Error: sending not supported</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.GetPayloadCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for payload
            </summary>
            <param name="message">Message with payload to cache</param>
            <returns>Caching key for payload. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cache</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IUdpMessage})">
            <summary>
            Down link Output
            </summary>
            <param name="sender">sender obj</param>
            <param name="e">event args</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.EthernetPduSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.ethernetTransmitter">
            <summary>
            Specialised transmitter for handling ISomeIPMessage via hardware port
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.#ctor(ET.FW.Hal.Ethernet.IEthernetTransmitter)">
            <summary>
            
            </summary>
            <param name="transmitter"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.RegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.UnRegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.SendCyclicMessage(ET.FW.Hal.Ethernet.IEthernetMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode,System.TimeSpan,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cycleTime"></param>
            <param name="repeatCount"></param>
            <param name="minimumDelayTime"></param>
            <param name="mode"></param>
            <param name="startDelayTime"></param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <param name="sendType"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.SendSpontanXMessage(ET.FW.Hal.Ethernet.IEthernetMessage,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Sends/register a SpontanX type message with specific send parameter.
            </summary>
            <param name="message"></param>
            <param name="sendType"></param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.StopSend(System.UInt32,System.UInt16,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="ethId">The ethernet id of the message to stop.</param>
            <param name="vlan"></param>
            <param name="msgType"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.SendVssCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Vss message
            </summary>
            <param name="pduId">pdu Id</param>
            <param name="pduVssKey">pdu Vss Key</param>/>
            <param name="sourceMAC">source MAC</param>
            <param name="sourceIp">source Ip</param>
            <param name="sourcePort">source Port</param>
            <param name="destinationMAC">destination MAC</param>
            <param name="destinationIp">destination Ip</param>
            <param name="destinationPort">destination Port</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.SendVssOffsetCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Real time offset command
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.SendVinCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Vin message
            </summary>
            <param name="pduId">The pdu id of the message.</param>
            <param name="vinBytes">Vin in bytes</param>
            <param name="pduVinKey">pdu Vin Key</param>
            <param name="sourceMAC">source MAC</param>
            <param name="sourceIp">source IP</param>
            <param name="sourcePort">source Port</param>
            <param name="destinationMAC">destination MAC</param>
            <param name="destinationIp">destination IP</param>
            <param name="destinationPort">destination Port</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.BREthernetProtocol.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.RegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.UnRegisterEventGroup(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.E2EProtection">
            <summary>
            Access handler for E2E protections
            </summary>
            <value>
            E2E protection handler, null if none available
            </value>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SecOcProtection">
            <summary>
            Access handler for SecOC protections
            </summary>
            <value>
            SecOC protection handler, null if none available
            </value>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SendCyclicMessage(ET.FW.Hal.Ethernet.IEthernetMessage,System.TimeSpan,System.UInt32,System.TimeSpan,ET.FW.Hal.Ethernet.CyclicTransmissionChangeMode,System.TimeSpan,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Sends/register a CAN message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="cycleTime">The cycle time. 0 if it is a single Messsage</param>
            <param name="repeatCount">The repeat count of the message. The message is send once and then the count of repetitions (repeatCount = 0 means the message is send once)</param>
            <param name="minimumDelayTime">The minimum delay time.</param>
            <param name="mode">The mode how to change the values</param>
            <param name="startDelayTime">The start delay time. Used to delay the cyclic transmission after network on</param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <param name="sendType">signal send type (transmit type)</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SendSpontanXMessage(ET.FW.Hal.Ethernet.IEthernetMessage,ET.FW.Hal.Ethernet.Catalogs.SendType,System.UInt32,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Sends/register a SpontanX type message with specific send parameter.
            </summary>
            <param name="message">The message/payload to send.</param>
            <param name="servId"></param>
            <param name="msgType"></param>
            <param name="sendType">signal send type (transmit type)</param>
            <returns>
            The result of the operation
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.StopSend(System.UInt32,System.UInt16,ET.FW.Hal.Ethernet.EthernetFrameType)">
            <summary>
            Stops a cyclic transmission.
            </summary>
            <param name="servId">The can id of the message to stop.</param>
            <param name="Vlan"></param>
            <param name="msgType"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SendVssCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Vss message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SendVssOffsetCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Real time offset command
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.SendVinCommand(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send Vin message
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IBREthernetProtocol.StopVinCommand">
            <summary>
            Stop Vin message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ConfigurationOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ConfigurationOption.ConfigString">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ConfigurationOption.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ConfigurationOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IArpMessage">
            <summary>
            Ethernet/ARP message that is used for address resolution
            Source for description: http://en.wikipedia.org/wiki/Address_Resolution_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.HWAddrType">
            <summary>
            This field specifies the network protocol type. Example: Ethernet is 1.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.ProtocolAddrType">
            <summary>
            This field specifies the internetwork protocol for which the ARP request is intended.
            For IPv4, this has the value 0x0800. The permitted values share a numbering
            space with those for EtherType.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.HWAddrSize">
            <summary>
            Length (in octets) of a hardware address. Ethernet addresses size is 6.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.ProtocolAddrSize">
            <summary>
            Length (in octets) of addresses used in the upper layer protocol. (The upper layer protocol specified in ProtocolAddrType.) IPv4 address size is 4.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.Operation">
            <summary>
            Specifies the operation that the sender is performing: 1 for request, 2 for reply.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.SourceMACAddr">
            <summary>
            Hardware media address of the sender.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.SourceIPAddr">
            <summary>
            Internetwork address of the sender.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.DestinationMACAddr">
            <summary>
            Media address of the intended receiver. This field is ignored in requests.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.DestinationIPAddr">
            <summary>
            Internetwork address of the intended receiver.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IArpMessage.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IDoIPMessage">
            <summary>
            Diagnostic communication ovet IP - DoIP
            Source for descriptions: ISO 13400-2:2012(E)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IDoIPMessage.ProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IDoIPMessage.InverseProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IDoIPMessage.PayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IDoIPMessage.Uplink">
            <summary>
            The next higher level of the protocol, e.g. an TCP message.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.GenericDoIPHeaderNAK">
            <summary>
            Generic DoIP header negative acknowledge
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.VehicleIdentificationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.VehicleIdentificationRequestWithEID">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.VehicleIdentificationRequestWithVIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.VehicleIdentificationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.RoutingActivationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.RoutingActivationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.AliveCheckRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.AliveCheckResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DoIPEntityStatusRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DoIPEntityStatusResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DiagnosticPowerModeInformationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DiagnosticPowerModeInformationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DiagnosticMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DiagPositiveACK">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.DoIPPayloadType.DiagPositiveNACK">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.RoutingActivationErrorResponse">
            <summary>
            Error message on routing activation response
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.RoutingActivationErrorResponse.PositiveResponse">
            <summary>
            TLS handshake required
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.RoutingActivationErrorResponse.TlsHandshakeMissing">
            <summary>
            TLS handshake required
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IEthernetPduSignalChangedMessage">
            <summary>
            The message for signal changed event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IEthernetPduSignalChangedMessage.Id">
            <summary>
            Ethernet Pdu message ID (11 bit standard)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IEthernetPduSignalChangedMessage.IsExtended">
            <summary>
            Indicates if the message is a extended identifier message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IEthernetPduSignalChangedMessage.ChangedSignals">
            <summary>
            The list of changed signals.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IEthernetPduSignalChangedMessage.Fill(ET.FW.Hal.Pdu.IPduMessage,System.Collections.Generic.IEnumerable{ET.FW.Hal.Ethernet.Catalogs.IEthernetSignal})">
            <summary>
            Fill the CanSignalChangedMessage with data from the given CanMessage.
            </summary>
            <param name="canMessage">The original CanMessage to get the data.</param>
            <param name="changedSignals">List of changed signals</param>
            <returns><c>true</c> if the operation was completed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IcmpMessage">
            <summary>
            Ethernet/IP/ICMP message.
            Source for description: http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IcmpMessage.Type">
            <summary>
            ICMP type. Most popular values: 0=Echo reply, 8=Echo request.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IcmpMessage.Code">
            <summary>
            Subtype to the given Type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IcmpMessage.Checksum">
            <summary>
            Error checking data. Calculated from the ICMP header+data, with value 0 for this field. The checksum algorithm is specified in RFC 1071.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IcmpMessage.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IcmpSoftwareProtocol">
            <summary>
            Protocol handling of ICMP messages coming from Ethernet/IPv4
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IcmpSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IcmpSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IcmpSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IcmpSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IIcmpMessage">
            <summary>
            Ethernet/IP/ICMP message.
            Source for description: http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIcmpMessage.Type">
            <summary>
            ICMP type. Most popular values: 0=Echo reply, 8=Echo request.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIcmpMessage.Code">
            <summary>
            Subtype to the given Type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIcmpMessage.Checksum">
            <summary>
            Error checking data. Calculated from the ICMP header+data, with value 0 for this field. The checksum algorithm is specified in RFC 1071.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIcmpMessage.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IIPv4Message">
            <summary>
            Ethernet/IPv4 message that is used for example in Ethernet over Most
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.IPProtocol">
            <summary>
            Protocol number, cf. RFC 790
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.Source">
            <summary>
            Source address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.Destination">
            <summary>
            Target address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.HeaderLength">
            <summary>
            The header length as computed to speed up the further processing.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.Identification">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.Ttl">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IIPv4Message.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IOption">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption.IPv4Address">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption.TpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.Ip4EndpointOption.PortNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IPv4Message">
            <summary>
            IPv4 message is used in Ethernet over Most for example
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.IPProtocol">
            <summary>
            Protocol number, cf. RFC 790
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.Source">
            <summary>
            Source address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.Destination">
            <summary>
            Target address
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.HeaderLength">
            <summary>
            The header length as computed to speed up the further processing.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.Length">
            <summary>
            A field that specifies the length in bytes of the entire datagram: header and data.
            The minimum length is 20 bytes since that's the length of the header.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.Identification">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.uplink">
            <summary>
            Where that message really comes from.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.Ttl">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4Message.DecodeError">
            <summary>
            Decode Error
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4Message.SetError(System.UInt32,System.String)">
            <summary>
             Set Error
            </summary>
            <param name="errorKind">error Kind</param>
            <param name="additionalInfo">additional Info</param>
            <returns>Message Error</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4Message.ErrorDecoder">
            <summary>
            Error Decoder
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption">
            <summary>
            Option of type IPv4 Multicast
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption.IPv4Address">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption.TpProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption.PortNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4MulticastOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol">
            <summary>
            Protocol handling of IPv4 Ethernet Messages
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.IEthernetMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cache</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol.Decoupler">
            <summary>
             Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.IPv4SoftwareProtocol.Dispose">
            <summary>
            Dispose decoupler
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage">
            <summary>
            SOME/IP message 
            Source for descriptions: AUTOSAR
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.ServiceId">
            <summary>
            Service ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.MessageId">
            <summary>
            Event ID if IsEvent is true else Method ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.IsEvent">
            <summary>
            SomeIPMessage for a Event or Method
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.Length">
            <summary>
            A field that specifies the length in bytes of the SomeIp message from RQ/Client Id 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.ClientId">
            <summary>
            The Client ID is the unique identifier for the calling client inside the ECU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.SessionId">
            <summary>
            The Session ID is a unique identifier chosen by the client for each call.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.ProtocolVersion">
            <summary>
            Protocol Version is an 8 Bit field containing the SOME/IP protocol version
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.InterfaceVersion">
            <summary>
            Interface Version is an 8 Bit field that contains the Major Version of the Service Interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.Type">
            <summary>
            Frame type of SOME/IP message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.ReturnCode">
            <summary>
            Returned code to signal whether a request was successfully been processed
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.IsServiceDiscovery">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.ServiceDiscoveryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ITcpMessage">
            <summary>
            Ethernet/IP/TCP message.
            Source for descriptions: http://en.wikipedia.org/wiki/Transmission_Control_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.SourcePort">
            <summary>
            identifies the sending port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.DestinationPort">
            <summary>
            identifies the receiving port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.SequenceNumber">
            <summary>
            If the SYN flag is set (1), then this is the initial sequence number.
            The sequence number of the actual first data byte and the acknowledged
            number in the corresponding ACK are then this sequence number plus 1.
            If the SYN flag is clear (0), then this is the accumulated sequence number
            of the first data byte of this packet for the current session.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.AcknowledgeNumber">
            <summary>
            If the ACK flag is set then the value of this field is the next sequence number
            that the receiver is expecting. This acknowledges receipt of all prior bytes
            (if any). The first ACK sent by each end acknowledges the other end's initial
            sequence number itself, but no data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.DataOffset">
            <summary>
            In the message only 4 bits are used.
            Specifies the size of the TCP header in 32-bit words. The minimum size header
            is 5 words and the maximum is 15 words thus giving the minimum size of 20 bytes
            and maximum of 60 bytes, allowing for up to 40 bytes of options in the header.
            This field gets its name from the fact that it is also the offset from the start
            of the TCP segment to the actual data.
            In the data structure (here) it already contains the total amount of octets, i.e.
            multiplied by 4 already.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.Flags">
            <summary>
            Flags (aka Control bits) – contains 9 1-bit flags
            NS  – ECN-nonce concealment protection (added to header by RFC 3540).
            CWR – Congestion Window Reduced (CWR) flag is set by the sending host to indicate
                  that it received a TCP segment with the ECE flag set and had responded in
                  congestion control mechanism (added to header by RFC 3168).
            ECE – ECN-Echo indicates
                  If the SYN flag is set (1), that the TCP peer is ECN capable.
                  If the SYN flag is clear (0), that a packet with Congestion Experienced flag
                  in IP header set is received during normal transmission (added to header by RFC 3168).
            URG – indicates that the Urgent pointer field is significant
            ACK – indicates that the Acknowledgment field is significant. All packets after the
                  initial SYN packet sent by the client should have this flag set.
            PSH – Push function. Asks to push the buffered data to the receiving application.
            RST – Reset the connection
            SYN – Synchronize sequence numbers. Only the first packet sent from each end should
                  have this flag set. Some other flags change meaning based on this flag, and some
                  are only valid for when it is set, and others when it is clear.
            FIN – No more data from sender
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.WindowSize">
            <summary>
            The size of the receive window, which specifies the number of bytes (beyond the sequence
            number in the acknowledgment field) that the sender of this segment is currently willing
            to receive (see Flow control and Window Scaling).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.Checksum">
            <summary>
             The 16-bit checksum field is used for error-checking of the header and data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.UrgentPointer">
            <summary>
             If the URG flag is set, then this 16-bit field is an offset from the
             sequence number indicating the last urgent data byte.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.OptionsStart">
            <summary>
            Options (Variable 0-320 bits, divisible by 32)
            The bits are stored in Payload, just the starting position and the size are memorised.
            The length of this field is determined by the data offset field. Options have up to
            three fields: Option-Kind (1 byte), Option-Length (1 byte), Option-Data (variable).
            The Option-Kind field indicates the type of option, and is the only field that is not
            optional. Depending on what kind of option we are dealing with, the next two fields
            may be set: the Option-Length field indicates the total length of the option, and the
            Option-Data field contains the value of the option, if applicable. For example, an
            Option-Kind byte of 0x01 indicates that this is a No-Op option used only for padding,
            and does not have an Option-Length or Option-Data byte following it. An Option-Kind byte
            of 0 is the End Of Options option, and is also only one byte. An Option-Kind byte of 0x02
            indicates that this is the Maximum Segment Size option, and will be followed by a byte
            specifying the length of the MSS field (should be 0x04). Note that this length is the
            total length of the given options field, including Option-Kind and Option-Length bytes.
            So while the MSS value is typically expressed in two bytes, the length of the field will
            be 4 bytes (+2 bytes of kind and length). In short, an MSS option field with a value of
            0x05B4 will show up as (0x02 0x04 0x05B4) in the TCP options section.
            </summary>
            <summary>
            The starting position inside Payload for the Options section of a TCP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.OptionsLength">
            <summary>
            The size of the Options section of a TCP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ITcpMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage">
            <summary>
            The stucture of an Ethernet/IP/TCP/Thrift.Me message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.FunctionId">
            <summary>
            The ID of the called function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.Type">
            <summary>
            The type of the message. Eg. request, reply or event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.SequenceId">
            <summary>
            The sequence ID of the message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.ServiceId">
            <summary>
            The ID of the service which is target of the function call.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.Length">
            <summary>
            The length of the complete ThriftMeMessage (except the length bytes).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IThriftMeMessage.Uplink">
            <summary>
            The next higher level of the protocol (OSI: the protocol one layer lower), e.g. a TCP message.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.IUdpMessage">
            <summary>
            Ethernet/IP/UDP message.
            Source for descriptions: http://en.wikipedia.org/wiki/User_Datagram_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.SourcePort">
            <summary>
            identifies the sending port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.DestinationPort">
            <summary>
            identifies the receiving port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.Length">
            <summary>
            A field that specifies the length in bytes of the entire datagram: header and data.
            The minimum length is 8 bytes since that's the length of the header.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.Checksum">
            <summary>
             The 16-bit checksum field is used for error-checking of the header and data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.PduMuxPayloads">
            <summary>
            PduMux Payloads inside UDP
            ETFCCB-291: PDU Mux payload can be a list of similar data bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.IUdpMessage.SomeIpPayloads">
            <summary>
            SOME-IP Payloads inside UDP
            ETFCCB-291: SomeIp payload can be a list of similar data bytes
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.LoadBalancingOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.LoadBalancingOption.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.LoadBalancingOption.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.LoadBalancingOption.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.LoadBalancingOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.OptionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.LoadBalancing">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv4EndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv6Endpoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv4Multicast">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv6Multicast">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv4SDEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.OptionType.IPv6SDEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers">
            <summary>
            Explain some protocols of an ethernet transmission.
            Every field has a descriptive name and an AttributeSize value associated.
            Both values are given in octets (=bytes).
            If a field does not use a full octet then an AttributeMask, using an
            appropriate data type, is supplied. The mask is given in network byte
            order. From the mask the size of the field in bits can be calculated.
            If the value after masking must be shifted, then shift by AttributeShift.
            Every (sub-)class has a Size attribute telling the least size of
            a header.
            If the payload starts at a fixed index then there will be a Payload attribute.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.EthernetType">
            <summary>
            Explain the fields of the ethernet payload. The payload starts
            after the MAC-addresses, i.e. they are already removed.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.Arp">
            <summary>
            Explain the fields of an ARP (address resolution protocol) packet.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.BuildEthernetMessage(ET.FW.Hal.Ethernet.MacAddress,ET.FW.Hal.Ethernet.MacAddress,ET.FW.Hal.Ethernet.EthernetFrameType,ET.FW.Hal.Ethernet.VLANInfo,System.Byte[])">
            <summary>
            
            </summary>
            <param name="srcAddress"></param>
            <param name="dstAddress"></param>
            <param name="type"></param>
            <param name="info"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.BuildIpv4Message(System.Net.IPAddress,System.Net.IPAddress,ET.FW.Hal.Ethernet.EthernetProtocolType,System.Byte[])">
            <summary>
            
            </summary>
            <param name="srcAddress"></param>
            <param name="dstAddress"></param>
            <param name="type"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.BuildUDPMessage(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="srcPort"></param>
            <param name="dstPort"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.BuildTcpMessage(System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="srcPort"></param>
            <param name="dstPort"></param>
            <param name="sequenceNumber"></param>
            <param name="acknowledgeNumber"></param>
            <param name="flags"></param>
            <param name="payload"></param>
            <param name="optionsBytes"></param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.IPv4">
            <summary>
            Explain the fields of an IPv4 packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.Icmp">
            <summary>
            Explain the fields of an ICMP packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.Tcp">
            <summary>
            Explain the fields of a TCP packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.Udp">
            <summary>
            Explain the fields of an UDP packet.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.Udp.EncodeData(ET.FW.Hal.Ethernet.Protocols.UdpMessage)">
            <summary>
            
            </summary>
            <param name="udp"></param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.SomeIP">
            <summary>
            Explain the fields of an Some/IP packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.EthernetPduMultiplexMessage">
            <summary>
            Explain the fields of AutosarPDUMux packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.DoIP">
            <summary>
            Explain the fields of DoIP
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.DoIP.ParseDoIP(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.ConcatArray(System.Byte[],System.Byte[])">
            <summary>
            Concat new byte arrays at the end of original array
            </summary>
            <param name="originalArray">Originar array</param>
            <param name="newArray">New array which will add to original array</param>
            <returns>array after contact</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.ProtocolName(System.UInt16)">
            <summary>
            Return a long, descriptive string for the given etherType.
            </summary>
            <param name="etherType">The protocol number given in an ethernet frame.</param>
            <returns>Long, descriptive name of etherType</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ProtocolHelpers.ProtocolNameShort(System.UInt16)">
            <summary>
            Return a short, abbreviated string for the given etherType.
            </summary>
            <param name="etherType">The protocol number given in an ethernet frame.</param>
            <returns>Short, abbreviated name of etherType</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.SDMessageType">
            <summary>
            Service Discovery message Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.FindService">
            <summary>
            The Find Service entry type shall be used for finding service instances
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.OfferService">
            <summary>
            The Offer Service entry type shall be used to offer a service to other communication partners
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.Subscribe">
            <summary>
            The Subscribe Eventgroup entry type shall be used to subscribe to an eventgroup.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.SubscribeAck">
            <summary>
            The Subscribe Eventgroup Acknowledgment entry type shall be used to indicate that Subscribe Eventgroup entry was accepted
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.StopSubscribe">
            <summary>
            The Stop Offer Service entry type shall be used to sto offering service instances
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SDMessageType.SubscribeNack">
            <summary>
            The Subscribe Eventgroup Negative Acknowledgment entry type shall be used to indicate that Subscribe Eventgroup entry was NOT accepted.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.IndexFirstOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.IndexSecondOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.NoOfFirstOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.NoOfSecondOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.ServiceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.InstanceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.MajorVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.TTL">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.MinorVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.Counter">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.EventGroupId">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryEntry.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption.Option">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ServiceDiscoveryOption.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage">
            <summary>
            SOME/IP message 
            Source for descriptions: AUTOSAR
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ServiceId">
            <summary>
            Service ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.MessageId">
            <summary>
            Event ID if IsEvent is true else Method ID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.IsEvent">
            <summary>
            SomeIPMessage is for a Event or Method
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.IsServiceDiscovery">
            <summary>
            SOME/IP SD message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.Length">
            <summary>
            A field that specifies the length in bytes of the SomeIp message from RQ/Client Id untill the end of message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ClientId">
            <summary>
            The Client ID is the unique identifier for the calling client inside the ECU
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.SessionId">
            <summary>
            The Session ID is a unique identifier chosen by the client for each call.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ProtocolVersion">
            <summary>
            Protocol Version is an 8 Bit field containing the SOME/IP protocol version
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.InterfaceVersion">
            <summary>
            Interface Version is an 8 Bit field that contains the Major Version of the Service Interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.Type">
            <summary>
            Frame type of SOME/IP message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ReturnCode">
            <summary>
            Returned code to signal whether a request was successfully been processed
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ServiceDiscoveryInfo">
            <summary>
            SD info if IsServiceDiscovery is true
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.ToBytes(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPMessage.Values">
            <summary>
            the values used.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.RebootFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.EntryList">
            <summary>
            
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.OptionList">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.Parse(System.Byte[])">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIpSDMessage.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol">
            <summary>
            Protocol handling of Some/IP messages coming from Udp/Tcp
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.SomeIpSdPort">
            <summary>
            UDP port number for SOMEIP SD MESSAGE
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IUdpMessage},ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink1">IUdpMessage Protocol underneath</param>
            <param name="downlink2">ITcpMessage Protocol underneath</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.SendMessage(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            Send message, not supported here.
            </summary>
            <param name="message">message to be sent</param>
            <returns>Error: sending not supported</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.CheckSendMessage(ET.FW.Hal.Ethernet.Protocols.ISomeIPMessage)">
            <summary>
            Check if given message can be sent over this protocol
            </summary>
            <param name="msg">Message to send</param>
            <returns>Error: sending not supported</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IUdpMessage})">
            <summary>
            Handler for upcoming messages from down-link protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.Downlink2_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            Handler for upcoming messages from downlink protocol
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.SomeIPSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails">
            <summary>
            Details for a single TCP connection, like starting sequence number,
            acknowledgements, source, and destination.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.#ctor(System.Net.IPAddress,System.UInt16,System.Net.IPAddress,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            public constructor to initialise details for a chat just started
            </summary>
            <param name="srcA">IP address of the source/origin.</param>
            <param name="srcP">IP port of the source/origin.</param>
            <param name="dstA">IP address of the destination.</param>
            <param name="dstP">IP port of the destination.</param>
            <param name="seq">Sequence number the chat is starting with.</param>
            <param name="ack">Sequence number the destination confirmed the chat so far.</param>
            <param name="win">Window size of the chat.</param>
            <param name="flg">Flags of the last paket of the chat.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.ToString">
            <summary>
            Convert data to a string.
            </summary>
            <returns>the string representation of TcpChatDetails</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.Key">
            <summary>
            Calculate the (hash) key of this chat.
            The calculation must be symmetric, i.e. if source and destination switch their roles, the same key must be returned.
            </summary>
            <returns>the chat key</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.calcKey(System.Net.IPAddress,System.UInt16,System.Net.IPAddress,System.UInt16)">
            <summary>
            Calculate the (hash) key of a chat using the given source and destination.
            The calculation must be symmetric, i.e. if source and destination switch their roles, the same key must be returned.
            </summary>
            <param name="sourceAddr">the IPAddress of the source</param>
            <param name="sourcePort">the port of the source</param>
            <param name="destAddr">the IPAddress of the destination</param>
            <param name="destPort">the port of the destination</param>
            <returns>the key for this chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.RelativeSeq">
            <summary>
            Gets the current sequence number by returning the delta to the begin of the chat.
            </summary>
            <returns>relative sequence number in chat</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.relativeSeq(System.UInt32,System.Int32)">
            <summary>
            Sets the current sequence number and returns the delta to the begin of the chat.
            Also updates the BiggestRelativeSequence and ExpectedRelativeSequence property.
            </summary>
            <param name="seq">current sequence of chat</param>
            <param name="length">length of current paket to be accumulated for ExpectedRelativeSequence</param>
            <returns>relative sequence number in chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.BiggestRelativeSequence">
            <summary>
            Return the biggest sequence number of the chat so far.
            </summary>
            <returns>biggest sequence number of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.ExpectedRelativeSequence">
            <summary>
            Return the expected sequence number of the chat.
            </summary>
            <returns>expected sequence number of the next paket in the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.Sequence">
            <summary>
            Return the sequence number of the chat.
            </summary>
            <returns>sequence number of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.BaseSequence">
            <summary>
            Return the sequence number the chat started with.
            </summary>
            <returns>sequence number the chat started with</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.RelativeAck">
            <summary>
            Gets the current acknowledge number by returning the delta to the begin of the chat.
            </summary>
            <returns>relative acknowledge number in chat</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.relativeAck(System.UInt32)">
            <summary>
            Sets the current acknowledge number and returns the delta to the begin of the chat.
            Also updates the BiggestRelativeAcknowledge property.
            </summary>
            <param name="ack">current acknowledge of chat</param>
            <returns>relative acknowledge number in chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.BiggestRelativeAcknowledge">
            <summary>
            Return the biggest acknowledge number of the chat so far.
            </summary>
            <returns>biggest acknowledge number of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.Acknowledge">
            <summary>
            Return the acknowledge number of the chat
            </summary>
            <returns>acknowledge number of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.BaseAcknowledge">
            <summary>
            Return the acknowledge number the chat started with.
            </summary>
            <returns>acknowledge number the chat started with</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.setBaseAck(System.UInt32)">
            <summary>
            Re-sets the acknowledge number the chat started with.
            </summary>
            <param name="newBase">the new start</param>
            <returns>the old start</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.setWindowSize(System.UInt16)">
            <summary>
            Sets the window size of the chat and returns the previous window size.
            </summary>
            <param name="newWindowSize">the new window size</param>
            <returns>previous window size of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.WindowSize">
            <summary>
            Return the window size of the chat
            </summary>
            <returns>window size of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.Flags">
            <summary>
            Return the flags of the chat
            </summary>
            <returns>flags of the chat</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.setFlags(System.UInt16)">
            <summary>
            Sets the flags of the chat and returns the previous flags.
            </summary>
            <param name="newFlags">the new flags</param>
            <returns>previous flags of the chat</returns>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.ChatNo">
            <summary>
            Provide a number of the chat.
            </summary>
            <returns>number of the chat</returns>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.TcpChatDetails.detailNumber">
            <summary>
            Global member, counting all chats.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.TcpMessage">
            <summary>
            Ethernet/IP/TCP message.
            Source for descriptions: http://en.wikipedia.org/wiki/Transmission_Control_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.SourcePort">
            <summary>
            identifies the sending port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.DestinationPort">
            <summary>
            identifies the receiving port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.SequenceNumber">
            <summary>
            If the SYN flag is set (1), then this is the initial sequence number.
            The sequence number of the actual first data byte and the acknowledged
            number in the corresponding ACK are then this sequence number plus 1.
            If the SYN flag is clear (0), then this is the accumulated sequence number
            of the first data byte of this packet for the current session.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.AcknowledgeNumber">
            <summary>
            If the ACK flag is set then the value of this field is the next sequence number
            that the receiver is expecting. This acknowledges receipt of all prior bytes
            (if any). The first ACK sent by each end acknowledges the other end's initial
            sequence number itself, but no data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.DataOffset">
            <summary>
            In the message only 4 bits are used.
            Specifies the size of the TCP header in 32-bit words. The minimum size header
            is 5 words and the maximum is 15 words thus giving the minimum size of 20 bytes
            and maximum of 60 bytes, allowing for up to 40 bytes of options in the header.
            This field gets its name from the fact that it is also the offset from the start
            of the TCP segment to the actual data.
            In the data structure (here) it already contains the total amount of octets, i.e.
            multiplied by 4 already.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.Flags">
            <summary>
            Flags (aka Control bits) – contains 9 1-bit flags
            NS  – ECN-nonce concealment protection (added to header by RFC 3540).
            CWR – Congestion Window Reduced (CWR) flag is set by the sending host to indicate
                  that it received a TCP segment with the ECE flag set and had responded in
                  congestion control mechanism (added to header by RFC 3168).
            ECE – ECN-Echo indicates
                  If the SYN flag is set (1), that the TCP peer is ECN capable.
                  If the SYN flag is clear (0), that a packet with Congestion Experienced flag
                  in IP header set is received during normal transmission (added to header by RFC 3168).
            URG – indicates that the Urgent pointer field is significant
            ACK – indicates that the Acknowledgment field is significant. All packets after the
                  initial SYN packet sent by the client should have this flag set.
            PSH – Push function. Asks to push the buffered data to the receiving application.
            RST – Reset the connection
            SYN – Synchronize sequence numbers. Only the first packet sent from each end should
                  have this flag set. Some other flags change meaning based on this flag, and some
                  are only valid for when it is set, and others when it is clear.
            FIN – No more data from sender
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.WindowSize">
            <summary>
            The size of the receive window, which specifies the number of bytes (beyond the sequence
            number in the acknowledgment field) that the sender of this segment is currently willing
            to receive (see Flow control and Window Scaling).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.Checksum">
            <summary>
             The 16-bit checksum field is used for error-checking of the header and data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.UrgentPointer">
            <summary>
             If the URG flag is set, then this 16-bit field is an offset from the
             sequence number indicating the last urgent data byte.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.OptionsStart">
            <summary>
            Options (Variable 0-320 bits, divisible by 32)
            The bits are stored in Payload, just the starting position and the size are memorised.
            The length of this field is determined by the data offset field. Options have up to
            three fields: Option-Kind (1 byte), Option-Length (1 byte), Option-Data (variable).
            The Option-Kind field indicates the type of option, and is the only field that is not
            optional. Depending on what kind of option we are dealing with, the next two fields
            may be set: the Option-Length field indicates the total length of the option, and the
            Option-Data field contains the value of the option, if applicable. For example, an
            Option-Kind byte of 0x01 indicates that this is a No-Op option used only for padding,
            and does not have an Option-Length or Option-Data byte following it. An Option-Kind byte
            of 0 is the End Of Options option, and is also only one byte. An Option-Kind byte of 0x02
            indicates that this is the Maximum Segment Size option, and will be followed by a byte
            specifying the length of the MSS field (should be 0x04). Note that this length is the
            total length of the given options field, including Option-Kind and Option-Length bytes.
            So while the MSS value is typically expressed in two bytes, the length of the field will
            be 4 bytes (+2 bytes of kind and length). In short, an MSS option field with a value of
            0x05B4 will show up as (0x02 0x04 0x05B4) in the TCP options section.
            </summary>
            <summary>
            The starting position inside Payload for the Options section of a TCP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.OptionsLength">
            <summary>
            The size of the Options section of a TCP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpMessage.OptionBytes">
             <summary>
             The length of this field is determined by the data offset field. Options have up to three fields: Option-Kind (1 byte), Option-Length (1 byte), Option-Data (variable). The Option-Kind field indicates the type of option, and is the only field that is not optional. Depending on what kind of option we are dealing with, the next two fields may be set: the Option-Length field indicates the total length of the option, and the Option-Data field contains the value of the option, if applicable. For example, an Option-Kind byte of 0x01 indicates that this is a No-Op option used only for padding, and does not have an Option-Length or Option-Data byte following it. An Option-Kind byte of 0 is the End Of Options option, and is also only one byte. An Option-Kind byte of 0x02 indicates that this is the Maximum Segment Size option, and will be followed by a byte specifying the length of the MSS field (should be 0x04). This length is the total length of the given options field, including Option-Kind and Option-Length bytes. So while the MSS value is typically expressed in two bytes, the length of the field will be 4 bytes (+2 bytes of kind and length). In short, an MSS option field with a value of 0x05B4 will show up as (0x02 0x04 0x05B4) in the TCP options section. 
            Some options may only be sent when SYN is set; they are indicated below as [SYN]. Option-Kind and standard lengths given as (Option-Kind,Option-Length). 
            0 (8 bits): End of options list 
            1 (8 bits): No operation (NOP, Padding) This may be used to align option fields on 32-bit boundaries for better performance. 
            2,4,SS (32 bits): Maximum segment size (see maximum segment size) [SYN] 
            3,3,S (24 bits): Window scale (see window scaling for details) [SYN][7] 
            4,2 (16 bits): Selective Acknowledgement permitted. [SYN] (See selective acknowledgments for details)[8] 
            5,N,BBBB,EEEE,... (variable bits, N is either 10, 18, 26, or 34)- Selective ACKnowledgement (SACK)[9] These first two bytes are followed by a list of 1–4 blocks being selectively acknowledged, specified as 32-bit begin/end pointers. 
            8,10,TTTT,EEEE (80 bits)- Timestamp and echo of previous timestamp (see TCP timestamps for details)[10]
            The remaining options are historical, obsolete, experimental, not yet standardized, or unassigned. Option number assignments are maintained by the IANA[11]. 
             </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.TcpSoftwareProtocol">
            <summary>
            Protocol handling of TCP messages coming from Ethernet/IPv4
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.TcpSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Handler for upcoming messages from downlink protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">downlink protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.TcpSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType">
            <summary>
            ThriftMe Message Types
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType.Call">
            <summary>
            Call entry
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType.Reply">
            <summary>
            Reply entry
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType.Exception">
            <summary>
            Exception entry
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType.OneWay">
            <summary>
            OneWay entry
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessageType.Event">
            <summary>
            Event entry
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage">
            <summary>
            Message class implementation
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.FunctionId">
            <summary>
            The ID of the called function.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.Type">
            <summary>
            The type of the message. request (1), reply (2), exception (3), oneway (4), event (5).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.SequenceId">
            <summary>
            The sequence ID of the message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.ServiceId">
            <summary>
            The ID of the service which is target of the function call.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.Length">
            <summary>
            The length of the complete ThriftMeMessage (except the length bytes).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeMessage.Uplink">
            <summary>
            The next higher level of the protocol (OSI: the protocol one layer lower), e.g. a TCP message.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol">
            <summary>
            Protocol handling of Thrift.Me messages coming from Ethernet/IPv4/TCP
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection">
            <summary>
            Structure for saving TCP connections with their associated messages.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection.sourceAddress">
            <summary>
            The complete URI of the TCP sourceAddress (IP:Port).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection.destinationAddress">
            <summary>
            The complete URI of the TCP destinationAddress (IP:Port).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection.startSegment">
            <summary>
            Dictionary for saving Thrift.Me messages which are not completed.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection.messages">
            <summary>
            Dictionary for saving undecoded TCP messages. Each of could be a part of a Thrift.Me message.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection.#ctor(System.String,System.String)">
            <summary>
            The Constructor
            </summary>
            <param name="source">The complete URI of the TCP sourceAddress (IP:Port).</param>
            <param name="destination">The complete URI of the TCP destinationAddress (IP:Port).</param>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.connections">
            <summary>
            Contains all available TCP connections.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.ITcpMessage})">
            <summary>
            All messages from the lower protocols arrive here for further processing.
            Checks if it's a Thrift.Me message or not and starts proper processing.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">event args</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.createThriftMeMessage(ET.FW.Hal.Ethernet.Protocols.ITcpMessage)">
            <summary>
            Creates a Thrift.Me message if the given TCP message contains a complete one. Otherwise the message
            will be saved and completeMessage() is called.
            </summary>
            <param name="message">A TCP message containing Thrift.Me.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.completeMessage(ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.tcpConnection)">
            <summary>
            Tries to complete a single message.
            </summary>
            <param name="connection">The current connection where a message should be completed.</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.ThriftMeSoftwareProtocol.getTcpConnection(ET.FW.Hal.Ethernet.Protocols.ITcpMessage)">
            <summary>
            Tries to found out if the given message belongs to an existing or a new connection. If it's a new one,
            the connection will be created and saved to the connections list. The messages connection object will
            be returned.
            </summary>
            <param name="message">The current message.</param>
            <returns>The messages connection object.</returns>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.UdpMessage">
            <summary>
            Ethernet/IP/UDP message.
            Source for descriptions: http://en.wikipedia.org/wiki/User_Datagram_Protocol
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.SourcePort">
            <summary>
            identifies the sending port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.DestinationPort">
            <summary>
            identifies the receiving port
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.Length">
            <summary>
            A field that specifies the length in bytes of the entire datagram: header and data.
            The minimum length is 8 bytes since that's the length of the header.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.Checksum">
            <summary>
             The 16-bit checksum field is used for error-checking of the header and data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.uplink">
            <summary>
            The next higher level of the protocol, e.g. an IP message.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.PduMuxPayloads">
            <summary>
            PduMux Payloads inside UDP
            ETFCCB-291: PDU MUx payload can be a list of similar data bytes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpMessage.SomeIpPayloads">
            <summary>
            SOME-IP Payloads inside UDP
            ETFCCB-291: SomeIp payload can be a list of similar data bytes
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol">
            <summary>
            Protocol handling of UDP messages coming from Ethernet/IPv4
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol.Decoupler">
            <summary>
            Decoupler which does the event decoupling
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol.#ctor(System.String,ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Constructor for dynamic creation
            </summary>
            <param name="name">Name of the protocol</param>
            <param name="downlink">Protocol underneeth</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol.Downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Ethernet.Protocols.IIPv4Message})">
            <summary>
            Handler for upcoming messages from down-link protocol
            In English: It forwards a message upwards
            </summary>
            <param name="sender">down-link protocol</param>
            <param name="e">event parameter containing the message</param>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol.GetTranslationCacheKey(ET.FW.Core.Messaging.IMessage)">
            <summary>
            Get caching key for translation
            </summary>
            <param name="message">Message with translation to cache</param>
            <returns>Caching key for translation. No caching if key is null or empty</returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.Protocols.UdpSoftwareProtocol.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.SomeIpFrameType">
            <summary>
            The different FrameTypes of a SomeIP message
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.SomeIpReturnCode">
            <summary>
            The different return codes of a SomeIP message
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_OK">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_NOT_OK">
            <summary>
            An unspecified error occurred
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_UNKNOWN_SERVICE">
            <summary>
            The requested Service ID is unknown.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_UNKNOWN_METHOD">
            <summary>
            The requested Method ID is unknown. ServiceID is known.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_NOT_READY">
            <summary>
            Service ID and Method ID are known. Applicationnot running.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_NOT_REACHABLE">
            <summary>
            System running the service is not reachable (internal error code only).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_TIMEOUT">
            <summary>
            A timeout occurred (internal error code only).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_WRONG_PROTOCOL_VERSION">
            <summary>
            Version of SOME/IP protocol not supported
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_WRONG_INTERFACE_VERSION">
            <summary>
            Interface version mismatch
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_MALFORMED_MESSAGE">
            <summary>
            Deserialization error, so that payload cannot be deserialized.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Ethernet.SomeIpReturnCode.E_WRONG_MESSAGE_TYPE">
            <summary>
            An unexpected message type was received(e.g. REQUEST_NO_RETURN for a method defined as REQUEST.)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Ethernet.VLANInfo">
            <summary>
            VLAN information from Ethernet message
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.VLANInfo.Priority">
            <summary>
            Priority Code Point 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.VLANInfo.IsDropEligible">
            <summary>
            Drop Eligibility Indicator 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Ethernet.VLANInfo.Identifier">
            <summary>
            VLAN Identifier Used to specify VLAN
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.VLANInfo.DecodeData(System.Byte[])">
            <summary>
            Decode data to VLANInfo
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.VLANInfo.EncodeData(ET.FW.Hal.Ethernet.VLANInfo)">
            <summary>
            Decode VLANInfo to data
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:ET.FW.Hal.Ethernet.VLANInfo.SetVlanPriority">
            <summary>
            Sets the vlan priority based on the current NTG according to MSS specifications
            </summary>
        </member>
    </members>
</doc>
