<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ET.FW.Hal.Instruments</name>
    </assembly>
    <members>
        <member name="T:ET.FW.Hal.Instruments.Epiphan">
            <summary>
            Epiphan Framegrabber external device
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Epiphan.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Epiphan.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "HUFrameGrabber")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Epiphan.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Epiphan.Dispose">
            <summary>
            Disposing the device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Epiphan.GetCurrentFrame">
            <summary>
            Get current image from frame grabber
            </summary>
            <returns>captured frame Bitmap</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Epiphan.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Framegrabber.IFramegrabberMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Epiphan.Decoupler">
            <summary>
            Event decoupler for incoming events
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IFramegrabber">
            <summary>
            Common Frame grabber API definition
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IFramegrabber.GetCurrentFrame">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.AsyncDevice">
            <summary>
            Helper class for synchronous processing of asynchrouous IO with VISA device.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AsyncDevice.#ctor(ET.FW.Core.Messaging.IProtocol{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Create an instance from a downlink protocol.
            </summary>
            <param name="downlink">A downlink protocol (should be obtained via ET-framework).</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AsyncDevice.Dispose">
            <summary>
            Dispose the instance.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AsyncDevice.SendCommand(System.String)">
            <summary>
            Send an ASCII commant to the VISA device. No response expected.
            </summary>
            <param name="command">ASCII command.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AsyncDevice.SendRequest(System.String)">
            <summary>
            Send a request to the VISA device and wait for a response.
            </summary>
            <param name="request">ASCII request.</param>
            <returns>The response from the VISA device or NULL if none has been received.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement">
            <summary>
            This class implements the simple audio measurement result for one audio channel.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.ChannelNumber">
            <summary>
            Audio channel number.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.IsValid">
            <summary>
            Is the measurement valid?
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.Level">
            <summary>
            Audio signal level in dBV.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.Frequency">
            <summary>
            Dominant frequency in Hz.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.Timestamp">
            <summary>
            Measurement timestamp.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurement.#ctor(System.DateTime,System.UInt16,System.Double,System.Double)">
            <summary>
            Create an instance.
            </summary>
            <param name="timestamp">Measurement timestamp.</param>
            <param name="channel">Audio channel number.</param>
            <param name="level">Audio signal level.</param>
            <param name="frequency">Dominant frequency.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended">
            <summary>
            This class implements the extended audio measurement result for one audio channel.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended.FFTFrequencies">
            <summary>
            Array of the FFT frequencies (X axis)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended.FFTLevels">
            <summary>
            Array of the freqency levels (Y axis)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended.#ctor(ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement)">
            <summary>
            Create an instance.
            </summary>
            <param name="measurement">Simple audio measurement for extension.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended.GetLocalMaxima(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Int32)">
            <summary>
            Get all local maxima from a collection of values.
            </summary>
            <param name="source">Source collection of values.</param>
            <param name="threshold">Minimum lower threshold for the maxima values.</param>
            <param name="windowSize">Full window size (double-sided, including the maxima point itself).</param>
            <returns>A collection of all local maxima values.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.AudioMeasurementExtended.GetDominantFreuqencies">
            <summary>
            Get a list of dominant frequencies (local maxima of 5 points, Lmax - 40 dBV threshold) in frequency spectrum) for current audio channel.
            </summary>
            <returns>List of dominant frequencies.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement">
            <summary>
            Interface for a simple audio measurement result for one audio channel.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement.ChannelNumber">
            <summary>
            Audio channel number.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement.IsValid">
            <summary>
            Is the measurement valid?
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement.Frequency">
            <summary>
            Dominant frequency in Hz.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement.Level">
            <summary>
            Audio signal level in dBV.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurement.Timestamp">
            <summary>
            Measurement timestamp.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurementExtended">
            <summary>
            Interface for an extended audio measurement result for one audio channel.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurementExtended.FFTFrequencies">
            <summary>
            Array of the FFT frequencies (X axis)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurementExtended.FFTLevels">
            <summary>
            Array of the freqency levels (Y axis)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurementExtended.GetDominantFreuqencies">
            <summary>
            Get a list of dominant frequencies (local maxima of 5 points, Lmax - 40 dBV threshold) in frequency spectrum for current audio channel.
            </summary>
            <returns>List of dominant frequencies.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.IAudioMeasurementExtended.GetLocalMaxima(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Int32)">
            <summary>
            Get all local maxima from a collection of values.
            </summary>
            <param name="source">Source collection of values</param>
            <param name="threshold">Minimum lower threshold for the maxima values</param>
            <param name="windowSize">Full window size (double-sided, including the maxima point itself)</param>
            <returns></returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.MeasuredFrequency">
            <summary>
            FFT measured frequency.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.MeasuredFrequency.Index">
            <summary>
            Frequency index in the measurement result array.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.MeasuredFrequency.Frequency">
            <summary>
            Exact frequency value.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.MeasuredFrequency.Level">
            <summary>
            Frequency level.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.MeasuredFrequency.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Create an instance.
            </summary>
            <param name="index">Frequency index in the measurement result array.</param>
            <param name="frequency">Frequency value.</param>
            <param name="level">Frequency level.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz">
            <summary>
            Implementation of the IAudioAnalyzer interface for the Rohde &amp; Schwarz RS UPP 800 device.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.#ctor">
            <summary>
            Create the instance with default name.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.#ctor(System.String)">
            <summary>
            Create the instance with specified name.
            </summary>
            <param name="name">Device name.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initialize the device.
            </summary>
            <param name="downlinks">List of downlink protocols.</param>
            <returns>TRUE if successful initialized.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.Dispose">
            <summary>
            Dispose the object.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.Ident">
            <summary>
            Device identification string.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.Configure(System.String)">
            <summary>
            Configure the device.
            </summary>
            <param name="audioChannels">Device paramaters.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.Measure">
            <summary>
            Perform a simple measurement for each audio channel (level and dominant frequency).
            </summary>
            <returns>A collection of simple audio measurements for each audio channel.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.MeasureExtended">
            <summary>
            Perform an extended measurement for each audio channel (level and FFT).
            </summary>
            <returns>A collection of extended audio measurements for each audio channel.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.AudioAnalyzer.RohdeSchwarz.ChannelCount">
            <summary>
            Total configured audio channel count.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IAudioAnalyzer">
            <summary>
            Audio analyzer interface, Rohde &amp; Schwarz RS UPP 800
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IAudioAnalyzer.Ident">
            <summary>
            Device identification string.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IAudioAnalyzer.Configure(System.String)">
            <summary>
            Configure the device.
            </summary>
            <param name="audioChannels">Device parameters.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IAudioAnalyzer.Measure">
            <summary>
            Perform a simple measurement for each audio channel (level and dominant frequency).
            </summary>
            <returns>A collection of simple audio measurements for each audio channel.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IAudioAnalyzer.MeasureExtended">
            <summary>
            Perform an extended measurement for each audio channel (level and FFT).
            </summary>
            <returns>A collection of extended audio measurements for each audio channel.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IAudioAnalyzer.ChannelCount">
            <summary>
            Total configured audio channel count.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.DaqMessageDevice">
            <summary>
            Base class for external device with downlink of text and binary messages.
            </summary>
            <remarks>Downlink for binary message is optional</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.ClearErrors">
            <summary>
            Clear all errors
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.DaqMessageDevice.HasErrors">
            <summary>
            Has any errors
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.DaqMessageDevice.Errors">
            <summary>
            Queried errors
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.DaqMessageDevice.ErrorsEvent">
            <summary>
            Errors event handler
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.RaiseErrorsEvent">
            <summary>
            Raises errors event
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.DaqMessageDevice.RequestTimeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.DaqMessageDevice.DaqDownlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.AddSystemError(System.String)">
            <summary>
            Add system error
            </summary>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.AddError(ET.FW.Core.Hal.ErrorKind,System.String)">
            <summary>
            Add error
            </summary>
            <param name="kind">Kidn of error</param>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnClearErrors">
            <summary>
            Clear all errors on device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.RequestErrors">
            <summary>
            Request errors
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnRequestErrors">
            <summary>
            On request error on device
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnSend(ET.FW.Hal.Daq.IDaqMessage)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="message">The text to send.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnRequest(ET.FW.Hal.Daq.IDaqMessage)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="message">The text to send.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnRequest(ET.FW.Hal.Daq.IDaqMessage,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="message">The text to send.</param>
            <param name="timeout">The timeout of the request.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnSynchronizedStarted">
            <summary>
            On SynchronizedStarted
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DaqMessageDevice.OnSynchronizedEnded">
            <summary>
            On SynchronizedEnded
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.ExternalDevice">
            <summary>
            Abstract class implementing instrument (external device) base functionality.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ExternalDevice.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ExternalDevice.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of device</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ExternalDevice.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ExternalDevice.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ExternalDevice.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>This implementation supports exactly one downlink protocol which is copied to Downlink property</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ExternalDevice.Available">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.Core.Hal.IExternalDevice"/> is available.
            </summary>
            <value><c>true</c> if available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ExternalDevice.Logger">
            <summary>
            Logger for this device.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem">
            <summary>
            Implements the GSM LAN Modem device
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Decoupler">
            <summary>
            IEventDecoupling implementation: provide IDecoupler as property
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.ReceivedData">
            <summary>
            The received data from the Comport
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Received">
            <summary>
            Event triggers when first byte arrives
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Available">
            <summary>
            Availability of downlink
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.#ctor(System.String)">
            <summary>
            Create the instance with specified name.
            </summary>
            <param name="name">Device name.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.DelimiterString">
            <summary>
            Testbench.xml parameter
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Dispose">
            <summary>
            Disposing the device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.GSMLANModem.GSMLANModem.Send(System.String,System.Boolean)">
            <summary>
            Sends a string to the Comport.
            </summary>
            <param name="command">Comport string.</param>
            <param name="request">TRUE in case of expecting a response.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IGSMLANModem">
            <summary>
            GSMLANModem interface, Rohde &amp; Schwarz RS UPP 800
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IGSMLANModem.Send(System.String,System.Boolean)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
            <param name="request">TRUE in case of expecting a response.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IGSMLANModem.ReceivedData">
            <summary>
            The received data from the Comport
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.IGSMLANModem.Received">
            <summary>
            Event triggers when first byte arrives
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.GSMLANModemHandler">
            <summary>
            Event handler of channel access of the socket
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Curve.DeviceSpecification">
            <summary>
            Device Specification
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MinSampleRate">
            <summary>
            Min sample rate (Sa/s)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MaxDuration">
            <summary>
            Max duration (s/Sa)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MaxSampleRate">
            <summary>
            Max sample rate (Sa/s)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MinDuration">
            <summary>
            Min duration (s/Sa)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MaxSaCount">
            <summary>
            Max Count of Sa
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.MinSaCount">
            <summary>
            Min Count of Sa
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.RequiredNormalizedPoints">
            <summary>
            True if curve is required to normalized
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.ModelName">
            <summary>
            Model name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.DeviceSpecification.ModelValidating">
            <summary>
            True to validate hardware model on init, otherwise false
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Curve.Point">
            <summary>
            One point of the voltage curve.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.Point.Voltage">
            <summary>
            The voltage value of the point in volts.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.Point.Current">
            <summary>
            The current value of the point in ampere.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.Point.Duration">
            <summary>
            The duration of the point in seconds.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.Curve.Point"/> struct.
            </summary>
            <param name="voltage">The voltage.</param>
            <param name="current">The current.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Curve.VoltageCurve">
            <summary>
            Helper class for voltage curve handling.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.OriginalPoints">
            <summary>
            List of the original voltage points (voltage/current/duration), which are loaded
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.AdjustedPoints">
            <summary>
            List of the voltage points (voltage/current/duration), which are adjusted with the given device specifications
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.SamplingRate">
            <summary>
            Sampling rate in Sa/s.
            </summary>
            <remarks>Valid only for normalized curve</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.MinVoltage">
            <summary>
            Minimum voltage value in Volts.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.MaxVoltage">
            <summary>
            Maximum voltage value in Volts.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.EndVoltage">
            <summary>
            Voltage level to set and hold after curve is executed in Volt (-1 for undefined).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.CurrentLimit">
            <summary>
            Current limit in Ampere (-1 for undefined)
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.Duration">
            <summary>
            Total duration of the voltage curve.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.Name">
            <summary>
            Name of the voltage curve (e.g. filename of scp/toe file).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Curve.VoltageCurve.DeviceSpecification">
            <summary>
            Device specifications for the adjusted voltage curve
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.#ctor(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.String,ET.FW.Hal.Instruments.Curve.DeviceSpecification,System.Double)">
            <summary>
            The Constructor.
            </summary>
            <param name="points">Collection of voltage/current/duration values.</param>
            <param name="name">Name of voltage curve, e.g name of loaded scp file</param>
            <param name="specification">Device specification</param>
            <param name="currentLimit">Current limit</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.AdjustWithSpecification">
            <summary>
            Adjustes point with device vspecification
            </summary>
            <returns>Normalized points</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.Normalize">
            <summary>
            Normalizes the sample rate (makes the voltage points equidistant) by adding voltage points.
            </summary>
            <returns>Normalized points</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.CalculateNormalizedDuration(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculate normalized duration of all given durations
            </summary>
            <param name="durations">The durations</param>
            <returns>normalized duration</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.ReduceResolution(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Scales the curve down to maxSteps.
            </summary>
            <param name="points">The List of points</param>
            <returns>The voltage curve</returns>
            <remarks>
            If the resolution is reduced, the voltage points won't be equidistant.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.SkipPoints(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Double)">
            <summary>
            Skips the points within the given threshold.
            </summary>
            <param name="points">The curve.</param>
            <param name="threshold">The threshold.</param>
            <returns>The reduced voltage curve</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.ReadSCPFile(System.String,ET.FW.Hal.Instruments.Curve.DeviceSpecification,System.String)">
            <summary>
            Read voltage curve in the Schaffner AutoStar format.
            </summary>
            <param name="filename">file name</param>
            <param name="specification">Device specifications</param>
            <param name="name">Name of the voltage curve. It is the filename if name is empty</param>
            <returns>voltage curve from file or null in case of an error</returns>
            <remarks>
            SCP file is formatted like an ini-file. It starts with some parameters (e.g. sampling rate). 
            Voltage value lines are also key value pairs: key is index, value is voltage as float (e.g. "1= 12.6")
            Current implementation ignores parameter section names and assumes that all values are sorted ascending
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.ReadToeFile(System.String,System.Double,ET.FW.Hal.Instruments.Curve.DeviceSpecification,System.String)">
            <summary>
            Read voltage curve in the "Toellner" format.
            </summary>
            <param name="filename">file name</param>
            <param name="current">The current.</param>
            <param name="specification">Device specifications</param>
            <param name="name">Name of the voltage curve. It is the filename if name is empty</param>
            <returns>The VoltageCurve</returns>
            <remarks>
            These are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.ReadOtherFile(System.String,System.Double,ET.FW.Hal.Instruments.Curve.DeviceSpecification,System.String)">
            <summary>
            Reads voltage curve from given file. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <param name="specification">Device specifications</param>
            <param name="name">Name of the voltage curve. It is the filename if name is empty</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Curve.VoltageCurve.TxtToToe(System.String)">
            <summary>
            Texts to toe.
            </summary>
            <param name="filename">The filename.</param>
            <returns>the filename of the converted filename, or null on error</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB">
            <summary>
            Agilent / Schaffner power supply.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnInit">
            <summary>
            Internal init
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnStartingProgrammingVoltageCurve">
            <summary>
            On staring ProgrammingVoltageCurve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnCompletingProgrammingVoltageCurve">
            <summary>
            on completing ProgrammingVoltageCurve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.ClearAllDatas">
            <summary>
            Clear all programmed curve datas
            </summary>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnClearAllDatas">
            <summary>
            Clear all programmed curve datas
            </summary>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.ProgramVoltageFile(System.String,System.String,System.Double)">
            <summary>
            Starts programming of the given voltage curve. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="curvename">alias key name of curve</param>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            The end voltage of curve is the current preset voltage.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.ProgramVoltageCurve(System.String,System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">Name of voltage curve</param>
            <param name="voltagePoints">The voltage curve.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            The end voltage of curve is the current preset voltage.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.StartRunningVoltageCurve(System.String)">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <param name="curvename">alias key name of curve</param>
            <returns>true if start is not successfull</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.OnStartRunningVoltageCurve(System.String)">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <param name="curvename">alias key name of curve</param>
            <returns>true if start is not successfull</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGenB.VoltageCurves">
            <summary>
            Gets the voltage curves
            </summary>
            <value>The voltage curves.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.AgilentBase">
            <summary>
            Agilent power supply base implementation.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.MAX_VOLTAGE2">
            <summary>
            Default Max. Voltage of channel 2
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.VOLTAGE_GAIN">
            <summary>
            Default Voltage gain of channel 1
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.VOLTAGE_GAIN2">
            <summary>
            Default Voltage gain of channel 2
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OUTPUT_LOAD">
            <summary>
            Default Output load
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.InitialVoltage2">
            <summary>
            Initial output voltage of Canal 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.MaxVoltage2">
            <summary>
            Maximum output voltage of Canal 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.VoltageGain">
            <summary>
            Voltage gain.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OutputLoad">
            <summary>
            Output termination.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.VoltageGain2">
            <summary>
            Voltage gain channel 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OutputLoad2">
            <summary>
            Output termination channel 2.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnInit">
            <summary>
            Internal init
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.Amplitude">
            <summary>
            Amplitude (Vpp) for Programming curve
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.SetAmplitude">
            <summary>
            Sets the amplitude.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnRequestMeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnStartingProgrammingVoltageCurve">
            <summary>
            On staring ProgrammingVoltageCurve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnCompletingProgrammingVoltageCurve">
            <summary>
            on completing ProgrammingVoltageCurve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.RunProgrammingVoltageCurve(System.String,System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            programming the voltage curve..
            </summary>
            <param name="curvename">Curve name</param>
            <param name="points">Curve points</param>
            <returns>
            Returns <c>true</c> if running was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.GetValidCurvename(System.String)">
            <summary>
            Gets the valid curve name with max 10 characters
            </summary>
            <param name="curvename">The original name</param>
            <returns>Valid curve name</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.curveFinished">
            <summary>
            End of voltage curve run.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnStartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.CalcCurveFinishedTime(System.TimeSpan)">
            <summary>
            Calculates CurveFinished Time
            </summary>
            <param name="curveDuration">Duration of starting curve</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnStopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.GetScaledValueBytes(System.Double,System.Double,System.Double)">
            <summary>
            Get short scaled value of voltage as bytes array
            </summary>
            <param name="voltage">The voltage</param>
            <param name="factor">Scaled factor</param>
            <param name="offset">Offset voltage</param>
            <returns>Scaled value as byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.GetValidVoltage(System.Double)">
            <summary>
            Validate voltage range (0V .. MaxVoltage) 
            </summary>
            <param name="voltage">the voltage to check</param>
            <returns>the validated voltage</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.ConvertVoltage(System.Double)">
            <summary>
            Converts a voltage value to a Agilent level.
            </summary>
            <param name="voltage">Voltage value</param>
            <returns>converted value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the Agilent parameters.
            </summary>
            <param name="parameters">Parameters from the testbench.xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentBase.OnRequestErrors">
            <summary>
            On request error on device
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply">
            <summary>
            Multicurve powersupply interface to load mutiple voltage curves.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply.ClearAllDatas">
            <summary>
            Clear all programmed curve datas
            </summary>
            <returns>True if successful, othewise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply.ProgramVoltageFile(System.String,System.String,System.Double)">
            <summary>
            Starts programming of the given voltage curve. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="curvename">alias key name of curve</param>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            The end voltage of curve is the current preset voltage.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply.ProgramVoltageCurve(System.String,System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">Name of voltage curve</param>
            <param name="voltagePoints">The voltage curve.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            The end voltage of curve is the current preset voltage.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply.StartRunningVoltageCurve(System.String)">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <param name="curvename">alias key name of curve</param>
            <returns>true if start is not successfull</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IMultiCurvePowerSupply.VoltageCurves">
            <summary>
            Gets the voltage curves
            </summary>
            <value>The voltage curves.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.NiDaq">
            <summary>
            NaDaq power supply.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.InitialVoltage">
            <summary>
            Initial output voltage.
            </summary>
            <remarks>
            The parameter "InitialVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MaxVoltage">
            <summary>
            Maximum output voltage.
            </summary>
            <remarks>
            The parameter "MaxVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MaxCurrent">
            <summary>
            Gets the max current of the device.
            </summary>
            <value>The max current of the device.</value>
            <remarks>
            The parameter "MaxCurrent" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MinVoltage">
            <summary>
            Minimum output voltage.
            </summary>
            <remarks>
            The parameter "MinVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MinCurrent">
            <summary>
            Gets the min current of the device.
            </summary>
            <value>The min current of the device.</value>
            <remarks>
            The parameter "MinCurrent" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.VoltAoChannel">
            <summary>
            Output Voltage Channel.
            </summary>
            <remarks>
            The parameter "VoltAoChannel" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.VoltAiChannel">
            <summary>
            Input Voltage Channel.
            </summary>
            <remarks>
            The parameter "VoltAiChannel" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.CurrAiChannel">
            <summary>
            Input Current Channel.
            </summary>
            <remarks>
            The parameter "CurrAiChannel" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.SetVoltFactor">
            <summary>
            Specifies the No.of times set Voltage to be multiplied.
            </summary>
            <remarks>
            Default Value 0.5
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.GetVoltFactor">
            <summary>
            Specifies the No.of times get Voltage to be multiplied.
            </summary>
            <remarks>
            Default Value 4
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.GetCurrFactor">
            <summary>
            Specifies the No.of times get Voltage to be multiplied.
            </summary>
            <remarks>
            Default Value 3.2 =>16/5
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.SetCurrFactor">
            <summary>
            Specifies the No.of times set Voltage to be multiplied.
            </summary>
            <remarks>
            Default Value 1.0
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MaxSamplePoints">
            <summary>
            Maximum Sample Points For Voltage Curve
            </summary>
            <remarks>
            Default Value 100000
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.CurrentOffset">
            <summary>
            Current offset value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.Specification">
            <summary>
            Device specification
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.DeviceIdentification">
            <summary>
            Get device identification string.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestDeviceIdentification">
            <summary>
            Requests device identification
            </summary>
            <returns>Device identification</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.PowerOn">
            <summary>
            Switches the power supply on (Key STB/EXE).
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.PowerOff">
            <summary>
            Switches the power supply off (Key STB/EXE).
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.IsPowerOn">
            <summary>
            Gets a value indicating whether power is on.
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.SenseOn">
            <summary>
            Switches the sense mode on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.SenseOff">
            <summary>
            Switches the sense mode off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnSetSense(System.Boolean)">
            <summary>
            Sets Sense
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.IsSenseOn">
            <summary>
            Gets a value indicating whether sense mode is on.
            </summary>
            <returns>Returns <c>true</c> if sense mode is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestIsSenseOn">
            <summary>
            On requesting IsSenseOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.CapacitorOn">
            <summary>
            Switches the capacitor on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.CapacitorOff">
            <summary>
            Switches the capacitor off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnSetCapacitor(System.Boolean)">
            <summary>
            Sets Capacitor
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.IsCapacitorOn">
            <summary>
            Gets a value indicating whether capacitor is on.
            </summary>
            <returns>Returns <c>true</c> if capacitor is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestIsCapacitorOn">
            <summary>
            On requesting IsCapacitorOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.Reset">
            <summary>
            Resets the power supply.
            </summary>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.PresetVoltage">
            <summary>
            Get / set preset output voltage (in Volts, limited to maxVoltage).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.InternalOnSetPresetVoltage(System.Nullable{System.Double})">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="value">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestMeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.PresetCurrent">
            <summary>
            Get / set preset output current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestPresetCurrent">
            <summary>
            Get preset Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.InternalOnSetPresetCurrent(System.Nullable{System.Double})">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="value">Current to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnSetPresetCurrent(System.Double)">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="current">Current to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.MeasuredCurrent">
            <summary>
            Get measured current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestMeasuredCurrent">
            <summary>
            Get measured Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.VoltageCurve">
            <summary>
            Gets the current voltage curve
            </summary>
            <value>The current voltage curve. null is no curve is programmed</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.VoltageCurveProgrammingJob">
            <summary>
            Voltage curve programming job
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.Progress">
            <summary>
            Programming progress
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramVoltageFile(System.String,System.String,ET.FW.Hal.Instruments.PowerSupply.FileFormat,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">Curve name</param>
            <param name="filename">Cranking curve file</param>
            <param name="format">File format</param>
            <param name="current">The current</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Returns progress job if start was successful, otherwise null.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.StartProgrammingVoltageCurve">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.StopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.LoadVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Loads voltage curve
            </summary>
            <param name="parameters">Programming parameters</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.RunProgrammingVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            programming the voltage curve..
            </summary>
            <param name="points">Curve points</param>
            <returns>
            Returns <c>true</c> if running was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnStartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnStopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramScpVoltageFile(System.String)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramScpVoltageFile(System.String,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Returns progress job if start was successful, otherwise null.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramToeVoltageFile(System.String,System.Double)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramToeVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramOtherVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.ProgramVoltageCurve(System.String,System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">curve name</param>
            <param name="voltagePoints">The voltage curve.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.StartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.StopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.NiDaq.IsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <value><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.WaitRunningVoltageCurveFinished(System.TimeSpan)">
            <summary>
            Waits for voltage curve run finished.
            </summary>
            <param name="timeout">The wait timeout parameter.</param>
            <returns>True if waiting for running finisched with no timeout</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.AbortWaitingRunningVoltageCurveFinished">
            <summary>
            Aborts waiting for voltage curve run finished.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.GetIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.NiDaq.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the NADAQ parameters.
            </summary>
            <param name="parameters">Parameters from the testbench.xml file.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen">
            <summary>
            Agilent / Schaffner power supply.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.InitialVoltage2">
            <summary>
            Initial output voltage of Canal 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.MaxVoltage2">
            <summary>
            Maximum output voltage of Canal 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.Amplitude">
            <summary>
            Amplitude (Vpp) for Programming curve
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.VoltageGain">
            <summary>
            Voltage gain.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OutputLoad">
            <summary>
            Output termination.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.VoltageGain2">
            <summary>
            Voltage gain channel 2.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OutputLoad2">
            <summary>
            Output termination channel 2.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnInit">
            <summary>
            Internal init
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.SetAmplitude">
            <summary>
            Sets the amplitude.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnRequestMeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.GetScaledValueBytes(System.Double,System.Double)">
            <summary>
            Get short scaled value of voltage as bytes array
            </summary>
            <param name="voltage">The voltage</param>
            <param name="factor">Scaled factor</param>
            <returns>Scaled value as byte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.RunProgrammingVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            programming the voltage curve..
            </summary>
            <param name="points">Curve points</param>
            <returns>
            Returns <c>true</c> if running was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.curveFinished">
            <summary>
            End of voltage curve run.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnStartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnStopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.GetValidVoltage(System.Double)">
            <summary>
            Validate voltage range (0V .. MaxVoltage) 
            </summary>
            <param name="voltage">the voltage to check</param>
            <returns>the validated voltage</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.ConvertVoltage(System.Double)">
            <summary>
            Converts a voltage value to a Agilent level.
            </summary>
            <param name="voltage">Voltage value</param>
            <returns>converted value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the Agilent parameters.
            </summary>
            <param name="parameters">Parameters from the testbench.xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.AgilentWavGen.OnRequestErrors">
            <summary>
            On request error on device
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.PowerSupply">
            <summary>
            Base class for power supply.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MAX_VOLTAGE">
            <summary>
            Standard max. voltage
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.INIT_VOLTAGE">
            <summary>
            Standard initial voltage
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MAX_CURRENT">
            <summary>
            Standard max. current
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.InitialVoltage">
            <summary>
            Initial output voltage.
            </summary>
            <remarks>
            The parameter "InitialVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MaxVoltage">
            <summary>
            Maximum output voltage.
            </summary>
            <remarks>
            The parameter "MaxVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MaxCurrent">
            <summary>
            Gets the max current of the device.
            </summary>
            <value>The max current of the device.</value>
            <remarks>
            The parameter "MaxCurrent" will change this value.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.InitPresetVoltage">
            <summary>
            Inits preset voltage
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.CurrentOffset">
            <summary>
            Current offset value
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.Specification">
            <summary>
            Device specification
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.DeviceIdentification">
            <summary>
            Get device identification string.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestDeviceIdentification">
            <summary>
            Requests device identification
            </summary>
            <returns>Device identification</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.PowerOn">
            <summary>
            Switches the power supply on (Key STB/EXE).
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.PowerOff">
            <summary>
            Switches the power supply off (Key STB/EXE).
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.IsPowerOn">
            <summary>
            Gets a value indicating whether power is on.
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.SenseOn">
            <summary>
            Switches the sense mode on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.SenseOff">
            <summary>
            Switches the sense mode off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnSetSense(System.Boolean)">
            <summary>
            Sets Sense
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.IsSenseOn">
            <summary>
            Gets a value indicating whether sense mode is on.
            </summary>
            <returns>Returns <c>true</c> if sense mode is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestIsSenseOn">
            <summary>
            On requesting IsSenseOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.CapacitorOn">
            <summary>
            Switches the capacitor on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.CapacitorOff">
            <summary>
            Switches the capacitor off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnSetCapacitor(System.Boolean)">
            <summary>
            Sets Capacitor
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.IsCapacitorOn">
            <summary>
            Gets a value indicating whether capacitor is on.
            </summary>
            <returns>Returns <c>true</c> if capacitor is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestIsCapacitorOn">
            <summary>
            On requesting IsCapacitorOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.Reset">
            <summary>
            Resets the power supply.
            </summary>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.PresetVoltage">
            <summary>
            Get / set preset output voltage (in Volts, limited to maxVoltage).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.InternalOnSetPresetVoltage(System.Nullable{System.Double})">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="value">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestMeasuredVoltage">
            <summary>
            Get Measured Voltage (in Volt).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.PresetCurrent">
            <summary>
            Get / set preset output current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.InternalOnSetPresetCurrent(System.Nullable{System.Double})">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="value">Current to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestPresetCurrent">
            <summary>
            Get preset Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnSetPresetCurrent(System.Double)">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="current">Current to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.MeasuredCurrent">
            <summary>
            Get measured current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestMeasuredCurrent">
            <summary>
            Get measured Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.VoltageCurve">
            <summary>
            Gets the current voltage curve
            </summary>
            <value>The current voltage curve. null is no curve is programmed</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.VoltageCurveProgrammingJob">
            <summary>
            Voltage curve programming job
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.Progress">
            <summary>
            Programming progress
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramVoltageFile(System.String,System.String,ET.FW.Hal.Instruments.PowerSupply.FileFormat,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">Curve name</param>
            <param name="filename">Cranking curve file</param>
            <param name="format">File format</param>
            <param name="current">The current</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Returns progress job if start was successful, otherwise null.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.StartProgrammingVoltageCurve">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.StopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.LoadVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Loads voltage curve
            </summary>
            <param name="parameters">Programming parameters</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramScpVoltageFile(System.String)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramScpVoltageFile(System.String,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Returns progress job if start was successful, otherwise null.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramToeVoltageFile(System.String,System.Double)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramToeVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramOtherVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ProgramVoltageCurve(System.String,System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="curvename">curve name</param>
            <param name="voltagePoints">The voltage curve.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.StartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnStartRunningVoltageCurve">
            <summary>
            On start running voltage curve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.StopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnStopRunningVoltageCurve">
            <summary>
            On stop running voltage curve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.IsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <value><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.WaitRunningVoltageCurveFinished(System.TimeSpan)">
            <summary>
            Waits for voltage curve run finished.
            </summary>
            <param name="timeout">The wait timeout parameter.</param>
            <returns>True if waiting for running finisched with no timeout</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.AbortWaitingRunningVoltageCurveFinished">
            <summary>
            Aborts waiting for voltage curve run finished.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.GetIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.OnClearErrors">
            <summary>
            Clear all errors on device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the Toellner parameters.
            </summary>
            <param name="parameters">Parameters from the testbench.xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ParseState(System.String)">
            <summary>
            Parses a state response.
            </summary>
            <param name="response">The response from the device.</param>
            <returns>Returns <c>true</c> if state is 1, <c>false</c> if state is 0. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.PowerSupply.ParseDouble(System.String)">
            <summary>
            Parses the response as double.
            </summary>
            <param name="response">The response from the device.</param>
            <returns>Returns the value in Volts/Ampere or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters">
            <summary>
            Programming parameters
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.Curvename">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.Filename">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.Format">
            <summary>
            File format
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.Current">
            <summary>
            Programming current 
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.EndVoltage">
            <summary>
            End voltage
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters.VoltagePoints">
            <summary>
            Voltage points
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.FileFormat">
            <summary>
            File format
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.FileFormat.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.FileFormat.Scp">
            <summary>
            Scp format
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.FileFormat.Toe">
            <summary>
            Toe format
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply">
            <summary>
            Common Power Supply API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.Specification">
            <summary>
            Device specification
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.DeviceIdentification">
            <summary>
            Get device identification string.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.PowerOn">
            <summary>
            Switches the power supply on (Key STB/EXE).
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.PowerOff">
            <summary>
            Switches the power supply off (Key STB/EXE).
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.IsPowerOn">
            <summary>
            Gets a value indicating whether power is on.
            </summary>
            <value><c>true</c> if power is on; otherwise, <c>false</c>. <c>null</c> if an error occurred.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.SenseOn">
            <summary>
            Switches the sense mode on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.SenseOff">
            <summary>
            Switches the sense mode off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.IsSenseOn">
            <summary>
            Gets a value indicating whether sense mode is on.
            </summary>
            <returns>Returns <c>true</c> if sense mode is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.CapacitorOn">
            <summary>
            Switches the capacitor on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.CapacitorOff">
            <summary>
            Switches the capacitor off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.IsCapacitorOn">
            <summary>
            Gets a value indicating whether capacitor is on.
            </summary>
            <returns>Returns <c>true</c> if capacitor is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.Reset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.MaxVoltage">
            <summary>
            Maximum output voltage.
            </summary>
            <remarks>
            The parameter "MaxVoltage" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.MaxCurrent">
            <summary>
            Gets the max current of the device.
            </summary>
            <value>The max current of the device.</value>
            <remarks>
            The parameter "MaxCurrent" will change this value.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.PresetVoltage">
            <summary>
            Get / set preset output voltage (in Volts).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.MeasuredVoltage">
            <summary>
            Get measured voltage (in volt).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.PresetCurrent">
            <summary>
            Get / set preset output current (in ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.MeasuredCurrent">
            <summary>
            Get measured current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramScpVoltageFile(System.String)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramScpVoltageFile(System.String,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="scpFilename">Cranking curve file in scp format.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramToeVoltageFile(System.String,System.Double)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramToeVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="toeFilename">Cranking curve file in toe format.</param>
            <param name="current">The current.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            Toe-files are text files containing a voltage point in each line (duration in seconds and voltage in Volts), e.g. :
            0.004000000000	12.500000000
            0.001200000000	10.000000000
            0.002200000000	10.120000000
            ...
            Because the current is not contained in TOE-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramOtherVoltageFile(System.String,System.Double,System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve. It tries to determine the type of the voltage curve toe/scp
            </summary>
            <param name="filename">Cranking curve file in scp/toe format.</param>
            <param name="current">The current. Only used for TOE-Files See also remarks.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
            <remarks>
            if the function detects a toe-format, the value of parameter 'current' is used.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.ProgramVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point},System.Nullable{System.Double})">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="voltagePoints">The voltage curve.</param>
            <param name="endVoltage">The end voltage.</param>
            <returns>Job to monitor the async programming.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.StartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Job which starts running voltage curve. If start is not successful, it returns null</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.StopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.IsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <value><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.WaitRunningVoltageCurveFinished(System.TimeSpan)">
            <summary>
            Waits for voltage curve run finished.
            </summary>
            <param name="timeout">The wait timeout parameter.</param>
            <returns>True if waiting for running finisched with no timeout</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.AbortWaitingRunningVoltageCurveFinished">
            <summary>
            Aborts waiting for voltage curve run finished.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerSupply.IPowerSupply.VoltageCurve">
            <summary>
            Gets the current voltage curve
            </summary>
            <value>The current voltage curve. null is no curve is programmed</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.Schaffner">
            <summary>
            Schaffner power supply.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerSupply.Schaffner.Gain">
            <summary>
            Gain value.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnInit">
            <summary>
            Internal init
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnSetPresetCurrent(System.Double)">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="current">Current to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.RunProgrammingVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            programming the voltage curve..
            </summary>
            <param name="points">Curve points</param>
            <returns>
            Returns <c>true</c> if running was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnStartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnStopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Schaffner.ConvertVoltage(System.Double)">
            <summary>
            Converts a voltage value into the Schaffner internal format
            </summary>
            <param name="voltage">Voltage value</param>
            <returns>converted value</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.Toellner">
            <summary>
            Toellner power supply.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnInit">
            <summary>
            Internal init
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnSetPower(System.Boolean)">
            <summary>
            Sets Power
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestIsPowerOn">
            <summary>
            On requesting IsPowerOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnSetSense(System.Boolean)">
            <summary>
            Sets Sense
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestIsSenseOn">
            <summary>
            On requesting IsSenseOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnSetCapacitor(System.Boolean)">
            <summary>
            Sets Capacitor
            </summary>
            <param name="on">True if on, otherwise off</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestIsCapacitorOn">
            <summary>
            On requesting IsCapacitorOn
            </summary>
            <returns>Returns <c>true</c> if power is on, otherwise <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestPresetVoltage">
            <summary>
            Get preset output voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnSetPresetVoltage(System.Double)">
            <summary>
            Set preset output voltage (in Volts).
            </summary>
            <param name="voltage">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestMeasuredVoltage">
            <summary>
            Get measured voltage (in Volts).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestPresetCurrent">
            <summary>
            Get preset Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnSetPresetCurrent(System.Double)">
            <summary>
            Set preset Current (in Ampere).
            </summary>
            <param name="current">Current to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestMeasuredCurrent">
            <summary>
            Get measured Current (in Ampere).
            </summary>
            <returns>Returns <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnStartProgrammingVoltageCurve(ET.FW.Hal.Instruments.PowerSupply.ProgrammingParameters)">
            <summary>
            Starts programming of the given voltage curve.
            </summary>
            <param name="parameters">Programming parameters</param>
            <returns>
            Returns <c>true</c> if start was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.RunProgrammingVoltageCurve(System.Collections.Generic.IList{ET.FW.Hal.Instruments.Curve.Point})">
            <summary>
            programming the voltage curve..
            </summary>
            <param name="points">Curve points</param>
            <returns>
            Returns <c>true</c> if running was successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnStopProgrammingVoltageCurve">
            <summary>
            Stops programming of the voltage curve.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnStartRunningVoltageCurve">
            <summary>
            Starts the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnInitForVoltageCurve">
            <summary>
            OnInit ForVoltageCurve
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnStopRunningVoltageCurve">
            <summary>
            Stops the execution of the programmed voltage curve.
            </summary>
            <returns>Returns <c>true</c> if start was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestIsVoltageCurveRunning">
            <summary>
            Gets a value indicating whether a voltage curve is currently running.
            </summary>
            <returns><c>true</c> if voltage curve is running; otherwise, <c>false</c>. <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.Toellner.OnRequestErrors">
            <summary>
            On request error on device
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerSupply.WaitForValueJob`1">
            <summary>
            Wait for job implementation.
            </summary>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.WaitForValueJob`1.#ctor(System.Func{`0},`0,System.TimeSpan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="getValue">Get value</param>
            <param name="value">The value to wait for</param>
            <param name="timeout">Wait timeout.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.WaitForValueJob`1.#ctor(System.Func{`0},`0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="getValue">Get value</param>
            <param name="value">The value to wait for</param>
            <param name="pollingTimeSpan">Time span for pollinf getValue</param>
            <param name="timeout">Wait timeout.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerSupply.WaitForValueJob`1.Execute">
            <summary>
            Start Job Internal
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Relay32RO">
            <summary>
            Relay box 32RO.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Relay32RO.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Relay.IRelayMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.Reset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.Switch(System.Int32,System.Boolean)">
            <summary>
            Switch relay to the state
            </summary>
            <param name="relayNumber">Number of relay</param>
            <param name="state">State of relay</param>
            <returns>state of relay. null if not available</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.Switch(ET.FW.Hal.Relay.RelayData[])">
            <summary>
            Switch relays
            </summary>
            <param name="relayDatas">Relays to switch</param>
            <returns>Switched relays. Null if not available</returns>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Relay32RO.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.GetRelayState(System.Int32)">
            <summary>
            Get relay state
            </summary>
            <param name="relayNumber">Relay number</param>
            <returns>State of relay</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Relay32RO.GetRelayStates(System.Int32[])">
            <summary>
            Get relay states
            </summary>
            <param name="relayNumbers">Relays to get state</param>
            <returns>State of relays</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IRelay">
            <summary>
            Common Relay API definition.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRelay.Reset">
            <summary>
            Resets the relay.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRelay.Switch(System.Int32,System.Boolean)">
            <summary>
            Switch relay to the state
            </summary>
            <param name="relayNumber">Number of relay</param>
            <param name="state">relay states</param>
            <returns>relay number and bool state</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRelay.Switch(ET.FW.Hal.Relay.RelayData[])">
            <summary>
            Switch relays
            </summary>
            <param name="relayDatas">Relays to switch</param>
            <returns>array of relay datas</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRelay.GetRelayState(System.Int32)">
            <summary>
            Gets relay state
            </summary>
            <param name="relayNumber">Number of relay</param>
            <returns>State of relay</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRelay.GetRelayStates(System.Int32[])">
            <summary>
            Gets relay states
            </summary>
            <param name="relayNumbers">Numbers of relays</param>
            <returns>Relay datas</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.EclTestUnitTimebase">
            <summary>
            Different timebase values used by EclTestUnit.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnitTimebase.T1us">
            <summary>
            Timebase 0.001ms, max duration 16s.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnitTimebase.T10us">
            <summary>
            Timebase 0.01ms, max duration 2m40s.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnitTimebase.T100us">
            <summary>
            Timebase 0.1ms, max duration 26m40s.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnitTimebase.T200us">
            <summary>
            Timebase 0.2ms, max duration 53m20s.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnitTimebase.T400us">
            <summary>
            Timebase 0.4ms, max duration 1h46m40s.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IEclTestUnit">
            <summary>
            Common IEclTestUnit API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.DeviceIdentification">
            <summary>
            Get device identification.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.StartInfo">
            <summary>
            Signals the start info event.
            </summary>
            <value>Changes to <c>true</c> to signal start info.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.GenerateStart">
            <summary>
            Signals the start of pulse generation.
            </summary>
            <value>Changes to <c>true</c> to signal start of generating pulse.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.GenerateEnd">
            <summary>
            Signals the end of pulse generation.
            </summary>
            <value>Changes to <c>true</c> to signal end of generating pulse.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.MonitorEnd">
            <summary>
            Signals the end of pulse monitoring.
            </summary>
            <value>Changes to <c>true</c> to signal end of monitoring.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.PulseLength">
            <summary>
            Gets the length of the pulse.
            </summary>
            <value>The length of the pulse according to the timebase.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.LowDistance">
            <summary>
            The measured distance of a falling edge.
            </summary>
            <value>The distance according to the timebase.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IEclTestUnit.HighDistance">
            <summary>
            The measured distance of a rising edge.
            </summary>
            <value>The distance according to the timebase.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.SetTimebase(ET.FW.Hal.Instruments.EclTestUnitTimebase)">
            <summary>
            Sets the timebase.
            </summary>
            <param name="timebase">The timebase to use.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.Reset">
            <summary>
            Resets the EclTestUnit.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.GeneratePulse(System.Int32)">
            <summary>
            Generates a pulse with the given length according to the timebase.
            </summary>
            <param name="duration">The duration of the pulse.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.MeasurePulse">
            <summary>
            Starts measuring the duration of a pulse.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The ObservableObject "PulseLength" will return the measured value.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.MeasureWithStartInfo">
            <summary>
            Measures the duration of the pulse. Signaling StartInfo event.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the StartInfo event.
            The ObservableObject "PulseLength" will return the measured value.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.GenerateAndMonitor(System.Int32,System.Int32)">
            <summary>
            Generates a pulse and starts monitoring following pulses.
            </summary>
            <param name="pulseDuration">Duration of the pulse.</param>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "GenerateStart" signals the start of the generated pulse.
            The ObservableObject "GenerateEnd" signals the end of the generated pulse.
            The ObservableObject "LowDistance" will return the measured distance of each falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each rising edge.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.MeasureExternalTriggered(System.Int32)">
            <summary>
            Waits for an external trigger pulse, measures the duration of the pulse and starts monitoring following pulses.
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the StartInfo event.
            The ObservableObject "PulseLength" will return the length of the trigger pulse.
            The ObservableObject "LowDistance" will return the measured distance of each falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each rising edge.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.GenerateExternalTriggered(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates pulses after the given amount of trigger pulses.
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <param name="triggerCount">The trigger count.</param>
            <param name="wait">The wait time before generating the pulses.</param>
            <param name="pause1">The pause before the pulse.</param>
            <param name="pulseLength">The length of the pulse.</param>
            <param name="pause2">The pause after the pulse.</param>
            <param name="repeat">The repeat factor of pause1/pulse/pause2.</param>
            <param name="pause3">The pause after repeating the pulse.</param>
            <param name="cycleCount">The amount of cycles of repeated pulses and pause3.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the first falling edge.
            The ObservableObject "PulseLength" will return the length of the first pulse.
            The ObservableObject "LowDistance" will return the measured distance of each following falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each following rising edge.
            The ObservableObject "GenerateStart" signals the beginning of generating pulses.
            The ObservableObject "GenerateEnd" signals the end of generating pulses.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IEclTestUnit.GeneratePulses(System.Int32,System.Int32[])">
            <summary>
            Generates pulses (optional after a trigger pulse).
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <param name="edgeDistance">Array of (even) edge distances.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The ObservableObject "LowDistance" will return the measured distance of each following falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each following rising edge.
            The ObservableObject "GenerateStart" signals the beginning of generating pulses.
            The ObservableObject "GenerateEnd" signals the end of generating pulses.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IGpsDevices">
            <summary>
            interface for gps simulation, the device shall use following informations
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IGpsDevices.StartDate">
            <summary>
            Start date of the gps simulator file
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IGpsDevices.Attenuation">
            <summary>
            attenuation of the gps simulator signal was set while record
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IGpsDevices.Duration">
            <summary>
            duration of the gps simulation
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IGpsDevices.Filename">
            <summary>
            filename of the gps simulation file
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IGpsDevices.StartSimulation(System.String)">
            <summary>
            starts simulation with given filename of simulation file
            </summary>
            <param name="filename">
            filename of the simulation file
            </param>
            <returns>
            true if started else false
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IGpsDevices.StopSimulation">
            <summary>
            stops simulation
            </summary>
            <returns>
            true if simulation stopped
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IGpsDevices.CleanUpSimulation">
            <summary>
            cleanup ole server process
            </summary>
            <returns>
            true if cleanup finished
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IKleer">
            <summary>
            Common Kleer API definition.
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.IKleer.StatusOk">
            <summary>
            Occurs when the Kleer device sends EVENT_STATUS_OK.
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.IKleer.GeneralError">
            <summary>
            Occurs when the Kleer device sends EVENT_GENERAL_ERROR.
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.IKleer.DataReceived">
            <summary>
            Occurs when the Kleer device received data.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.AudioLinkState">
            <summary>
            Gets the state of the audio link.
            </summary>
            <value>The state of the audio link.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.PositionID">
            <summary>
            Gets/Sets the PositionID of the Kleer Interface
            <remarks>
            for Kleer Sources this specifies the SourceID, for Kleer sinks the ID of the source that the sink shall connect to
            </remarks>
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SetPositionID(ET.FW.Hal.Instruments.KleerPositionID)">
            <summary>
            Sets the PositionID of the Kleer Interface
            </summary>
            <param name="posID">the new Position ID of the Kleer Interface</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.PowerMode">
            <summary>
            Gets the Power Mode of the Kleer Interface
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SwitchToOnMode">
            <summary>
            Switches the Kleer Device to On Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SwitchToOffMode">
            <summary>
            Switches the Kleer Device to Off Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SwitchToStandbyMode">
            <summary>
            Switches the Kleer Device to Standby Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.OperatingMode">
            <summary>
            Gets the Operating Mode of the Kleer Interface
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.StartAssociation(ET.FW.Hal.Instruments.KleerAssociationCodes)">
            <summary>
            Starts the association mode.
            </summary>
            <param name="associationMode">Association mode</param>
            <returns>
            <c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.StartEnrolment">
            <summary>
            Starts the enrolment mode.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.Configuration">
            <summary>
            What purpose is the Kleer device configured for
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.GetProtocolVersion">
            <summary>
            Gets the version of the ACSI protocol used by the Kleer device.
            </summary>
            <returns>
            The version string in the form "A.B.C.D", e.g. "1.0.0.0".
            The returned string will be empty if an error occurred.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.Reset(ET.FW.Hal.Instruments.KleerResetCodes)">
            <summary>
            Resets the Kleer device with the given reset code via software command.
            </summary>
            <param name="resetCode">The reset code to use.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendData(System.Byte[])">
            <summary>
            Sends the given data bytes.
            </summary>
            <param name="data">The data bytes.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>Only 1 to 3 data bytes supported.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKeyEvent(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,ET.FW.Hal.Instruments.KleerKeyEvent)">
            <summary>
            sends a single key Event
            </summary>
            <param name="receiver">the receiver of the key event</param>
            <param name="key">the code of the key to be transmittet</param>
            <param name="keyEvent">the event of the key to be transmittet</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.TimeSpan)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <param name="duration">how long shall the key be pressed <remarks>0 means the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks></param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.Int32)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <param name="duration">how long shall the key be pressed <remarks>0 means the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks></param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKeySimpleShortPress(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            Sends the given (short) key command.
            </summary>
            <param name="receiver">The position information.</param>
            <param name="keyCode">The key to send.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SendKeySimpleLongPress(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            Sends the given (long) key command.
            </summary>
            <param name="receiver">The position information.</param>
            <param name="keyCode">The key to send.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.TurnWheel(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerTurnMode,System.Byte)">
            <summary>
            Simulates the wheel of the KleerRemoteControl being turned.
            </summary>
            <param name="receiver">The position information</param>
            <param name="turnMode">The mode how to turn the wheel</param>
            <param name="clicks">how far shall be turned, i.e. how many clicks. The value must not be greater than 63</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IKleer.ActiveKeyPresses">
            <summary>
            List of all currently active keypresses
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.SetTextIdentifier(System.String)">
            <summary>
            Sets the identifier of the Kleer device.
            </summary>
            <param name="identifier">The new identifier.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IKleer.RAMAccessRead(System.Int16)">
            <summary>
            Reads out the content of a RAM address
            </summary>
            <param name="address">the RAM address to be read out</param>
            <returns>content of a RAM address</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerKeyPress">
            <summary>
            helper class for keeping track of all ongoing key presses of a Kleer Interface
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerKeyPress.Key">
            <summary>
            the key of the key press
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerKeyPress.Receiver">
            <summary>
            the receiver of the key press
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerKeyPress.Duration">
            <summary>
            the duration of the key press
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerKeyPress.#ctor(ET.FW.Hal.Instruments.KleerKeyCode,ET.FW.Hal.Instruments.KleerRoutingID,System.Int32)">
            <summary>
            constructor of the class
            </summary>
            <param name="key">Kleer key code</param>
            <param name="receiver">Routing-ID of receiver</param>
            <param name="duration">duration in ms</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AudioLink">
            <summary>
            Defines the different audio link states.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AudioLink.Undefined">
            <summary>
            Audio link state unknown.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AudioLink.Down">
            <summary>
            Audio link is down.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AudioLink.Up">
            <summary>
            Audio link is up.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PacketTypeIdentifier">
            <summary>
            ACSI packet types.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PacketTypeIdentifier.Ack">
            <summary>
            Acknowledge  packet.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PacketTypeIdentifier.Command">
            <summary>
            Command packet.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PacketTypeIdentifier.Event">
            <summary>
            Event packet.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PacketTypeIdentifier.Data">
            <summary>
            Transparent data packet.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PacketTypeIdentifier.RandomMemoryAccess">
            <summary>
            Random memory access packet.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.ErrorCode">
            <summary>
            ACSI error codes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidPacketType">
            <summary>
            Invalid Packet Type
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidCommandCode">
            <summary>
            Invalid Command Code
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidCommandParams">
            <summary>
            Invalid Command Params
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidPacketSize">
            <summary>
            Invalid Packet Size
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidParamSize">
            <summary>
            Invalid Param Size
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.CrcFail">
            <summary>
            Crc Fail
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.DuplicatedSN">
            <summary>
            Duplicated SN
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.BufferUnavailable">
            <summary>
            Buffer Unavailable
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.InvalidVersion">
            <summary>
            Invalid Version
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.AudioBufferOverflow">
            <summary>
            Audio Buffer Overflow
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.ErrorCode.AudioBufferUnderflow">
            <summary>
            Audio Buffer Underflow
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.EventCode">
            <summary>
            ACSI event codes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.ResetOK">
            <summary>
            Reset successfully performed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.StatusOK">
            <summary>
            Periodically triggered STATUS_OK event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.GeneralError">
            <summary>
            Error occurred.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.LinkUp">
            <summary>
            Audio link turned on.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.LinkDown">
            <summary>
            Audio link turned off.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.ModeChange">
            <summary>
            Operating mode changed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.UnassocUidFound">
            <summary>
            UID is not in the association table.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.Key">
            <summary>
            Key pressed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.VolumeControl">
            <summary>
            Volume changed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.VolumeControlRequest">
            <summary>
            Request for volume change.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.DataReceived">
            <summary>
            Data packet received.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.DataTransmitted">
            <summary>
            Data packet transmitted.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EventCode.DbAccessComplete">
            <summary>
            Database access request completed.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.AckCode">
            <summary>
            ACSI acknowledge codes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AckCode.Success">
            <summary>
            Command successfully executed.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AckCode.Failed">
            <summary>
            Error executing command.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AckCode.TdtSuccess">
            <summary>
            Transparent Data Packet successfully transmitted.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.AckCode.TdtFailed">
            <summary>
            Transparent Data Packet transmission failed.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerPowerMode">
            <summary>
            power mode of the Kleer interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPowerMode.Undefined">
            <summary>
            Device mode unknown.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPowerMode.Off">
            <summary>
            Off mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPowerMode.Standby">
            <summary>
            Standby mode.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPowerMode.On">
            <summary>
            On mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerOperatingMode">
            <summary>
            operating mode of the Kleer interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerOperatingMode.Undefined">
            <summary>
            Operating Mode is unknown or KleerPowerMode is != On
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerOperatingMode.Association">
            <summary>
            Kleer interface is in Association Mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerOperatingMode.Enrolment">
            <summary>
            Kleer interface is in Enrolment Mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerOperatingMode.Data">
            <summary>
            Kleer interface is in Data Mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerModeChangeParams">
            <summary>
            meaning of the parameter of the Kleer ModeChangeEvent
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerModeChangeParams.Association">
            <summary>
            Association mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerModeChangeParams.Enrolment">
            <summary>
            Enrolment mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerModeChangeParams.Data">
            <summary>
            Data mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerModeChangeParams.Standby">
            <summary>
            Standby mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerPositionID">
            <summary>
            the Source ID of the Kleer interface
            <remarks>
            for Kleer sources this mean the Source ID, for Kleer sinks the ID of the source, with which the sink shall connect
            </remarks>
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPositionID.HUSplitview">
            <summary>
            HU Splitview
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPositionID.none">
            <summary>
            HU (does not exist)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPositionID.FULeft">
            <summary>
            FU Left
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerPositionID.FURight">
            <summary>
            FU Right
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerRoutingID">
            <summary>
            the possible receivers for Kleer remote control commands
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerRoutingID.HUSplitview">
            <summary>
            HU Splitview
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerRoutingID.HU">
            <summary>
            Head unit
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerRoutingID.FULeft">
            <summary>
            FU Left
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerRoutingID.FURight">
            <summary>
            FU Right
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerConfiguration">
            <summary>
            What the Kleer device is configured for in its firmware
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerConfiguration.Undefined">
            <summary>
            Kleer Device configuration unknown
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerConfiguration.AudioSource">
            <summary>
            Audio Source
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerConfiguration.AudioSink">
            <summary>
            Audio Sink
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerConfiguration.RemoteControl">
            <summary>
            Remote Control
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerKeyEvent">
            <summary>
            The Key Events supported by the Kleer Interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyEvent.KeyPress">
            <summary>
            key press
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyEvent.KeyHeldDown">
            <summary>
            key (still) held down
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyEvent.KeyRelease">
            <summary>
            key release
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerResetCodes">
            <summary>
            Reset Options for the Kleer Interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerResetCodes.RebootFromRam">
            <summary>
            Reboot from RAM
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerResetCodes.RebootFromRom">
            <summary>
            Reboot from ROM
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerAssociationCodes">
            <summary>
            Associaiton Mode Options for the Kleer Interface
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerAssociationCodes.AutonomousAssociationMode">
            <summary>
            Autonomous Association Mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerAssociationCodes.AssociationScanMode">
            <summary>
            Association Scan Mode
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerTurnMode">
            <summary>
            Kleer Turn Modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerTurnMode.RightTicks">
            <summary>
            Key 'TickRight'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerTurnMode.LeftTicks">
            <summary>
            Key 'TickLeft'.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerKeyCode">
            <summary>
            Kleer key codes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key0">
            <summary>
            Key '0'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key1">
            <summary>
            Key '1'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key2">
            <summary>
            Key '2'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key3">
            <summary>
            Key '3'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key4">
            <summary>
            Key '4'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key5">
            <summary>
            Key '5'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key6">
            <summary>
            Key '6'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key7">
            <summary>
            Key '7'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key8">
            <summary>
            Key '8'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.Key9">
            <summary>
            Key '9'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyStar">
            <summary>
            Key '*'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyPound">
            <summary>
            Key '#'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyOnOff">
            <summary>
            Key 'ON/OFF'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyUp">
            <summary>
            Key 'UP'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyDown">
            <summary>
            Key 'DOWN'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyLeft">
            <summary>
            Key 'LEFT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyRight">
            <summary>
            Key 'RIGHT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyOk">
            <summary>
            Key 'OK'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyTurnRight">
            <summary>
            Key 'TURN RIGHT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyTurnLeft">
            <summary>
            Key 'TURN LEFT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyRadio">
            <summary>
            Key 'RADIO'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyNavi">
            <summary>
            Key 'NAVI'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyBack">
            <summary>
            Key 'BACK'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyMedia">
            <summary>
            Key 'MEDIA'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyCar">
            <summary>
            Key 'CAR'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyInternet">
            <summary>
            Key 'INTERNET'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyPlayPause">
            <summary>
            Key 'PLAY/PAUSE'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyMute">
            <summary>
            Key 'MUTE'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyVolDown">
            <summary>
            Key 'VOL-'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyVolUp">
            <summary>
            Key 'VOL+'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyPrevious">
            <summary>
            Key 'PREVIOUS'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyNext">
            <summary>
            Key 'NEXT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyTelSnd">
            <summary>
            Key 'TEL Send'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerKeyCode.KeyTelEnd">
            <summary>
            Key 'TEL End'.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.ErrorEventArgs">
            <summary>
            Delivers an error code.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ErrorEventArgs.#ctor(ET.FW.Hal.Instruments.ErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.ErrorEventArgs"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ErrorEventArgs.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.DataReceivedArgs">
            <summary>
            Delivers a data packet.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.DataReceivedArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.DataReceivedArgs"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.DataReceivedArgs.Data">
            <summary>
            Gets or sets the data content.
            </summary>
            <value>The data bytes.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IMassStorage">
            <summary>
            Common Mass-Storage API definition.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMassStorage.MountImage(System.String)">
            <summary>
            Mount image
            </summary>
            <param name="fileName">Filename of image</param>
            <returns>Error code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMassStorage.UnmountImage">
            <summary>
            Unmount image
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IMASS_STORAGE_ERROR_CODES">
            <summary>
            error codes for Mass Storage instruments
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IMASS_STORAGE_ERROR_CODES.NO_ERROR">
            <summary>
            no error 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IMASS_STORAGE_ERROR_CODES.NOT_INITIALIZED">
            <summary>
            instrument not initialized
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IMASS_STORAGE_ERROR_CODES.IMAGE_NOT_FOUND">
            <summary>
            image file to be mount was not found
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IMASS_STORAGE_ERROR_CODES.UNKNOWN_ERROR">
            <summary>
            an unknown error occurred
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IMostMatrix">
            <summary>
            Common MOST-Matrix API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IMostMatrix.FirstPortNumber">
            <summary>
            Gets or sets the first port number.
            </summary>
            <value>The first port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IMostMatrix.LastPortNumber">
            <summary>
            Gets or sets the last port number.
            </summary>
            <value>The last port number.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Reset">
            <summary>
            Resets the MostMatrix.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.TestModeOn(System.Int32)">
            <summary>
            Starts the test mode.
            </summary>
            <param name="port">The port to test.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.TestModeOn(System.String)">
            <summary>
            Starts the test mode.
            </summary>
            <param name="device">The name of the device to test.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.TestModeOff">
            <summary>
            Stops the test mode.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.ByPass(System.Int32)">
            <summary>
            Bypass the given port by removing its connections and direct connecting of previous and following ring port.
            </summary>
            <param name="port">The port to bypass.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.ByPass(System.String)">
            <summary>
            Bypass the given device by removing its connections and direct connecting of previous and following ring device.
            </summary>
            <param name="device">The name of the device to bypass.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.PortFromDevice(System.String)">
            <summary>
            Get matrix port of given the device.
            </summary>
            <param name="device">name of the MOST device</param>
            <returns>port number of the device or -1 if device is not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.DeviceFromPort(System.Int32)">
            <summary>
            Get device name at the given matrix port.
            </summary>
            <param name="port">The port number.</param>
            <returns>
            Name of the device, 'port' if no device is assigned to this port
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Connect(System.Collections.IList)">
            <summary>
            Connects the specified ports in list order.
            </summary>
            <param name="ports">Ordered list of ports (int) or devices (string).</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Connect(System.Int32,System.Int32)">
            <summary>
            Connects the specified ports.
            </summary>
            <param name="portIn">The input port.</param>
            <param name="portOut">The output port.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Connect(System.String,System.String)">
            <summary>
            Connects the specified devices.
            </summary>
            <param name="deviceIn">Name of the in-device.</param>
            <param name="deviceOut">Name of the out-device.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Burst(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Burst mode between 2 ports.
            </summary>
            <param name="portIn">Number of the in-port.</param>
            <param name="portOut">Number of the out-port.</param>
            <param name="disconnected">Disconnected timespan in 100us.</param>
            <param name="connected">Connected timespan in 100us.</param>
            <param name="connectCycles">Amount of disconnect/connect cycles.</param>
            <param name="pause">Pause timespan in 100us (connected).</param>
            <param name="repeatFactor">Repeat factor.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.Burst(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Burst mode between 2 devices.
            </summary>
            <param name="deviceIn">Name of the in-device.</param>
            <param name="deviceOut">Name of the out-device.</param>
            <param name="disconnected">Disconnected timespan in 100us.</param>
            <param name="connected">Connected timespan in 100us.</param>
            <param name="connectCycles">Amount of disconnect/connect cycles.</param>
            <param name="pause">Pause timespan in 100us (connected).</param>
            <param name="repeatFactor">Repeat factor.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.ConnectedPorts">
            <summary>
            Returns the currently connected ports.
            </summary>
            <returns>Dictionary of the connected ports</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IMostMatrix.ConnectedDevices">
            <summary>
            Returns the currently connected devices.
            </summary>
            <returns>Dictionary of the connected devices</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.ICurrentMeasurement">
            <summary>
            Common current measurement API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ICurrentMeasurement.CurrentMeasured">
            <summary>
            Get measured current (in Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ICurrentMeasurement.CurrentMeasuredMilliAmpere">
            <summary>
            Get measured current (in milli Ampere).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IMultimeter">
            <summary>
            Common multimeter API definition.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerMode">
            <summary>
            Enumeration of the different power modes of the PowerMatrix.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMode.Undefined">
            <summary>
            Power mode undefined.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMode.Const">
            <summary>
            Constant voltage.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMode.Var">
            <summary>
            Variable voltage.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMode.Off">
            <summary>
            No voltage.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IPowerMatrix">
            <summary>
            Common PowerMatrix API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IPowerMatrix.FirstPortNumber">
            <summary>
            Gets or sets the first port number.
            </summary>
            <value>The first port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IPowerMatrix.LastPortNumber">
            <summary>
            Gets or sets the last port number.
            </summary>
            <value>The last port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IPowerMatrix.FirstRelayPortNumber">
            <summary>
            Gets or sets the first relay port number.
            </summary>
            <value>The first relay port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IPowerMatrix.LastRelayPortNumber">
            <summary>
            Gets or sets the last relay port number.
            </summary>
            <value>The last relay port number.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.Reset">
            <summary>
            Resets the PowerMatrix.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPower(System.Int32,ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="mode">The new power mode.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.GetPower(System.Int32,ET.FW.Hal.Instruments.PowerMode@)">
            <summary>
            Gets the power mode of the given port.
            </summary>
            <param name="port">The port to read (1..12).</param>
            <param name="mode">The current power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPower(System.String,ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="mode">The new power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPowerAll(ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of all ports.
            </summary>
            <param name="mode">The new power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetWakeupLine(System.Int32,System.Boolean)">
            <summary>
            Sets the wakeup line of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New wakeup line state.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.GetWakeupLine(System.Int32,System.Boolean@)">
            <summary>
            Gets the wakeup line of the given port.
            </summary>
            <param name="port">The port to read (1..12).</param>
            <param name="on">Current wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetWakeupLine(System.String,System.Boolean)">
            <summary>
            Sets the wakeup line of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="on">New wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetWakeupLineAll(System.Boolean)">
            <summary>
            Sets the wakeup line of all ports.
            </summary>
            <param name="on">New wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPowerRelay(System.Int32,System.Boolean)">
            <summary>
            Sets the power relay of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New power relay state.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPowerRelay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the power relay of the given port.
            </summary>
            <param name="moduleIndex">Index of the relay module.</param>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPowerRelay(System.String,System.Boolean)">
            <summary>
            Sets the power relay of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.SetPowerRelay(System.Int32,System.String,System.Boolean)">
            <summary>
            Sets the power relay of the given device.
            </summary>
            <param name="moduleIndex">Index of the relay module.</param>
            <param name="device">The device to change.</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.PortFromDevice(System.String)">
            <summary>
            Get matrix port of the given device.
            </summary>
            <param name="device">name of the device</param>
            <returns>port number of the device or -1 if device is not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.DeviceFromPort(System.Int32)">
            <summary>
            Get device name at the given matrix port.
            </summary>
            <param name="port">The port number.</param>
            <returns>
            Name of the device, 'port' if no device is assigned to this port
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IPowerMatrix.PortFromRelay(System.String)">
            <summary>
            Get the relay port of the given relay name.
            </summary>
            <param name="relay">name of the relay</param>
            <returns>port number of the relay or -1 if relay is not found</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IRemote">
            <summary>
            Common remote control interface.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRemote.DriverVersion">
            <summary>
            Get the driver version as string (MajorVersion.MinorVersion.BuildVersion).
            </summary>
            <value>The driver version string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRemote.Reset">
            <summary>
            Resets the Remote.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRemote.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRemote.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.TimeSpan)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="duration">The duration</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRemote.PressKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Presses key 
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>The pressed keycode will be sent cyclic with 100ms timespan</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRemote.ReleasePressedKey">
            <summary>
            Releases last pressed key 
            </summary>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.RemoteKey">
            <summary>
            IR-Remote Keys.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Pound">
            <summary>
            Key '#'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Star">
            <summary>
            Key '*'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key0">
            <summary>
            Key '0'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key1">
            <summary>
            Key '1'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key2">
            <summary>
            Key '2'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key3">
            <summary>
            Key '3'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key4">
            <summary>
            Key '4'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key5">
            <summary>
            Key '5'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key6">
            <summary>
            Key '6'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key7">
            <summary>
            Key '7'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key8">
            <summary>
            Key '8'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Key9">
            <summary>
            Key '9'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Red">
            <summary>
            Key 'RED'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Green">
            <summary>
            Key 'Green'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Yellow">
            <summary>
            Key 'YELLOW'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Blue">
            <summary>
            Key 'BLUE'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Previous">
            <summary>
            Key 'PREVIOUS'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Next">
            <summary>
            Key 'NEXT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.VolumeDown">
            <summary>
            Key 'VOL-'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.VolumeUp">
            <summary>
            Key 'VOL+'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Back">
            <summary>
            Key 'BACK'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Mute">
            <summary>
            Key 'MUTE'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Down">
            <summary>
            Key 'DOWN'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.DownLeft">
            <summary>
            Key 'DOWNLEFT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.DownRight">
            <summary>
            Key 'DOWNRIGHT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Left">
            <summary>
            Key 'LEFT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Right">
            <summary>
            Key 'RIGHT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Up">
            <summary>
            Key 'UP'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.UpLeft">
            <summary>
            Key 'UPLEFT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.UpRight">
            <summary>
            Key 'UPRIGHT'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.Ok">
            <summary>
            Key 'OK (4-way)'.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteKey.OnOff">
            <summary>
            Key 'ON/OFF'.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.RemoteDestination">
            <summary>
            Destination enumeration.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteDestination.Driver">
            <summary>
            Driver seat.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteDestination.Passenger">
            <summary>
            Passenger seat.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteDestination.RearLeft">
            <summary>
            Rear left seat.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.RemoteDestination.RearRight">
            <summary>
            Rear right seat.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IRRemote">
            <summary>
            IR remote control.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRRemote.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRRemote.DeviceIndex">
            <summary>
            Index of this device.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IRRemote.usb2">
            <summary>
            usb2.dll support.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.#ctor(System.String,ET.FW.Core.Common.ParameterCollection)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
            <param name="parameter">Parameter from the xml file containing device/port assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the IRRemote parameters.
            </summary>
            <param name="parameters">Parameter from the xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRRemote.DriverVersion">
            <summary>
            Get the driver version as string (MajorVersion.MinorVersion.BuildVersion).
            </summary>
            <value>The driver version string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.Reset">
            <summary>
            Resets the Remote.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.GetKeyCode(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Get key code of remote code
            </summary>
            <param name="seat">The seat</param>
            <param name="key">Remote key</param>
            <returns>key code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.TimeSpan)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="duration">The duration</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>
            Each code will be sent n times with 100 ms delay. n = round(duration / 100)
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>
            Each code will be sent three times with 100 ms delay.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.PressKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Presses key 
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>The pressed keycode will be sent cyclic with 100ms timespan</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.ReleasePressedKey">
            <summary>
            Releases last pressed key 
            </summary>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SendJob(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.Int32)">
            <summary>
            Job to send key
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="count">counter to send</param>
            <returns>Send job</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.Int32)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="count">Counter to send key</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.SendCode(System.UInt32,System.Byte,System.Int32)">
            <summary>
            Sends the specified code via the IR-Remote-Control.
            </summary>
            <param name="customerCode">The code of the customer.</param>
            <param name="dataCode">The data code to send.</param>
            <param name="count">counter to sende the data code</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.Byte2Array(System.Byte,System.Byte[]@,System.Byte)">
            <summary>
            Byte to array
            </summary>
            <param name="value">byte value</param>
            <param name="buffer">byte buffer</param>
            <param name="startPos">start position to fill the buffer</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRRemote.DownloadHEXFile(System.String)">
            <summary>
            Download HEX File
            </summary>
            <param name="file">file name</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.ITemperatureChamber">
            <summary>
            Common TemperatureChamber API definition.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.SwitchOn">
            <summary>
            Switches the TemperatureChamber on.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.SwitchOff">
            <summary>
            Switches the TemperatureChamber off.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.SetTime(System.DateTime)">
            <summary>
            Sets the time.
            </summary>
            <param name="time">The new time.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.GetTime">
            <summary>
            Gets the time.
            </summary>
            <returns>The time of the TemperatureChamber or null in case of an error.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ITemperatureChamber.SetpointTemperature">
            <summary>
            Gets / sets the setpoint temperature.
            </summary>
            <value>The setpoint temperature or null in case of an error (get).</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ITemperatureChamber.CurrentTemperature1">
            <summary>
            Gets the current temperature of sensor 1.
            </summary>
            <value>The current temperature or null in case of an error.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ITemperatureChamber.CurrentTemperature2">
            <summary>
            Gets the current temperature of sensor 2.
            </summary>
            <value>The current temperature or null in case of an error.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.StartProgram(System.Int32)">
            <summary>
            Starts the program with the given number.
            </summary>
            <param name="programNumber">The number of the program to start (1 - 99).</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.ITemperatureChamber.StopProgram">
            <summary>
            Stops the currently runnning program.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.ITemperatureChamber.ProgramRunning">
            <summary>
            Gets the number of the running program.
            </summary>
            <value>
            1 - 99	Number of the running program.
            0			No program is running.
            null		Error occurred while retrieving the program number.
            </value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.SetupHandler">
            <summary>
            SetupHandler delegate
            </summary>
            <param name="setup">Setup parameters</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.EpHandler">
            <summary>
            EpHandler delegate
            </summary>
            <param name="epIdx">Ep index</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IUsbLowLevel">
            <summary>
            Common Usb Low Level API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IUsbLowLevel.MaxPacketSize">
            <summary>
            Max Packet Size
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.InitUsb">
            <summary>
            Init Usb
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.DeinitUsb">
            <summary>
            Deinit Usb
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.HandleInterrupt(System.UInt32,ET.FW.Hal.Instruments.SetupHandler,ET.FW.Hal.Instruments.EpHandler)">
            <summary>
            Hanlde Interrupt
            </summary>
            <param name="timeout">The timeout</param>
            <param name="setupHandler">setupHandler callback</param>
            <param name="epHandler">EpHandler callback</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpXSend(System.UInt32,System.Byte[])">
            <summary>
            send txBuf out using endpoint epNr
            </summary>
            <param name="epNr">Ep nummer</param>
            <param name="txBuf">Tx buffer</param>
            <returns>Send byte count</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpXRecv(System.UInt32,System.UInt32)">
            <summary>
            Reads data from an endpoint.
            </summary>
            <param name="logicalEp">specifies the endpoint to receive from</param>
            <param name="bytesRamining">tells how much bytes to receive</param>
            <returns>array of bytes read</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpCreate(System.UInt32,ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbEndpointDescriptor)">
            <summary>
            create endpoint epNr
            </summary>
            <param name="logicalEp">Logical Ep</param>
            <param name="epDesc">Ep description</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.ResetDataEp">
            <summary>
            Reset all endpoints
            - Effectively undoes EpCreate() for all endpoints
            - Deprograms all endpoints and endpoint state information
            - Expected to be called on initialization, USB reset and de-configuration        
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpIrqEnable">
            <summary>
            Enable interrupts for endpoints
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpXStart(System.UInt32)">
            <summary>
            Start EP transfer 
            This function will enable the interrupts for sending data 
            </summary>
            <param name="logicalEp">Logical Ep</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.EpXFinish(System.UInt32)">
            <summary>
            Check if transfer is complete and disable interrupts
            </summary>
            <param name="logicalEp">Logical Ep</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.StatusPhase">
            <summary>
            Status phase
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.Ep0Send(System.Byte[],System.Int32)">
            <summary>
            Transmit packets on Endpoint Zero (Control Read data phase)
            - The host may start the status phase ANY TIME after reading a data 
              phase packet
            - A Control Read status phase starts with an OUT token (See USB 8.5.3)
            - Status phase OUT tokens cause Endpoint Zero to switch to an OUT 
              Endpoint. Endpoint zero registers may therefore read back unexpected 
              OUT endpoint content!
            - Because of the status phase switch, after the final byte of the 
              Control Read is written to the endpoint (or validated, if not a Max 
              Packet Multiple) endpoint registers should not be written or read 
              (they may read confounding values!)
            </summary>
            <param name="txBuf">Tx buffer</param>
            <param name="bytesToSend">Bytes to send</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.SetAddress(System.UInt32)">
            <summary>
             Set address
            </summary>
            <param name="addr">The address</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.UsbEnable">
            <summary>
            Enables Usb 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.UsbDisable">
            <summary>
            Disables Usb
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.Reset">
            <summary>
            Reset device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.IRQDisable">
            <summary>
            Disables IRQ
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUsbLowLevel.IRQEnable">
            <summary>
            Enables IRQ
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IVoltageMeasurement">
            <summary>
            Common voltage measurement API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IVoltageMeasurement.VoltageMeasured">
            <summary>
            Get measured voltage (in Volt).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IVoltageMeasurement.VoltageMeasuredMilliVolt">
            <summary>
            Get measured voltage (in milli Volt).
            </summary>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerDevice.AcsiAck">
            <summary>
            ACSI acknowledge packet.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiAck"/> class.
            </summary>
            <param name="data">The data bytes.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.AcsiAckData">
            <summary>
            Gets the complete AcsiAck data.
            </summary>
            <value>The ACSI ack data.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.OriginalPti">
            <summary>
            Gets the original packet type ID of the acknowledged command.
            </summary>
            <value>The original pti.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.OriginalHandle">
            <summary>
            Gets the original handle of the acknowledged command.
            </summary>
            <value>The original handle.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.AckCode">
            <summary>
            Gets the ACK code.
            </summary>
            <value>The ack code.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.ParameterSize">
            <summary>
            Gets the size of the parameters in bytes.
            </summary>
            <value>The size of the parameters.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiAck.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent">
            <summary>
            ACSI event packet.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent"/> class.
            </summary>
            <param name="data">The data bytes.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent.AcsiEventData">
            <summary>
            Gets the complete ACSI event data.
            </summary>
            <value>The ACSI event data.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent.EventCode">
            <summary>
            Gets the event code.
            </summary>
            <value>The event code.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent.ParameterSize">
            <summary>
            Gets the size of the parameters in bytes.
            </summary>
            <value>The size of the parameters.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiEvent.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket">
            <summary>
            ACSI packet used by Kleer.
            </summary>
            <remarks>
            Byte
            -2					Sync-Word High Byte
            -1					Sync-Word Low Byte
            0					Packet Type ID
            1					Sequence Number
            2					Handle High Byte
            3					Handle Low Byte
            4					Packet Size High Byte (L, including the Common Header but not Syncword)
            5					Packet Size Low Byte (L, including the Common Header but not Syncword)
            6 ~ (L – 2)	Protocol Section
            L - 1				Checksum
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor(ET.FW.Hal.Instruments.PacketTypeIdentifier,System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket"/> class.
            </summary>
            <param name="pti">The packet type identifier.</param>
            <param name="protocolSection">The protocol section.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor(ET.FW.Hal.Instruments.PacketTypeIdentifier,System.Byte,System.UInt16,System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket"/> class.
            </summary>
            <param name="pti">The packet type identifier.</param>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="handle">The handle.</param>
            <param name="protocolSection">The protocol section.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor(ET.FW.Hal.Instruments.PacketTypeIdentifier,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket"/> class.
            </summary>
            <param name="pti">The packet type identifier.</param>
            <param name="protocolSection">The protocol section.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor(ET.FW.Hal.Instruments.PacketTypeIdentifier,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket"/> class.
            </summary>
            <param name="pti">The packet type identifier.</param>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="handle">The handle.</param>
            <param name="protocolSection">The protocol section.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.SyncWord">
            <summary>
            Gets the sync word (StartSequence) used by Kleer.
            </summary>
            <value>The sync word.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.AcsiPacketData">
            <summary>
            Gets the ACSI packet data (excluding the sync word, StartSequence will be added by transmitter).
            </summary>
            <value>The ACSI packet data.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.Pti">
            <summary>
            Gets or sets the packet type ID.
            </summary>
            <value>The packet type ID.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.ProtocolSection">
            <summary>
            Gets or sets the protocol section of the ACSI packet.
            </summary>
            <value>The protocol section.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.AcsiPacket.CalculateChecksum">
            <summary>
            Calculates the checksum.
            </summary>
            <returns>The Checksum</returns>
            <remarks>
            The checksum value is calculated by simply adding all the bytes of a packet, excluding the checksum byte.
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerDevice.Kleer">
            <summary>
            Kleer external device.
            </summary>
            <remarks>
            RS232 parameters :
            19200 Baud
            8 Databits
            parity none
            1 stop bit
            binary mode
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.DataTranferTimeout">
            <summary>
            Timeout for data transfer results in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.autoRepeatIntervall">
            <summary>
            the intervall with which key held down commands shall be sent in case of a key longpress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.AutoRepeatIntervall">
            <summary>
            the intervall with which key held down commands shall be sent in case of a key longpress
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.DurationKeyShortPress">
            <summary>
            the default duration of a key shortpress
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.DurationKeyLongPress">
            <summary>
            the default duration of a key longpress
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.Identifier">
            <summary>
            Identifier of the device (max 16 chars).
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.controlProtocol">
            <summary>
            controlProtocol is used for control line handling of the ComPort.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.Configuration">
            <summary>
            What purpose is the Kleer device configured for
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.AudioLinkState">
            <summary>
            Gets the state of the audio link.
            </summary>
            <value>The state of the audio link.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.ActiveKeyPresses">
            <summary>
            List of all currently active keypresses
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.#ctor(System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.#ctor(System.String,ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Creates new instance
            </summary>
            <param name="name">Configured device name</param>
            <param name="parameter">Parameter from the xml file containing device/port assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the Kleer parameters.
            </summary>
            <param name="parameters">Parameter from the xml file.</param>
            <remarks>
            NoInitialReset				bool		if true Reset() is NOT called in Init()
            Identifier					string	    identifier of the device (max 16 chars)
            Pid							byte		PID of the device
            Configuration               string      defines whether the Kleer device is used as AudioSource, AudioSink, RemoteControl, ...
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.Dispose">
            <summary>
            Dispose instrument Kleer
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.dataTransferSuccessful">
            <summary>
            contains the result of the last data transfer
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.acknowledge">
            <summary>
            Acknowledge flag, set in busProtocol_UplinkOutput.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitingForOnMode">
            <summary>
            Waiting for RESET_OK event.
            </summary>
            <remarks>
            Reset command is acknowledged by a RESET_OK event not by an ACK packet.
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitingForModeChangeToEnrolment">
            <summary>
            Waiting for ModeChange: Enrolment event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitingForModeChangeToStandby">
            <summary>
            Waiting for ModeChange: Standby event (Stanby = PowerDown)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitForResetOK">
            <summary>
            Wait-for-ResetOK event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.waitDataTransmitted">
            <summary>
            Wait-for-data-transmitted event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.packetReceived">
            <summary>
            Last received packet.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.ackReceived">
            <summary>
            Last received acknowledge.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.eventReceived">
            <summary>
            Last received event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.sequenceNumber">
            <summary>
            Sequence number for the ACSI packet (automatically incremented).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Messaging.IBinaryMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.ProcessAcknowledge(ET.FW.Hal.Instruments.KleerDevice.AcsiAck)">
            <summary>
            Processes Acknowledge
            </summary>
            <param name="rxAck">ACSI acknowledge packet.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.ProcessEvent(ET.FW.Hal.Instruments.KleerDevice.AcsiEvent,System.DateTime)">
            <summary>
            Processes Event
            </summary>
            <param name="processesEventReceived">received event</param>
            <param name="timestamp">received timestamp</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.Available">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.Core.Hal.IExternalDevice"/> is available.
            </summary>
            <value><c>true</c> if available; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:ET.FW.Hal.Instruments.KleerDevice.Kleer.StatusOk">
            <summary>
            Occurs when the Kleer device sends EVENT_STATUS_OK.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.OnStatusOk">
            <summary>
            Raises Status OK event
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.KleerDevice.Kleer.GeneralError">
            <summary>
            Occurs when the Kleer device sends EVENT_GENERAL_ERROR.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.OnGeneralError(ET.FW.Hal.Instruments.ErrorCode)">
            <summary>
            Raises general error event
            </summary>
            <param name="errorCode">error code</param>
        </member>
        <member name="E:ET.FW.Hal.Instruments.KleerDevice.Kleer.DataReceived">
            <summary>
            Occurs when the Kleer device received data.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.OnDataReceived(ET.FW.Hal.Instruments.KleerDevice.AcsiEvent)">
            <summary>
            Raises data received event
            </summary>
            <param name="eventDataReceived">received event</param>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.sendLock">
            <summary>
            lock object needed for the Send method
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.Send(ET.FW.Hal.Instruments.KleerDevice.AcsiPacket)">
            <summary>
            Sends the specified packet.
            </summary>
            <param name="packet">The ACSI packet.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.sendDataLock">
            <summary>
            lock object needed for the SendData method
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendData(System.Byte[])">
            <summary>
            Sends the given data bytes.
            </summary>
            <param name="data">The data bytes.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>Only 1 to 3 data bytes supported.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.PositionID">
            <summary>
            Gets/Sets the PositionID of the Kleer Interface
            <remarks>
            for Kleer Sources this specifies the SourceID, for Kleer sinks the ID of the source that the sink shall connect to
            </remarks>
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SetPositionIDInternal(ET.FW.Hal.Instruments.KleerPositionID)">
            <summary>
            Sets the PositionID of the Kleer Interface
            </summary>
            <param name="posID">the new Position ID of the Kleer Interface</param>
            <remarks>
            setting the PositionID is only possible while PowerMode is On
            </remarks>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SetPositionID(ET.FW.Hal.Instruments.KleerPositionID)">
            <summary>
            Sets the PositionID of the Kleer Interface
            </summary>
            <param name="posID">the new Position ID of the Kleer Interface</param>
            <remarks>
            setting the PositionID is only possible for AudioSinks and AudioSources
            </remarks>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.InitialPid">
            <summary>
            The initial PID
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.PowerMode">
            <summary>
            Gets the Power Mode of the Kleer interface
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SwitchToOnMode">
            <summary>
            Switches the Kleer Device to On Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SwitchToOffMode">
            <summary>
            Switches the Kleer Device to Off Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SwitchToStandbyMode">
            <summary>
            Switches the Kleer Device to Standby Mode
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.Kleer.OperatingMode">
            <summary>
            Gets the Operating Mode of the Kleer interface
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.StartAssociation(ET.FW.Hal.Instruments.KleerAssociationCodes)">
            <summary>
            Starts the association mode.
            </summary>
            <param name="associationMode">association mode</param>
            <returns>
            <c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.StartEnrolment">
            <summary>
            Starts the enrolment mode.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKeyEvent(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,ET.FW.Hal.Instruments.KleerKeyEvent)">
            <summary>
            sends a single key Event
            </summary>
            <param name="receiver">the receiver of the key event</param>
            <param name="key">the code of the key to be transmittet</param>
            <param name="keyEvent">the event of the key to be transmittet</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:ET.FW.Hal.Instruments.KleerDevice.Kleer.pressedKeys">
            <summary>
            Dictionary containing all the RemoteControlSendCommands that are currently active (the corresponding KeyCode is used as key for the dictionary)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.TimeSpan)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <param name="duration">how long shall the key be pressed <remarks>0 means the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks></param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKey(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.Int32)">
            <summary>
            simulates a button press on the Kleer interface
            </summary>
            <param name="receiver">who is the receiver of the key command</param>
            <param name="key">which key shall be pressed</param>
            <param name="duration">how long (ms) shall the key be pressed <remarks>0 means the key will be pressed infinitely until an explicit KeyRelease is triggered</remarks></param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.keyStillPressed(ET.FW.Hal.Instruments.KleerKeyPress)">
            <summary>
            checks if key is still pressed
            </summary>
            <param name="keyPress">key to check</param>
            <returns><c>true</c> if key pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKeySimpleShortPress(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            Sends the given (short) key command.
            </summary>
            <param name="receiver">The position information (0-3).</param>
            <param name="keyCode">The key to send.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKeySimpleLongPress(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode)">
            <summary>
            Sends the given (long) key command.
            </summary>
            <param name="receiver">The receiver of the Keypress</param>
            <param name="keyCode">The Key code of the Keypress</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SendKeySimplePress(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.Int32)">
            <summary>
            Sends the given key command.
            </summary>
            <param name="receiver">The receiver of the Keypress</param>
            <param name="keyCode">The Key code of the Keypress</param>
            <param name="duration">how long (ms) shall the key be pressed</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.TurnWheel(ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerTurnMode,System.Byte)">
            <summary>
            Simulates the wheel of the KleerRemoteControl being turned.
            </summary>
            <param name="receiver">The position information</param>
            <param name="turnMode">The mode how to turn the wheel</param>
            <param name="clicks">how far shall be turned, i.e. how many clicks. The value must not be greater than 63</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.GetProtocolVersion">
            <summary>
            Gets the version of the ACSI protocol used by the Kleer device.
            </summary>
            <returns>
            The version string in the form "A.B.C.D", e.g. "1.0.0.0".
            The returned string will be empty if an error occurred.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.RAMAccessRead(System.Int16)">
            <summary>
            Reads out the content of a RAM address
            </summary>
            <param name="address">the RAM address to be read out</param>
            <returns>content of a RAM address</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.Reset(ET.FW.Hal.Instruments.KleerResetCodes)">
            <summary>
            Resets the Kleer device with the given reset code via software command.
            </summary>
            <param name="resetCode">The reset code to use.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            There's no automatic reload of the Kleer settings as given in the testbench.xml!
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.Kleer.SetTextIdentifier(System.String)">
            <summary>
            Sets the identifier of the Kleer device.
            </summary>
            <param name="identifier">The new identifier (max 16 chars).</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob">
            <summary>
            helper class for realizing a Kleer remote control button press asynchroniously
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.KleerDevice">
            <summary>
            the Kleer interface that#s sending the command
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.KeyCode">
            <summary>
            the key code that the Kleer Interface shall send
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.Receiver">
            <summary>
            the receiver of the key command
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.Duration">
            <summary>
            how long shall the key be pressed
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.#ctor(ET.FW.Hal.Instruments.KleerDevice.Kleer,ET.FW.Hal.Instruments.KleerRoutingID,ET.FW.Hal.Instruments.KleerKeyCode,System.Int32)">
            <summary>
            creates new instance
            </summary>
            <param name="kleerDevice">Kleer device from which the key press shall be sent</param>
            <param name="receiver">the receiver of the key press</param>
            <param name="keyCode">the key that shall be pressed</param>
            <param name="duration">the duration of the button press</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.KleerDevice.RemoteControlSendCommandJob.Execute">
            <summary>
            the Execute method of the RemoteControlSendCommandJob
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IRTrans">
            <summary>
            IR remote control with IRTrans.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IRTrans.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IRTrans.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.IRTrans.acknowledge">
            <summary>
            Acknowledge flag, set in busProtocol_UplinkOutput.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRTrans.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRTrans.DeviceIndex">
            <summary>
            Index of this device.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.#ctor(System.String,ET.FW.Core.Common.ParameterCollection)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
            <param name="parameter">Parameter from the xml file containing device/port assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the IRRemote parameters.
            </summary>
            <param name="parameters">Parameter from the xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRTrans.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.DownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.Send(System.String)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.IRTrans.DriverVersion">
            <summary>
            Get the driver version as string (MajorVersion.MinorVersion.BuildVersion).
            </summary>
            <value>The driver version string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.Reset">
            <summary>
            Resets the Remote.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.GetIRCommand(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Gets the IR trans command array
            </summary>
            <param name="seat">The seat</param>
            <param name="key">Remote key</param>
            <returns>byte array with the command</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.TimeSpan)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="duration">The duration</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>
            Each code will be sent n times with 100 ms delay. Minimum is 300 ms (one ircode is 300 repetions n = round(duration / 300)
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SendKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>
            Each code will be sent three times with 100 ms delay.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.PressKey(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey)">
            <summary>
            Presses key 
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <returns>true if successfull, otherwise false</returns>
            <remarks>The pressed keycode will be sent cyclic with 100ms timespan</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.ReleasePressedKey">
            <summary>
            Releases last pressed key 
            </summary>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SendJob(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.Int32)">
            <summary>
            Job to send key
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="count">counter to send</param>
            <returns>Send job</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SendCommand(ET.FW.Hal.Instruments.RemoteDestination,ET.FW.Hal.Instruments.RemoteKey,System.Int32)">
            <summary>
            Sends the given key.
            </summary>
            <param name="seat">The corresponding seat.</param>
            <param name="key">The key to send.</param>
            <param name="count">Counter to send key</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IRTrans.SendCommand(System.String,System.Int32)">
            <summary>
            Sends the specified command via the IR-Trans
            </summary>
            <param name="command">The command to send.</param>
            <param name="count">counter to send the data code 0== until release key</param>
            <returns>true if successfull, otherwise false</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.LabSatGpsModul">
            <summary>
            Configuration modul for using LabSat gps simulator.
            !!! interopt.oleserver.dll is necessary and is located in trunk\\ET\\FW\\dll !!! 
            If you change this directory, you have to execute
            the oleserver.exe first to locate the interop.oleserver.dll and connect this file to
            the project !!!
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.#ctor(System.String)">
            <summary>
            ctr to create a gpsmodule with given filename for simulation.
            </summary>
            <param name="name">The name of the external device.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.StartDate">
            <summary>
            Gets or sets the start date of the simulation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.Attenuation">
            <summary>
            Gets or sets the attenuation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.Duration">
            <summary>
            Gets or sets the duration of the simulation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.Filename">
            <summary>
            The filename of the simulation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.DelayInSeconds">
            <summary>
            Gets or sets the delay in seconds of the simulation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.SWDurationToFix">
            <summary>
            Gets the stopwatch time.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.StartSimulation(System.String)">
            <summary>
            Starts simulation with initializing oleserver.
            </summary>
            <param name="filename">The filename</param>
            <returns>
            true if done
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.StopSimulation">
            <summary>
            Ends simulation of gps file
            </summary>
            <returns>
            true if done
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.CleanUpSimulation">
            <summary>
            Clean up Process.
            </summary>
            <returns>
            true if done
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.GetFixTime">
            <summary>
            Compares the simulation date and time with the fixed date and time.
            </summary>
            <returns>
            true if time and date is correct, else false
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.setGpsSimulatorFile(System.String)">
            <summary>
            Sets filename of gps simulator file to ole server.
            </summary>
            <param name="filename">
            filename of simulation, filename must be in 
            format [year]_[month]_[day]_...some information..._[hour]_[minute]_[duration in minutes]
            </param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">
            list of busprotocols
            </param>
            <returns>
            true if initialized
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.LabSatGpsModul.Available">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.Core.Hal.IExternalDevice"/> is available.
            </summary>
            <value><c>true</c> if available; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.LabSatGpsModul.System#IDisposable#Dispose">
            <summary>
            Disposes device
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.EclTestUnit">
            <summary>
            EclTestUnit external device.
            </summary>
            <remarks>
            RS232 parameters :
            57600 Baud
            8 Databits
            no parity
            1 stop bit
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnit.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.EclTestUnit.Request">
            <summary>
            Enumeration of the different requests.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnit.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnit.acknowledge">
            <summary>
            Acknowledge flag, set in downlink_Output.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.EclTestUnit.received">
            <summary>
            Received string from EclTestUnit.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the EclTestUnit parameters.
            </summary>
            <param name="parameters">Parameter from the xml file</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.Reset">
            <summary>
            Resets the EclTestUnit.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.StartInfo">
            <summary>
            Signals the start info event.
            </summary>
            <value>Changes to <c>true</c> to signal start info.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.GenerateStart">
            <summary>
            Signals the start of pulse generation.
            </summary>
            <value>Changes to <c>true</c> to signal start of generating pulse.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.GenerateEnd">
            <summary>
            Signals the end of pulse generation.
            </summary>
            <value>Changes to <c>true</c> to signal end of generating pulse.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.MonitorEnd">
            <summary>
            Signals the end of pulse monitoring.
            </summary>
            <value>Changes to <c>true</c> to signal end of monitoring.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.PulseLength">
            <summary>
            Gets the length of the pulse.
            </summary>
            <value>The length of the pulse according to the timebase.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.LowDistance">
            <summary>
            The measured distance of a falling edge.
            </summary>
            <value>The distance according to the timebase.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.HighDistance">
            <summary>
            The measured distance of a rising edge.
            </summary>
            <value>The distance according to the timebase.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.HandleResponse(ET.FW.Hal.Text.ITextResponseMessage)">
            <summary>
            Handles the response messages.
            </summary>
            <param name="message">The message.</param>
            <returns><c>true</c> if the response has been handled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.Error(System.String)">
            <summary>
            Handles unknown messages and error strings.
            </summary>
            <param name="errorString">The received string.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.EclTestUnit.DeviceIdentification">
            <summary>
            Get device identification.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.SetTimebase(ET.FW.Hal.Instruments.EclTestUnitTimebase)">
            <summary>
            Sets the timebase.
            </summary>
            <param name="timebase">The timebase to use.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.GeneratePulse(System.Int32)">
            <summary>
            Generates a pulse with the given length according to the timebase.
            </summary>
            <param name="duration">The duration of the pulse.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.MeasurePulse">
            <summary>
            Starts measuring the duration of a pulse.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The ObservableObject "PulseLength" will return the measured value.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.MeasureWithStartInfo">
            <summary>
            Measures the duration of the pulse. Signaling StartInfo event.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the StartInfo event.
            The ObservableObject "PulseLength" will return the measured value.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.GenerateAndMonitor(System.Int32,System.Int32)">
            <summary>
            Generates a pulse and starts monitoring following pulses.
            </summary>
            <param name="pulseDuration">Duration of the pulse.</param>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "GenerateStart" signals the start of the generated pulse.
            The ObservableObject "GenerateEnd" signals the end of the generated pulse.
            The ObservableObject "LowDistance" will return the measured distance of each falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each rising edge.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.MeasureExternalTriggered(System.Int32)">
            <summary>
            Waits for an external trigger pulse, measures the duration of the pulse and starts monitoring following pulses.
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the StartInfo event.
            The ObservableObject "PulseLength" will return the length of the trigger pulse.
            The ObservableObject "LowDistance" will return the measured distance of each falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each rising edge.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.GenerateExternalTriggered(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates pulses after the given amount of trigger pulses.
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <param name="triggerCount">The trigger count.</param>
            <param name="wait">The wait time before generating the pulses.</param>
            <param name="pause1">The pause before the pulse.</param>
            <param name="firstPulseLength">The length of the pulse.</param>
            <param name="pause2">The pause after the pulse.</param>
            <param name="repeat">The repeat factor of pause1/pulse/pause2.</param>
            <param name="pause3">The pause after repeating the pulse.</param>
            <param name="cycleCount">The amount of cycles of repeated pulses and pause3.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "StartInfo" will signal the first falling edge.
            The ObservableObject "PulseLength" will return the length of the first pulse.
            The ObservableObject "LowDistance" will return the measured distance of each following falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each following rising edge.
            The ObservableObject "GenerateStart" signals the beginning of generating pulses.
            The ObservableObject "GenerateEnd" signals the end of generating pulses.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.GeneratePulses(System.Int32,System.Int32[])">
            <summary>
            Generates pulses (optional after a trigger pulse).
            </summary>
            <param name="monitorDuration">Duration of the monitoring.</param>
            <param name="edgeDistance">Array of (even) edge distances.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The ObservableObject "LowDistance" will return the measured distance of each following falling edge.
            The ObservableObject "HighDistance" will return the measured distance of each following rising edge.
            The ObservableObject "GenerateStart" signals the beginning of generating pulses.
            The ObservableObject "GenerateEnd" signals the end of generating pulses.
            The ObservableObject "MonitorEnd" signals the end of the monitoring.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.EclTestUnit.Send(System.String,ET.FW.Hal.Instruments.EclTestUnit.Request)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <param name="request">The request tag.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Log">
            <summary>
            Static wrapper for loggers of this assembly
            </summary>
            <example>
            The example shows a common call to add a message to log
            <code>
            Log.General.Error("An error occured");
            </code></example>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Log.Instruments">
            <summary>
            Logger with code "Instruments"
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.MetraHit">
            <summary>
            MetraHit external device.
            </summary>
            <remarks>
            RS232 parameters :
            38400 Baud
            8 Databits
            no parity
            1 stop bit
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.MetraHit.MeasurementMode">
            <summary>
            Measurement Mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.MeasurementMode.Undefined">
            <summary>
            Undefined mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.MeasurementMode.VoltageDC">
            <summary>
            Voltage DC
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.MeasurementMode.CurrentDC">
            <summary>
            Current DC
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MetraHit.response">
            <summary>
            Received response string from MostMatrix.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>This implementation supports exactly one downlink protocol which is copied to Downlink property</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.DownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.DeviceIdentification">
            <summary>
            Get device identification.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.Send(System.String)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MetraHit.Request(System.String)">
            <summary>
            Sends the specified request.
            </summary>
            <param name="command">The command.</param>
            <returns>
            	the response string if successful; otherwise, null.
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.VoltageMeasured">
            <summary>
            Get measured voltage (in volt).
            </summary>
            <value></value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.VoltageMeasuredMilliVolt">
            <summary>
            Get measured voltage (in milli volt).
            </summary>
            <value></value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.CurrentMeasured">
            <summary>
            Get measured current (in Ampere).
            </summary>
            <value></value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MetraHit.CurrentMeasuredMilliAmpere">
            <summary>
            Get measured current (in milli ampere).
            </summary>
            <value></value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote">
            <summary>
            Ntg4Remote external device (aka "rbi Pneumatik").
            </summary>
            <remarks>
            RS232 parameters :
            9600 Baud
            8 Databits
            no parity
            1 stop bit
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.timeoutKey">
            <summary>
            Default timeout for pressing of a key.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.timeoutReset">
            <summary>
            Default timeout for PLC reset.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.commandDelay">
            <summary>
            Minimum delay between commands (Ntg4Remote specific).
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.CommandDelay">
            <summary>
            Minimum delay between commands (Ntg4Remote specific).
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote.Command">
            <summary>
            Command bytes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Undefined">
            <summary>Undefined command.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Common_Reset">
            <summary>Reset command.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Common_GetState">
            <summary>Retrieve state.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Common_GetAdditionalState">
            <summary>Retrieve additional state.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Common_GetCDSensorHU">
            <summary>Retrieve state of the CD-Sensor at the HU.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Common_QuitError">
            <summary>Quit from error state.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos1">
            <summary>Move to Tray_Pos1.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos2">
            <summary>Move to Tray_Pos2.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos3">
            <summary>Move to Tray_Pos3.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos4">
            <summary>Move to Tray_Pos4.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos5">
            <summary>Move to Tray_Pos5.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos6">
            <summary>Move to Tray_Pos6.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos7">
            <summary>Move to Tray_Pos7.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos8">
            <summary>Move to Tray_Pos8.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos9">
            <summary>Move to Tray_Pos9.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos10">
            <summary>Move to Tray_Pos10.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos11">
            <summary>Move to Tray_Pos11.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos12">
            <summary>Move to Tray_Pos12.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Tray_Pos13">
            <summary>Move to Tray_Pos13.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_ChangeStart">
            <summary>the Volume_ChangeStart</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_ChangeEnd">
            <summary>the Volume_ChangeEnd</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_Speed1">
            <summary>the Volume_Speed1</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_Speed2">
            <summary>the Volume_Speed2</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_Speed3">
            <summary>the Volume_Speed3</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_Increase">
            <summary>Increase volume.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Volume_Decrease">
            <summary>Decrease volume.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_Tray_DiscRemove">
            <summary>Remove disc.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_Tray_DiscInsert">
            <summary>Insert disc.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_HU_DiscRemove">
            <summary>Remove disc from HU.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_HU_DiscRemoveCancel">
            <summary>Cancel remove disc from HU.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_HU_DiscInsert">
            <summary>Insert disc in HU.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_HU_DiscRemoveHold">
            <summary>Remove disc from HU and hold.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.GrabArm_HU_DiscInsertHold">
            <summary>Insert disc in HU and hold.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_ToggleMode">
            <summary>Use toggle mode.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_PulseMode">
            <summary>Use pulse mode.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Radio">
            <summary>Trigger Radio button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Disc">
            <summary>Trigger Disc button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Navi">
            <summary>Trigger Navi button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Telephone">
            <summary>Trigger Telephone button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Mute">
            <summary>Trigger Mute button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_System">
            <summary>Trigger System button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_TelSend">
            <summary>Trigger TelSend button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_TelEnd">
            <summary>Trigger TelEnd button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Eject">
            <summary>Trigger Eject button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_SkipBackward">
            <summary>Trigger SkipBackward button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_SkipForward">
            <summary>Trigger SkipForward button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_On">
            <summary>Trigger On button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_C">
            <summary>Trigger C button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_0">
            <summary>Trigger 0 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_1">
            <summary>Trigger 1 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_2">
            <summary>Trigger 2 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_3">
            <summary>Trigger 3 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_4">
            <summary>Trigger 4 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_5">
            <summary>Trigger 5 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_6">
            <summary>Trigger 6 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_7">
            <summary>Trigger 7 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_8">
            <summary>Trigger 8 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_9">
            <summary>Trigger 9 button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Star">
            <summary>Trigger Star button.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.Command.Main_Pound">
            <summary>Trigger Pound button.</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote.PLCState">
            <summary>
            Different states of the pneumatic control.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.PLCState.Unknown">
            <summary>Unknown error occurred.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.PLCState.Ready">
            <summary>The machine is in ready mode and can receive commands.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.PLCState.Busy">
            <summary>The machine is busy and cannot receive commands</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.PLCState.Error">
            <summary>An error occured.</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState">
            <summary>
            Extended state of the pneumatic control.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.#ctor(System.String)">
            <summary>
            the Constructor.
            </summary>
            <param name="state">response string of get extended state command</param>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.ErrorCode">
            <summary>
            Error code returned by the machine.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.CDLoaded">
            <summary>
            Status of the current CD tray (loaded/not loaded)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.CurrentTray">
            <summary>
            Number of the current tray.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.Defined">
            <summary>
            Flag for valid state information
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ExtendedState.ToString">
            <summary>
            get extended state as string (string is similar to original message from PLC)
            </summary>
            <returns>object text</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote.StationsState">
            <summary>
            Current state of pneumatic stations.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.Undefined">
            <summary>unspecified state</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.Ready">
            <summary>ready for next operation</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.Busy">
            <summary>stations are busy</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.TrayMoving">
            <summary>CD tray is moving</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.ArmMoving">
            <summary>grab arm is moving</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.ArmHasDisc">
            <summary>grab arm has disc</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.ArmHUWait">
            <summary>grab arm waits for disc eject from HU or waits for release disc command after a hold disc command</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.Volume">
            <summary>volume control started</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.StationsState.Error">
            <summary>pneumatic control reported an error</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.response">
            <summary>
            Received response string from MostMatrix.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.lastCommandSent">
            <summary>
            Timestamp of last command sent to Ntg4Remote.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.#ctor(System.String)">
            <summary>
            the Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.InitButtonStates">
            <summary>
            Inits the button states.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ReadState">
            <summary>
            Returns the current state of the CD grab arm / volume control .
            </summary>
            <returns>the plc state</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ReadExtendedState">
            <summary>
            Gets the extended state of the pneumatic control.
            </summary>
            <returns>the extended state</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ReadCDSensorHUState">
            <summary>
            Gets the CDSensorHU state of the pneumatic control.
            </summary>
            <returns>true on aktiv, false on no CD, null if unknown</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.CurrentExtendedState">
            <summary>
            Access extended state after last operation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.CurrentStationsState">
            <summary>
            Current state of pneumatic stations.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ContainsStationState(ET.FW.Hal.Instruments.Ntg4Remote.StationsState,ET.FW.Hal.Instruments.Ntg4Remote.StationsState)">
            <summary>
            Determines whether [contains station state] [the specified combined].
            </summary>
            <param name="combined">The combined.</param>
            <param name="checkagainst">The checkagainst.</param>
            <returns>
              <c>true</c> if [contains station state] [the specified combined]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.Busy">
            <summary>
            PneumaticControl is busy.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ToggleMode">
            <summary>
            Activate toggle mode. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.PulseMode">
            <summary>
            Activate pulse mode. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.Reset">
            <summary>
            Resets the pneumatic control. Function is executed asynchronously with JobHandling.
            </summary>
            <returns>the job which resets the pneumatic</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.Send(ET.FW.Hal.Instruments.Ntg4Remote.Command)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            <remarks>Method is synchronized, because only one command may be sent at one time</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.PressButton(ET.FW.Hal.Instruments.Ntg4Remote.Command)">
            <summary>
            Press button function.
            </summary>
            <param name="command">Corresponding command.</param>
            <returns>true on success</returns>
            <remarks>
            Method is synchronized, to secure access on button press state.
            Press state must not be querried before other Press/Release operations are finished
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.ReleaseButton(ET.FW.Hal.Instruments.Ntg4Remote.Command)">
            <summary>
            Release button function.
            </summary>
            <param name="command">Corresponding command.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.GetCommandStates(ET.FW.Hal.Instruments.Ntg4Remote.Command)">
            <summary>
            Get states for execution of the given command.
            </summary>
            <param name="command">Ntg4Remote command</param>
            <returns>Core.States object</returns>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.commandStates">
            <summary>
            table of command states (state machine for pneumatic stations)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates">
            <summary>
            Control states for commands
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.#ctor(ET.FW.Hal.Instruments.Ntg4Remote.Command,ET.FW.Hal.Instruments.Ntg4Remote.StationsState,ET.FW.Hal.Instruments.Ntg4Remote.StationsState,ET.FW.Hal.Instruments.Ntg4Remote.StationsState)">
            <summary>
            the Constructor
            </summary>
            <param name="command">command to be executed</param>
            <param name="prevState">required state for start of command execution</param>
            <param name="operatingState">state to be set during execution</param>
            <param name="endState">state to be set after (successful) execution</param>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.Command">
            <summary>
            executed command code
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.PrevState">
            <summary>
            state in which command can be executed
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.OperatingState">
            <summary>
            state during command execution
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.EndState">
            <summary>
            state after successful command execution
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Ntg4Remote.CommandStates.WaitForReady">
            <summary>
            check if command execution has to wait until pneumatic is ready
            </summary>
            <value>
              <c>true</c> if [wait for ready]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Ntg4RemoteJob">
            <summary>
            Handling Ntg4Remote jobs.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4RemoteJob.PollingInterval">
            <summary>
            Polling interval for command result in ms.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4RemoteJob.ntg4Remote">
            <summary>
            Ntg4Remote used for communication with the hardware.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Ntg4RemoteJob.command">
            <summary>
            The command to execute.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4RemoteJob.#ctor(ET.FW.Hal.Instruments.Ntg4Remote,ET.FW.Hal.Instruments.Ntg4Remote.Command,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ET.FW.Hal.Instruments.Ntg4RemoteJob"/> class.
            </summary>
            <param name="ntg4Remote">The Ntg4Remote to use.</param>
            <param name="command">The command.</param>
            <param name="timeout">The timeout of the job.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Ntg4RemoteJob.Execute">
            <summary>
            Executes the job.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciGridStyle">
            <summary>
            Oscilloscope grid styles.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Undefined">
            <summary>
            Grid style undefined.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Single">
            <summary>
            Single grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Dual">
            <summary>
            Dual grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Quad">
            <summary>
            Quad grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Octal">
            <summary>
            Octal grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.Auto">
            <summary>
            Automatic style.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.XY">
            <summary>
            XY grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.XYSingle">
            <summary>
            XY single grid.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciGridStyle.XYDual">
            <summary>
            XY dual grid.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciTriggerMode">
            <summary>
            Trigger modes.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerMode.Undefined">
            <summary>
            Trigger mode undefined.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerMode.Auto">
            <summary>
            Automatic trigger.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerMode.Norm">
            <summary>
            Normal trigger.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerMode.Single">
            <summary>
            Single trigger.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerMode.Stop">
            <summary>
            Stop trigger.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciTriggerSlope">
            <summary>
            Valid trigger slopes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerSlope.POS">
            <summary>
            Slope POS
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciTriggerSlope.NEG">
            <summary>
            Slope NEG
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciSampleMode">
            <summary>
            Sample mode 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.Undefined">
            <summary>
            SampleMode undefined
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.Unknown">
            <summary>
            SampleMode unknown
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.RealTime">
            <summary>
            SampleMode realtime
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.Sequence">
            <summary>
            SampleMode sequence
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.WStream">
            <summary>
            SampleMode WStream
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.RIS">
            <summary>
            SampleMode RIS
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciSampleMode.Roll">
            <summary>
            SampleMode Roll
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciBandwidthLimits">
            <summary>
            Bandwidth limit settings
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BLOFF">
            <summary>
            Limit OFF
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BLON">
            <summary>
            Limit ON
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BL200MHZ">
            <summary>
            Limit 200 MHz
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BL1GHZ">
            <summary>
            Limit 1 GHz
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BL3GHZ">
            <summary>
            Limit 3 GHz
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciBandwidthLimits.BL4GHZ">
            <summary>
            Limit 4 GHz
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciAttenuations">
            <summary>
            Valid values for attenuation. 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A1">
            <summary>
            Attenuation 1
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A2">
            <summary>
            Attenuation 2
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A5">
            <summary>
            Attenuation 5
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A10">
            <summary>
            Attenuation 10
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A20">
            <summary>
            Attenuation 20
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A25">
            <summary>
            Attenuation 25
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A50">
            <summary>
            Attenuation 50
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A100">
            <summary>
            Attenuation 100
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A200">
            <summary>
            Attenuation 200
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A500">
            <summary>
            Attenuation 500
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A1000">
            <summary>
            Attenuation 1000
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.A10000">
            <summary>
            Attenuation 10000
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciAttenuations.Unknown">
            <summary>
            Attenuation unkown
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.OsciCoupling">
            <summary>
            Coupling modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciCoupling.A1M">
            <summary>
            Coupling A1M
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciCoupling.D1M">
            <summary>
            Coupling D1M
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciCoupling.D50">
            <summary>
            Coupling D50
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.OsciCoupling.GND">
            <summary>
            Coupling GND
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Channel">
            <summary>
            This class encapsulates the secific channel settings. The LeCroy device aggregates 4 channel instances.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Oscilloscope">
            <summary>
            The Oscilloscope
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.ChannelNumber">
            <summary>
            Gets the channel number.
            </summary>
            <value>The channel number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.ChannelFunctions">
            <summary>
            Array of functions.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor.
            </summary>
            <param name="oscilloscope">Reference of the aggregating class</param>
            <param name="channelNumber">Channel number</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnCreateFunctions">
            <summary>
            On create functions
            </summary>
            <returns>The functions</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Trace">
            <summary>
            Switches the trace on or off.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestTrace">
            <summary>
            Get Trace.
            </summary>
            <returns>Returns Trace</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetTrace(System.Boolean)">
            <summary>
            Set Trace.
            </summary>
            <param name="value">Trace to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Voltage">
            <summary>
            Sets the voltages per division.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestVoltage">
            <summary>
            Get Voltage.
            </summary>
            <returns>Returns Voltage</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetVoltage(System.Nullable{System.Double})">
            <summary>
            Set Voltage.
            </summary>
            <param name="value">Voltage to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Offset">
            <summary>
            Sets / gets the offset.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestOffset">
            <summary>
            Get Offset.
            </summary>
            <returns>Returns Offset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetOffset(System.Nullable{System.Double})">
            <summary>
            Set Offset.
            </summary>
            <param name="value">Offset to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.VerticalGain">
            <summary>
            Gets the vertical gain.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestVerticalGain">
            <summary>
            Get VerticalGain.
            </summary>
            <returns>Returns VerticalGain</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.VerticalOffset">
            <summary>
            Gets the vertical offset.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestVerticalOffset">
            <summary>
            Get VerticalOffset.
            </summary>
            <returns>Returns VerticalOffset</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestHorizontalOffset">
            <summary>
            Get HorizontalOffset.
            </summary>
            <returns>Returns HorizontalOffset</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.HorizontalInterval">
            <summary>
            Gets the horizontal interval.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestHorizontalInterval">
            <summary>
            Get HorizontalInterval.
            </summary>
            <returns>Returns HorizontalInterval</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Coupling">
            <summary>
            Sets the coupling.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetCoupling(ET.FW.Hal.Instruments.OsciCoupling)">
            <summary>
            Set Coupling.
            </summary>
            <param name="value">Coupling to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.BandwidthLimit">
            <summary>
            Set the bandwidth limit for the channel
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetBandwidthLimit(ET.FW.Hal.Instruments.OsciBandwidthLimits)">
            <summary>
            Set BandwidthLimit.
            </summary>
            <param name="value">BandwidthLimit to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Attenuation">
            <summary>
            Sets / gets the attenuation of the channel
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestAttenuation">
            <summary>
            Get Attenuation.
            </summary>
            <returns>Returns Attenuation</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetAttenuation(ET.FW.Hal.Instruments.OsciAttenuations)">
            <summary>
            Set Attenuation.
            </summary>
            <param name="value">Attenuation to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.TriggerSlope">
            <summary>
            Sets the trigger slope.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetTriggerSlope(ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Set TriggerSlope.
            </summary>
            <param name="value">TriggerSlope to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.TriggerLevel">
            <summary>
            Sets the trigger level
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSetTriggerLevel(System.Double)">
            <summary>
            Set TriggerLevel.
            </summary>
            <param name="value">TriggerLevel to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.EdgeTrigger(System.Double,System.Double,ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Sets a edge trigger.
            </summary>
            <param name="level">Trigger level</param>
            <param name="delay">Trigger delay</param>
            <param name="slope">Trigger slope</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnEdgeTrigger(System.Double,System.Double,ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Sets a edge trigger.
            </summary>
            <param name="level">Trigger level</param>
            <param name="delay">Trigger delay</param>
            <param name="slope">Trigger slope</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Minimum">
            <summary>
            Returns the minimum value.
            </summary>
            <returns>The minimum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestMinimum">
            <summary>
            Get Minimum.
            </summary>
            <returns>Returns Minimum</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Maximum">
            <summary>
            Returns the maximum value.
            </summary>
            <returns>The maximum value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestMaximum">
            <summary>
            Get Maximum.
            </summary>
            <returns>Returns Maximum</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Frequency">
            <summary>
            Returns the frequency.
            </summary>
            <returns>The frequency</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestFrequency">
            <summary>
            Get Frequency.
            </summary>
            <returns>Returns Frequency</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Period">
            <summary>
            Returns the period.
            </summary>
            <returns>The period</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestPeriod">
            <summary>
            Get Period.
            </summary>
            <returns>Returns Period</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Amplitude">
            <summary>
            Returns the amplitude.
            </summary>
            <returns>The amplitude</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestAmplitude">
            <summary>
            Get Amplitude.
            </summary>
            <returns>Returns Amplitude</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Channel.Cycles">
            <summary>
            Returns the cycles on screen.
            </summary>
            <returns>The cycles on screen</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnRequestCycles">
            <summary>
            Get Cycles.
            </summary>
            <returns>Returns Cycles</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.GetWaveForm">
            <summary>
            Gets the wave form of this channel.
            </summary>
            <returns>Job to monitor the reading of the voltage curve.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnReadWaveForm">
            <summary>
            Gets the wave form of this channel synchronous.
            </summary>
            <returns>The wave form or null in case of error.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.OnSaveVoltageCurve(System.String)">
            <summary>
            Method for asynchronous execution.
            </summary>
            <param name="filename">The filename</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Channel.SaveVoltageCurve(System.String)">
            <summary>
            Reads the current voltage curve of this channel and saves it to disk.
            </summary>
            <param name="filename">The name of the voltage curve file.</param>
            <returns>Job to monitor the reading and saving of the voltage curve.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel">
            <summary>
            This class encapsulates the specific channel settings. The LecroyVicp device aggregates 4 channel instances.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor.
            </summary>
            <param name="oscilloscope">Reference of the aggregating class</param>
            <param name="channelNumber">Channel number</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnCreateFunctions">
            <summary>
            On create functions
            </summary>
            <returns>The functions</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestTrace">
            <summary>
            Get Trace.
            </summary>
            <returns>Returns Trace</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetTrace(System.Boolean)">
            <summary>
            Set Trace.
            </summary>
            <param name="value">Trace to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestVoltage">
            <summary>
            Get Voltage.
            </summary>
            <returns>Returns Voltage</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetVoltage(System.Nullable{System.Double})">
            <summary>
            Set Voltage.
            </summary>
            <param name="value">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestOffset">
            <summary>
            Get Offset.
            </summary>
            <returns>Returns Offset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetOffset(System.Nullable{System.Double})">
            <summary>
            Set Offset.
            </summary>
            <param name="value">Offset to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestVerticalGain">
            <summary>
            Get VerticalGain.
            </summary>
            <returns>Returns VerticalGain</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestVerticalOffset">
            <summary>
            Get VerticalOffset.
            </summary>
            <returns>Returns VerticalOffset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestHorizontalOffset">
            <summary>
            Get HorizontalOffset.
            </summary>
            <returns>Returns HorizontalOffset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestHorizontalInterval">
            <summary>
            Get HorizontalInterval.
            </summary>
            <returns>Returns HorizontalInterval</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetCoupling(ET.FW.Hal.Instruments.OsciCoupling)">
            <summary>
            Set Coupling.
            </summary>
            <param name="value">Coupling to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetBandwidthLimit(ET.FW.Hal.Instruments.OsciBandwidthLimits)">
            <summary>
            Set BandwidthLimit.
            </summary>
            <param name="value">BandwidthLimit to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestAttenuation">
            <summary>
            Get Attenuation.
            </summary>
            <returns>Returns Attenuation</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetAttenuation(ET.FW.Hal.Instruments.OsciAttenuations)">
            <summary>
            Set Attenuation.
            </summary>
            <param name="value">Attenuation to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetTriggerSlope(ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Set TriggerSlope.
            </summary>
            <param name="value">TriggerSlope to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnSetTriggerLevel(System.Double)">
            <summary>
            Set TriggerLevel.
            </summary>
            <param name="value">TriggerLevel to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnEdgeTrigger(System.Double,System.Double,ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Sets a edge trigger.
            </summary>
            <param name="level">Trigger level</param>
            <param name="delay">Trigger delay</param>
            <param name="slope">Trigger slope</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.ParameterValue(ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue)">
            <summary>
            Returns the value of some device parameters defined in EnumParameterValue
            </summary>
            <param name="param">Parameter Enum value</param>
            <returns>Double value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnParameterValue(ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue)">
            <summary>
            Returns the value of some device parameters defined in EnumParameterValue
            </summary>
            <param name="param">Parameter Enum value</param>
            <returns>Double value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestMinimum">
            <summary>
            Get Minimum.
            </summary>
            <returns>Returns Minimum</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestMaximum">
            <summary>
            Get Maximum.
            </summary>
            <returns>Returns Maximum</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestFrequency">
            <summary>
            Get Frequency.
            </summary>
            <returns>Returns Frequency</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestPeriod">
            <summary>
            Get Period.
            </summary>
            <returns>Returns Period</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestAmplitude">
            <summary>
            Get Amplitude.
            </summary>
            <returns>Returns Amplitude</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnRequestCycles">
            <summary>
            Get Cycles.
            </summary>
            <returns>Returns Cycles</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.ParseString(System.String,System.Double@)">
            <summary>
            Parses the string for a double and process the milli / micro.
            </summary>
            <param name="str">The string with V or Seconds.</param>
            <param name="value">The value calculated in V or Seconds.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.OnReadWaveForm">
            <summary>
            The Offset and Voltage has to be set to a value which is within the range of the display?
            ...
            Gets the wave form of this channel synchronous.
            </summary>
            <returns>The wave form or null in case of error.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.RequestDouble(System.String)">
            <summary>
            Requests a  double.
            </summary>
            <param name="cmd">The command.</param>
            <returns>return the value, null on error</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Channel.MathFactors(System.Double@,System.Double@,System.String@,System.Double@,System.Double@,System.String@,System.String@)">
            <summary>
            Currently not used, because we do not support the math functions
            returns the factors for enabled MATH functions of the Ozci
            </summary>
            <param name="gain">The gain.</param>
            <param name="offset">The offset.</param>
            <param name="mathOperator">The used math operator.</param>
            <param name="gainfactor">The gainfactor.</param>
            <param name="offsetValue">The offset value.</param>
            <param name="mathSource1">The math source1/Channel.</param>
            <param name="mathSource2">The math source2.</param>
            <returns>true on success</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsVolt">
            <summary>
            Voltage Units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsVolt.mV">
            <summary>Unit mV</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsVolt.V">
            <summary>Unit V</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsFreq">
            <summary>
            Frequency Units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsFreq.Hz">
            <summary>Unit Hz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsFreq.kHz">
            <summary>Unit kHz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsFreq.MHz">
            <summary>Unit MHz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsFreq.GHz">
            <summary>Unit GHz</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsTime">
            <summary>
            Time units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsTime.ns">
            <summary>Unit ns</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsTime.ms">
            <summary>Unit ms</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.UnitsTime.s">
            <summary>Unit s</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes">
            <summary>
            Calibration Modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.OFF">
            <summary>Mode OFF</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.CALSQ">
            <summary>Mode CALSQ</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.PF">
            <summary>Mode PF</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.TRIG">
            <summary>Mode TRIG</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.LEVEL">
            <summary>Mode LEVEL</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.CalibrationModes.ENABLED">
            <summary>Mode ENABLED</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.ChannelCombines">
            <summary>
            vaild channel combinition modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.ChannelCombines.CC1">
            <summary>Combine CC1</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.ChannelCombines.CC2">
            <summary>Combine CC2</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.ChannelCombines.CCAuto">
            <summary>Combine CCAuto</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue">
            <summary>
            Parameter values for the PAVA? query (Only Parameter available for all models)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.ALL">
            <summary>
            all parameters
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.FRST">
            <summary>
            First cursor position 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.POPATX">
            <summary>
            Population of bin at x
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.AMPL">
            <summary>
            The Amplitude
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.FREQ">
            <summary>
            The Frequency 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.RISE">
            <summary>
            Rise time 10% to 90 %
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.AREA">
            <summary>
            The Area 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.HOLDLEV">
            <summary>
            Clock to data time 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.RISE28">
            <summary>
             Rise 20 % to 80 %
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.BASE">
            <summary>
            The Base  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.LAST">
            <summary>
            Last cursor position 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.RLEV">
            <summary>
            Rise time at levels 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CYCL">
            <summary>
            Cycles on screen  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.MAX">
            <summary>
             Maximum value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.RMS">
            <summary>
            root mean square
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DLY">
            <summary>
            The Delay 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.MEAN">
            <summary>
            Mean value
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.SETUP">
            <summary>
             Data edge to clock edge
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DDLY">
            <summary>
            Delta delay 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.MEDI">
            <summary>
            The Median 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.SDEV">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DTLEV">
            <summary>
            Delta time at level
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.MIN">
            <summary>
             Minimum value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.TLEV">
            <summary>
            Time at level
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DUR">
            <summary>
            duration of acquisition 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.PNTS">
            <summary>
            Period TOP Top
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DUTY">
            <summary>
            duty cycle 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.NULL">
            <summary>
            phase difference 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.WID">
            <summary>
            The Width
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.DULEV">
            <summary>
            Duty cycle at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.OVSN">
            <summary>
             Overshoot negative 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.WIDLV">
            <summary>
            Width at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.EDLEV">
            <summary>
            Edges at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.OVSP">
            <summary>
            Overshoot positive  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.XMAX">
            <summary>
            Pos of max data value
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.FALL82">
            <summary>
            Fall time 80 % to 20 %  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.PKPK">
            <summary>
            Peak to peak 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.XMIN">
            <summary>
            Pos if min data value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.FALL">
            <summary>
            Fall time 90 % to 10 % 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.PER">
            <summary>
            The Period  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.XAPK">
            <summary>
            Nth highest hist peak
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.FLEV">
            <summary>
            Fall at levels  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.PHASE">
            <summary>
            Phase difference 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST1">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST2">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST3">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST4">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST5">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST6">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST7">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.EnumParameterValue.CUST8">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput">
            <summary>
            DFT output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.REAL">
            <summary>Output REAL</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.IMAGINARY">
            <summary>Output IMAGINARY</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.MAGNITUDE">
            <summary>Output MAGNITUDE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.PHASE">
            <summary>Output PHASE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.POWERSPECTRUM">
            <summary>Output POWERSPECTRUM</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput.POWERDENSITY">
            <summary>Output POWERDENSITY</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow">
            <summary>
            DFT window
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow.RECTANGULAR">
            <summary>Window RECTANGULAR</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow.VONHANN">
            <summary>Window VONHANN</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow.HAMMING">
            <summary>Window HAMMING</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow.FLATTOP">
            <summary>Window FLATTOP</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow.BLACKMANHARRIS">
            <summary>Window BLACKMANHARRIS</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTAlgorithm">
            <summary>
            DFT Algorithm
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTAlgorithm.LEASTPRIME">
            <summary>Algorithm LEASTPRIME</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTAlgorithm.POWER2">
            <summary>Algorithm POWER2</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTFilltype">
            <summary>
            DFT Filltype
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTFilltype.TRUNCATE">
            <summary>Filltype TRUNCATE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTFilltype.ZEROFILL">
            <summary>Filltype ZEROFILL</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState">
            <summary>
            Value definition for INR/INE registers
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Unknown">
            <summary> InternalState unknown.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.AquiredReadMainMem">
            <summary> A new signal has been acquired in acquisition memory and read out into the main memory. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.ScreenDumpTerminated">
            <summary> A screen dump has terminated. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.ReturnToLocalState">
            <summary> A return to the local state is detected. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.TimeoutBlockXfer">
            <summary> A time-out has occurred in a data block transfer. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Aquired">
            <summary> A segment of a sequence waveform has been acquired in acquisition memory but not yet read out into the main memory. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Reserved32">
            <summary> Reserved for LeCroy use. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.DriveFull">
            <summary> Floppy or hard disk has become full in AutoStore Fill mode. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.DriveExchanged">
            <summary> A floppy or hard disk exchange has been detected. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Reserved256">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Reserved512">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Reserved1024">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.Reserved2048">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.PassFailTest">
            <summary> Pass/Fail test detected desired outcome. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.TriggerReady">
            <summary> Trigger is ready. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.InternalState.ProbeChanged">
            <summary> Probe was changed. /// </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function">
            <summary>
            Function methods.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor
            </summary>
            <param name="oscilloscope">The oscilloscope</param>
            <param name="channel">Channel number</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.OnSetGrid(System.Int32)">
            <summary>
            Sets the grid.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.OnSetMagnify(System.Single,System.Single)">
            <summary>
            Sets the magnification.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.OnSetPosition(System.Single,System.Single)">
            <summary>
            Sets the position.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.OnSetTrace(System.Boolean)">
            <summary>
            Sets Trace on or off.
            </summary>
            <param name="value">True to set on</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.OnSetDFT(ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTAlgorithm,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTFilltype,System.Boolean)">
            <summary>
            Send DFT message
            </summary>
            <param name="output">DFT output</param>
            <param name="window">DFT window</param>
            <param name="algorithm">DFT algorithm</param>
            <param name="filltype">DFT filltype</param>
            <param name="suppressDC">Suppess DC</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.Function.DFT(ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTOutput,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTWindow,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTAlgorithm,ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.DFTFilltype,System.Boolean)">
            <summary>
            Send DFT message
            </summary>
            <param name="output">DFT output</param>
            <param name="window">DFT window</param>
            <param name="algorithm">DFT algorithm</param>
            <param name="filltype">DFT filltype</param>
            <param name="suppressDC">Suppess DC</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx">
            <summary>
            LecroyVicp oscilloscope.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "Oscilloscope")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnCreateChannels">
            <summary>
            On create channels
            </summary>
            <returns>The channels</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnInit">
            <summary>
            On init
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnInitAfterReset">
            <summary>
            OnInit after Reset
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestGridStyle">
            <summary>
            Get OsciGridStyle.
            </summary>
            <returns>Returns OsciGridStyle</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetGridStyle(ET.FW.Hal.Instruments.OsciGridStyle)">
            <summary>
            Set OsciGridStyle.
            </summary>
            <param name="style">Style to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestTriggerMode">
            <summary>
            Get TriggerMode.
            </summary>
            <returns>Returns TriggerMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetTriggerMode(ET.FW.Hal.Instruments.OsciTriggerMode)">
            <summary>
            Set TriggerMode.
            </summary>
            <param name="mode">TriggerMode to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnClearSweeps">
            <summary>
            Clears Sweeps.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestAutoCalibration">
            <summary>
            Get AutoCalibration.
            </summary>
            <returns>Returns AutoCalibration</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetAutoCalibration(System.Boolean)">
            <summary>
            Set AutoCalibration.
            </summary>
            <param name="value">AutoCalibration to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnCalibrate">
            <summary>
            Calibrates the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestDeviceDependentRegister">
            <summary>
            Get DeviceDependentRegister.
            </summary>
            <returns>Returns DeviceDependentRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestCommandErrorRegister">
            <summary>
            Get CommandErrorRegister.
            </summary>
            <returns>Returns CommandErrorRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestEventStatusRegister">
            <summary>
            Get EventStatusRegister.
            </summary>
            <returns>Returns EventStatusRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetEventStatusRegister(System.Nullable{System.Byte})">
            <summary>
            Set EventStatusRegister.
            </summary>
            <param name="value">EventStatusRegister to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestExtensionErrorRegister">
            <summary>
            Get ExtensionErrorRegister.
            </summary>
            <returns>Returns ExtensionErrorRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnArmAcquisition">
            <summary>
            arm the acquisition of data in LecroyVicp
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRecallSetup(System.String)">
            <summary>
            Recalls a front panel setup from mass storage.
            </summary>
            <param name="pathfile">Path of file</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnForceTrigger">
            <summary>
            Forces the instrument to make one acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnStopAcquisition">
            <summary>
            Immediately stops signal acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnWaitUntilReady(System.TimeSpan)">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <param name="timeout">Timeout to wait</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnClearStatus">
            <summary>
            Clears the status register
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnAutoSetup">
            <summary>
            Perform an auto setup 
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnGetDate">
            <summary>
            Get the current date of the device.
            </summary>
            <returns>Date as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetDate(System.DateTime)">
            <summary>
            Set the current date of the device.
            </summary>
            <param name="date">The date</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestDottedLines">
            <summary>
            Get DottedLines.
            </summary>
            <returns>Returns DottedLines</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetDottedLines(System.Boolean)">
            <summary>
            Set DottedLines.
            </summary>
            <param name="value">DottedLines to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestDisplay">
            <summary>
            Get Display.
            </summary>
            <returns>Returns Display</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetDisplay(System.Boolean)">
            <summary>
            Set Display.
            </summary>
            <param name="value">Display to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestTimebase">
            <summary>
            Get Timebase.
            </summary>
            <returns>Returns Timebase</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetTimebase(System.Nullable{System.Double})">
            <summary>
            Set Timebase.
            </summary>
            <param name="value">Timebase to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestMemorySize">
            <summary>
            Get MemorySize.
            </summary>
            <returns>Returns MemorySize</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetMemorySize(System.Nullable{System.Int32})">
            <summary>
            Set MemorySize.
            </summary>
            <param name="value">MemorySize to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestSampleMode">
            <summary>
            Get SampleMode.
            </summary>
            <returns>Returns SampleMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetSampleMode(ET.FW.Hal.Instruments.OsciSampleMode)">
            <summary>
            Set SampleMode.
            </summary>
            <param name="value">SampleMode to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestTriggerDelay">
            <summary>
            Get TriggerDelay.
            </summary>
            <returns>Returns TriggerDelay</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetTriggerDelay(System.Nullable{System.Double})">
            <summary>
            Set TriggerDelay.
            </summary>
            <param name="value">TriggerDelay to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestGridIntensity">
            <summary>
            Get GridIntensity.
            </summary>
            <returns>Returns GridIntensity</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnSetGridIntensity(System.Nullable{System.Int32})">
            <summary>
            Set GridIntensity.
            </summary>
            <param name="value">GridIntensity to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.LecroyWavejet3xx.LecroyWavejet3xx.OnRequestTraceIntensity">
            <summary>
            Get TraceIntensity.
            </summary>
            <returns>Returns TraceIntensity</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsVolt">
            <summary>
            Voltage Units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsVolt.mV">
            <summary>Unit mV</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsVolt.V">
            <summary>Unit V</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq">
            <summary>
            Frequency Units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq.Hz">
            <summary>Unit Hz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq.kHz">
            <summary>Unit kHz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq.MHz">
            <summary>Unit MHz</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq.GHz">
            <summary>Unit GHz</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime">
            <summary>
            Time units
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime.ns">
            <summary>Unit ns</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime.ms">
            <summary>Unit ms</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime.s">
            <summary>Unit s</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes">
            <summary>
            Calibration Modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.OFF">
            <summary>Mode OFF</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.CALSQ">
            <summary>Mode CALSQ</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.PF">
            <summary>Mode PF</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.TRIG">
            <summary>Mode TRIG</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.LEVEL">
            <summary>Mode LEVEL</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes.ENABLED">
            <summary>Mode ENABLED</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.ChannelCombines">
            <summary>
            vaild channel combinition modes
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.ChannelCombines.CC1">
            <summary>Combine CC1</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.ChannelCombines.CC2">
            <summary>Combine CC2</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.ChannelCombines.CCAuto">
            <summary>Combine CCAuto</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue">
            <summary>
            Parameter values for the PAVA? query (Only Parameter available for all models)
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.ALL">
            <summary>
            all parameters
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.FRST">
            <summary>
            First cursor position 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.POPATX">
            <summary>
            Population of bin at x
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.AMPL">
            <summary>
            The Amplitude
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.FREQ">
            <summary>
            The Frequency 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.RISE">
            <summary>
            Rise time 10% to 90 %
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.AREA">
            <summary>
            The Area 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.HOLDLEV">
            <summary>
            Clock to data time 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.RISE28">
            <summary>
             Rise 20 % to 80 %
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.BASE">
            <summary>
            The Base  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.LAST">
            <summary>
            Last cursor position 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.RLEV">
            <summary>
            Rise time at levels 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CYCL">
            <summary>
            Cycles on screen  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.MAX">
            <summary>
             Maximum value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.RMS">
            <summary>
            root mean square
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DLY">
            <summary>
            The Delay 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.MEAN">
            <summary>
            Mean value
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.SETUP">
            <summary>
             Data edge to clock edge
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DDLY">
            <summary>
            Delta delay 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.MEDI">
            <summary>
            The Median 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.SDEV">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DTLEV">
            <summary>
            Delta time at level
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.MIN">
            <summary>
             Minimum value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.TLEV">
            <summary>
            Time at level
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DUR">
            <summary>
            duration of acquisition 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.PNTS">
            <summary>
            Period TOP Top
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DUTY">
            <summary>
            duty cycle 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.NULL">
            <summary>
            phase difference 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.WID">
            <summary>
            The Width
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.DULEV">
            <summary>
            Duty cycle at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.OVSN">
            <summary>
             Overshoot negative 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.WIDLV">
            <summary>
            Width at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.EDLEV">
            <summary>
            Edges at level 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.OVSP">
            <summary>
            Overshoot positive  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.XMAX">
            <summary>
            Pos of max data value
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.FALL82">
            <summary>
            Fall time 80 % to 20 %  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.PKPK">
            <summary>
            Peak to peak 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.XMIN">
            <summary>
            Pos if min data value 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.FALL">
            <summary>
            Fall time 90 % to 10 % 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.PER">
            <summary>
            The Period  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.XAPK">
            <summary>
            Nth highest hist peak
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.FLEV">
            <summary>
            Fall at levels  
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.PHASE">
            <summary>
            Phase difference 
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST1">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST2">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST3">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST4">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST5">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST6">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST7">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue.CUST8">
            <summary>
            Custom parameter CUSTOM PARAMETERS DEFINED USING PARAMETER_CUSTOM COMMAND*
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput">
            <summary>
            DFT output
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.REAL">
            <summary>Output REAL</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.IMAGINARY">
            <summary>Output IMAGINARY</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.MAGNITUDE">
            <summary>Output MAGNITUDE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.PHASE">
            <summary>Output PHASE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.POWERSPECTRUM">
            <summary>Output POWERSPECTRUM</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput.POWERDENSITY">
            <summary>Output POWERDENSITY</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow">
            <summary>
            DFT window
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow.RECTANGULAR">
            <summary>Window RECTANGULAR</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow.VONHANN">
            <summary>Window VONHANN</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow.HAMMING">
            <summary>Window HAMMING</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow.FLATTOP">
            <summary>Window FLATTOP</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow.BLACKMANHARRIS">
            <summary>Window BLACKMANHARRIS</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTAlgorithm">
            <summary>
            DFT Algorithm
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTAlgorithm.LEASTPRIME">
            <summary>Algorithm LEASTPRIME</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTAlgorithm.POWER2">
            <summary>Algorithm POWER2</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTFilltype">
            <summary>
            DFT Filltype
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTFilltype.TRUNCATE">
            <summary>Filltype TRUNCATE</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTFilltype.ZEROFILL">
            <summary>Filltype ZEROFILL</summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState">
            <summary>
            Value definition for INR/INE registers
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Unknown">
            <summary> InternalState unknown.</summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.AquiredReadMainMem">
            <summary> A new signal has been acquired in acquisition memory and read out into the main memory. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.ScreenDumpTerminated">
            <summary> A screen dump has terminated. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.ReturnToLocalState">
            <summary> A return to the local state is detected. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.TimeoutBlockXfer">
            <summary> A time-out has occurred in a data block transfer. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Aquired">
            <summary> A segment of a sequence waveform has been acquired in acquisition memory but not yet read out into the main memory. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Reserved32">
            <summary> Reserved for LeCroy use. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.DriveFull">
            <summary> Floppy or hard disk has become full in AutoStore Fill mode. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.DriveExchanged">
            <summary> A floppy or hard disk exchange has been detected. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Reserved256">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Reserved512">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Reserved1024">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.Reserved2048">
            <summary> Reserved. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.PassFailTest">
            <summary> Pass/Fail test detected desired outcome. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.TriggerReady">
            <summary> Trigger is ready. /// </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState.ProbeChanged">
            <summary> Probe was changed. /// </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel">
            <summary>
            This class encapsulates the secific channel settings. The LeCroy device aggregates 4 channel instances.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor.
            </summary>
            <param name="oscilloscope">Reference of the aggregating class</param>
            <param name="channelNumber">Channel number</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnCreateFunctions">
            <summary>
            On create functions
            </summary>
            <returns>The functions</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestTrace">
            <summary>
            Get Trace.
            </summary>
            <returns>Returns Trace</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetTrace(System.Boolean)">
            <summary>
            Set Trace.
            </summary>
            <param name="value">Trace to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestVoltage">
            <summary>
            Get Voltage.
            </summary>
            <returns>Returns Voltage</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetVoltage(System.Nullable{System.Double})">
            <summary>
            Set Voltage.
            </summary>
            <param name="value">Voltage to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestOffset">
            <summary>
            Get Offset.
            </summary>
            <returns>Returns Offset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetOffset(System.Nullable{System.Double})">
            <summary>
            Set Offset.
            </summary>
            <param name="value">Offset to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestVerticalGain">
            <summary>
            Get VerticalGain.
            </summary>
            <returns>Returns VerticalGain</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestVerticalOffset">
            <summary>
            Get VerticalOffset.
            </summary>
            <returns>Returns VerticalOffset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestHorizontalOffset">
            <summary>
            Get HorizontalOffset.
            </summary>
            <returns>Returns HorizontalOffset</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestHorizontalInterval">
            <summary>
            Get HorizontalInterval.
            </summary>
            <returns>Returns HorizontalInterval</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetCoupling(ET.FW.Hal.Instruments.OsciCoupling)">
            <summary>
            Set Coupling.
            </summary>
            <param name="value">Coupling to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetBandwidthLimit(ET.FW.Hal.Instruments.OsciBandwidthLimits)">
            <summary>
            Set BandwidthLimit.
            </summary>
            <param name="value">BandwidthLimit to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestAttenuation">
            <summary>
            Get Attenuation.
            </summary>
            <returns>Returns Attenuation</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetAttenuation(ET.FW.Hal.Instruments.OsciAttenuations)">
            <summary>
            Set Attenuation.
            </summary>
            <param name="value">Attenuation to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetTriggerSlope(ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Set TriggerSlope.
            </summary>
            <param name="value">TriggerSlope to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnSetTriggerLevel(System.Double)">
            <summary>
            Set TriggerLevel.
            </summary>
            <param name="value">TriggerLevel to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnEdgeTrigger(System.Double,System.Double,ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Sets a edge trigger.
            </summary>
            <param name="level">Trigger level</param>
            <param name="delay">Trigger delay</param>
            <param name="slope">Trigger slope</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.ParameterValue(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue)">
            <summary>
            Returns the value of some device parameters defined in EnumParameterValue
            </summary>
            <param name="param">Parameter Enum value</param>
            <returns>Double value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnParameterValue(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.EnumParameterValue)">
            <summary>
            Returns the value of some device parameters defined in EnumParameterValue
            </summary>
            <param name="param">Parameter Enum value</param>
            <returns>Double value</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestMinimum">
            <summary>
            Get Minimum.
            </summary>
            <returns>Returns Minimum</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestMaximum">
            <summary>
            Get Maximum.
            </summary>
            <returns>Returns Maximum</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestFrequency">
            <summary>
            Get Frequency.
            </summary>
            <returns>Returns Frequency</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestPeriod">
            <summary>
            Get Period.
            </summary>
            <returns>Returns Period</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestAmplitude">
            <summary>
            Get Amplitude.
            </summary>
            <returns>Returns Amplitude</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnRequestCycles">
            <summary>
            Get Cycles.
            </summary>
            <returns>Returns Cycles</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Channel.OnReadWaveForm">
            <summary>
            Gets the wave form of this channel synchronous.
            </summary>
            <returns>The wave form or null in case of error.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function">
            <summary>
            Function methods.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor
            </summary>
            <param name="oscilloscope">The oscilloscope</param>
            <param name="channel">Channel number</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.OnSetGrid(System.Int32)">
            <summary>
            Sets the grid.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.OnSetMagnify(System.Single,System.Single)">
            <summary>
            Sets the magnification.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.OnSetPosition(System.Single,System.Single)">
            <summary>
            Sets the position.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.OnSetTrace(System.Boolean)">
            <summary>
            Sets Trace on or off.
            </summary>
            <param name="value">True to set on</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.OnSetDFT(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTAlgorithm,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTFilltype,System.Boolean)">
            <summary>
            Send DFT message
            </summary>
            <param name="output">DFT output</param>
            <param name="window">DFT window</param>
            <param name="algorithm">DFT algorithm</param>
            <param name="filltype">DFT filltype</param>
            <param name="suppressDC">Suppess DC</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Function.DFT(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTOutput,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTWindow,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTAlgorithm,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.DFTFilltype,System.Boolean)">
            <summary>
            Send DFT message
            </summary>
            <param name="output">DFT output</param>
            <param name="window">DFT window</param>
            <param name="algorithm">DFT algorithm</param>
            <param name="filltype">DFT filltype</param>
            <param name="suppressDC">Suppess DC</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy">
            <summary>
            LeCroy oscilloscope.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "Oscilloscope")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnCreateChannels">
            <summary>
            On create channels
            </summary>
            <returns>The channels</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnInit">
            <summary>
            On init
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnInitAfterReset">
            <summary>
            OnInit after Reset
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestGridStyle">
            <summary>
            Get OsciGridStyle.
            </summary>
            <returns>Returns OsciGridStyle</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetGridStyle(ET.FW.Hal.Instruments.OsciGridStyle)">
            <summary>
            Set OsciGridStyle.
            </summary>
            <param name="style">Style to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestTriggerMode">
            <summary>
            Get TriggerMode.
            </summary>
            <returns>Returns TriggerMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetTriggerMode(ET.FW.Hal.Instruments.OsciTriggerMode)">
            <summary>
            Set TriggerMode.
            </summary>
            <param name="mode">TriggerMode to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnClearSweeps">
            <summary>
            Clears Sweeps.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.CalibrationOutput(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes,System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsVolt,System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq)">
            <summary>
            Set the calibration output for all modes except PULSE:
            CALSQ : Provides a square signal
            LEVEL : Provides a DC signal at the requested level
            OFF : Provides no signal (ground level)
            PF : Pass/Fail mode
            TRIG : Trigger Out mode
            </summary>
            <param name="mode">Calibration Mode</param>
            <param name="level">Calibration voltage level</param>
            <param name="levelUnit"> Unit of level</param>
            <param name="rate">The Samplingrate</param>
            <param name="rateUnit">Unit of Samplingrate</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnCalibrationOutput(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.CalibrationModes,System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsVolt,System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsFreq)">
            <summary>
            Set the calibration output for all modes except PULSE:
            CALSQ : Provides a square signal
            LEVEL : Provides a DC signal at the requested level
            OFF : Provides no signal (ground level)
            PF : Pass/Fail mode
            TRIG : Trigger Out mode
            </summary>
            <param name="mode">Calibration Mode</param>
            <param name="level">Calibration voltage level</param>
            <param name="levelUnit"> Unit of level</param>
            <param name="rate">The Samplingrate</param>
            <param name="rateUnit">Unit of Samplingrate</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.CalibrationOutputPulse(System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime)">
            <summary>
            Set the calibration output for PULSE mode
            PULSE : Provides a single pulse
            </summary>
            <param name="width">Pulse width</param>
            <param name="widthlUnit">Unit of pulse width</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnCalibrationOutputPulse(System.Single,ET.FW.Hal.Instruments.Oscilloscope.Lecroy.UnitsTime)">
            <summary>
            Set the calibration output for PULSE mode
            PULSE : Provides a single pulse
            </summary>
            <param name="width">Pulse width</param>
            <param name="widthlUnit">Unit of pulse width</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestAutoCalibration">
            <summary>
            Get AutoCalibration.
            </summary>
            <returns>Returns AutoCalibration</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetAutoCalibration(System.Boolean)">
            <summary>
            Set AutoCalibration.
            </summary>
            <param name="value">AutoCalibration to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnCalibrate">
            <summary>
            Calibrates the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.ChannelCombine">
            <summary>
            Set/get the channel combination possibilities
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestChannelCombine">
            <summary>
            Get ChannelCombine.
            </summary>
            <returns>Returns ChannelCombine</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetChannelCombine(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.ChannelCombines)">
            <summary>
            Set ChannelCombine.
            </summary>
            <param name="value">ChannelCombine to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestDeviceDependentRegister">
            <summary>
            Get DeviceDependentRegister.
            </summary>
            <returns>Returns DeviceDependentRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestCommandErrorRegister">
            <summary>
            Get CommandErrorRegister.
            </summary>
            <returns>Returns CommandErrorRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestEventStatusRegister">
            <summary>
            Get EventStatusRegister.
            </summary>
            <returns>Returns EventStatusRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetEventStatusRegister(System.Nullable{System.Byte})">
            <summary>
            Set EventStatusRegister.
            </summary>
            <param name="value">EventStatusRegister to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestExtensionErrorRegister">
            <summary>
            Get ExtensionErrorRegister.
            </summary>
            <returns>Returns ExtensionErrorRegister</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.InternalStateEnableRegister">
            <summary>
            Gets / sets the INternal state change Enable register (INE).
            16384 : Probe was changed.
            8192  : Trigger is ready.
            4096  : Pass/Fail test detected desired outcome.
            2048  : Reserved
            1024  : Reserved
            512   : Reserved
            256   : Reserved
            128   : A floppy or hard disk exchange has been detected.
            64    : Floppy or hard disk has become full in AutoStore Fill mode.
            32    : Reserved for LeCroy use.
            16    : A segment of a sequence waveform has been acquired in acquisition
                    memory but not yet read out into the main memory.
            8     : A time-out has occurred in a data block transfer.
            4     : A return to the local state is detected.
            2     : A screen dump has terminated.
            1     : A new signal has been acquired in acquisition memory and read out into
                    the main memory.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestInternalStateEnableRegister">
            <summary>
            Get InternalStateEnableRegister.
            </summary>
            <returns>Returns InternalStateEnableRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetInternalStateEnableRegister(ET.FW.Hal.Instruments.Oscilloscope.Lecroy.InternalState)">
            <summary>
            Set InternalStateEnableRegister.
            </summary>
            <param name="value">InternalStateEnableRegister to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.InternalStateRegister">
            <summary>
            Read INternal state Register (INR)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestInternalStateRegister">
            <summary>
            Get InternalStateRegister.
            </summary>
            <returns>Returns InternalStateRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnArmAcquisition">
            <summary>
            arm the acquisition of data in LeCroy
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRecallSetup(System.String)">
            <summary>
            Recalls a front panel setup from mass storage.
            </summary>
            <param name="pathfile">Path of file</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnForceTrigger">
            <summary>
            Forces the instrument to make one acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnStopAcquisition">
            <summary>
            Immediately stops signal acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnWaitUntilReady(System.TimeSpan)">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <param name="timeout">Timeout to wait</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnClearStatus">
            <summary>
            Clears the status register
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnAutoSetup">
            <summary>
            Perform an auto setup 
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnGetDate">
            <summary>
            Get the current date of the device.
            </summary>
            <returns>Date as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetDate(System.DateTime)">
            <summary>
            Set the current date of the device.
            </summary>
            <param name="date">The date</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestDottedLines">
            <summary>
            Get DottedLines.
            </summary>
            <returns>Returns DottedLines</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetDottedLines(System.Boolean)">
            <summary>
            Set DottedLines.
            </summary>
            <param name="value">DottedLines to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestDisplay">
            <summary>
            Get Display.
            </summary>
            <returns>Returns Display</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetDisplay(System.Boolean)">
            <summary>
            Set Display.
            </summary>
            <param name="value">Display to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestTimebase">
            <summary>
            Get Timebase.
            </summary>
            <returns>Returns Timebase</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetTimebase(System.Nullable{System.Double})">
            <summary>
            Set Timebase.
            </summary>
            <param name="value">Timebase to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestMemorySize">
            <summary>
            Get MemorySize.
            </summary>
            <returns>Returns MemorySize</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetMemorySize(System.Nullable{System.Int32})">
            <summary>
            Set MemorySize.
            </summary>
            <param name="value">MemorySize to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestSampleMode">
            <summary>
            Get SampleMode.
            </summary>
            <returns>Returns SampleMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetSampleMode(ET.FW.Hal.Instruments.OsciSampleMode)">
            <summary>
            Set SampleMode.
            </summary>
            <param name="value">SampleMode to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestTriggerDelay">
            <summary>
            Get TriggerDelay.
            </summary>
            <returns>Returns TriggerDelay</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetTriggerDelay(System.Nullable{System.Double})">
            <summary>
            Set TriggerDelay.
            </summary>
            <param name="value">TriggerDelay to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestGridIntensity">
            <summary>
            Get GridIntensity.
            </summary>
            <returns>Returns GridIntensity</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnSetGridIntensity(System.Nullable{System.Int32})">
            <summary>
            Set GridIntensity.
            </summary>
            <param name="value">GridIntensity to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Lecroy.Lecroy.OnRequestTraceIntensity">
            <summary>
            Get TraceIntensity.
            </summary>
            <returns>Returns TraceIntensity</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Function">
            <summary>
            Function methods.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Function.Oscilloscope">
            <summary>
            The oscilloscope
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Function.Channel">
            <summary>
            Channel number
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.#ctor(ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope,System.Int32)">
            <summary>
            The Constructor
            </summary>
            <param name="oscilloscope">The oscilloscope</param>
            <param name="channel">Channel number</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Function.Grid">
            <summary>
            Sets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.OnSetGrid(System.Int32)">
            <summary>
            Sets the grid.
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.Magnify(System.Single,System.Single)">
            <summary>
            Sets the magnification.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.OnSetMagnify(System.Single,System.Single)">
            <summary>
            Sets the magnification.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.OnSetPosition(System.Single,System.Single)">
            <summary>
            Sets the position.
            </summary>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Function.Trace">
            <summary>
            Sets Trace on or off.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Function.OnSetTrace(System.Boolean)">
            <summary>
            Sets Trace on or off.
            </summary>
            <param name="value">True to set on</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel">
            <summary>
            Common oscilloscope channel API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.ChannelNumber">
            <summary>
            Gets the channel number.
            </summary>
            <value>The channel number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Attenuation">
            <summary>
            Gets or sets the attenuation.
            </summary>
            <value>The attenuation.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.BandwidthLimit">
            <summary>
            Sets the bandwidth limit.
            </summary>
            <value>The bandwidth limit.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Coupling">
            <summary>
            Sets the coupling.
            </summary>
            <value>The coupling.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.EdgeTrigger(System.Double,System.Double,ET.FW.Hal.Instruments.OsciTriggerSlope)">
            <summary>
            Sets the edge trigger.
            </summary>
            <param name="level">The level.</param>
            <param name="delay">The delay.</param>
            <param name="slope">The slope.</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Offset">
            <summary>
            Sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Trace">
            <summary>
            Switches the trace on or off.
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.TriggerLevel">
            <summary>
            Sets the trigger level.
            </summary>
            <value>The trigger level.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.TriggerSlope">
            <summary>
            Sets the trigger slope.
            </summary>
            <value>The trigger slope.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Voltage">
            <summary>
            Sets the voltage.
            </summary>
            <value>The voltage.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Maximum">
            <summary>
            Returns the maximum value.
            </summary>
            <returns>The maximum value</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Minimum">
            <summary>
            Returns the minimum value.
            </summary>
            <returns>The minimum value</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Frequency">
            <summary>
            Returns the frequency.
            </summary>
            <returns>The frequency</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Period">
            <summary>
            Returns the period.
            </summary>
            <returns>The period</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Amplitude">
            <summary>
            Returns the amplitude.
            </summary>
            <returns>The amplitude</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.Cycles">
            <summary>
            Returns the cycles on screen.
            </summary>
            <returns>The cycles on screen</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.GetWaveForm">
            <summary>
            Gets the wave form of this channel.
            </summary>
            <returns>Job to monitor the reading of the voltage curve.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOsciChannel.SaveVoltageCurve(System.String)">
            <summary>
            Reads the current voltage curve of this channel and saves it to disk.
            </summary>
            <param name="filename">The name of the voltage curve file.</param>
            <returns>Job to monitor the reading and saving of the voltage curve.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope">
            <summary>
            Common oscilloscope API definition.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.DeviceIdentification">
            <summary>
            Get device identification string.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Send(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.RequestAsync(System.String,System.TimeSpan)">
            <summary>
            Sends the specified request async.
            The Result of the RequestJob contains the answer.
            </summary>
            <param name="text">The text to send.</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The RequestJob containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Request(System.String,System.TimeSpan)">
            <summary>
            Sends the specified request synchron.
            </summary>
            <param name="text">The text to send.</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Reset">
            <summary>
            Resets the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Channels">
            <summary>
            Gets a list of the available channels.
            </summary>
            <value>The channels.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.GridStyle">
            <summary>
            Gets or sets the grid style.
            </summary>
            <value>The grid style.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.TriggerMode">
            <summary>
            Gets or sets the trigger mode.
            </summary>
            <value>The trigger mode.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.ClearSweeps">
            <summary>
            Restarts the cumulative processing functions.
            </summary>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.ArmAcquisition">
            <summary>
            Changes acquisition state from “stopped” to “single.” 
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.StopAcquisition">
            <summary>
            Immediately stops signal acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.WaitUntilReady">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.WaitUntilReady(System.TimeSpan)">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <param name="timeout">Timeout to wait</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.AutoCalibration">
            <summary>
            Gets or sets auto calibration.
            </summary>
            <value><c>true</c> if [auto calibration]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Calibrate">
            <summary>
            Calibrates the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.AutoSetup">
            <summary>
            Adjusts vertical, timebase and trigger parameters.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.ClearStatus">
            <summary>
            Clears all status data registers.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.CommandErrorRegister">
            <summary>
            Reads and clears the CoMmand error Register (CMR).
            </summary>
            <value>The command error register content.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.DeviceDependentRegister">
            <summary>
            Reads, clears the Device Dependent Register (DDR).
            </summary>
            <value>The device dependent register content.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Display">
            <summary>
            Controls the display screen.
            </summary>
            <value><c>true</c> if display is on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.DottedLines">
            <summary>
            Controls the interpolation lines between data points.
            </summary>
            <value><c>true</c> if [dotted lines]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.EventStatusRegister">
            <summary>
            Sets / gets the event status register.
            </summary>
            <value>The event status register.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.ExtensionErrorRegister">
            <summary>
            Gets the extension error register.
            </summary>
            <value>The extension error register.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.ForceTrigger">
            <summary>
            Forces the instrument to make one acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.GetDate">
            <summary>
            Get the current date of the device.
            </summary>
            <returns>Current date</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.GridIntensity">
            <summary>
            Gets / sets the grid intensity in percent (0..100).
            </summary>
            <value>The grid intensity.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.RecallSetup(System.String)">
            <summary>
            Recalls a front panel setup from mass storage.
            </summary>
            <param name="pathfile">The pathfile.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.SetDate(System.DateTime)">
            <summary>
            Set the current date of the device.
            </summary>
            <param name="date">The date.</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.Timebase">
            <summary>
            Sets the timebase.
            </summary>
            <value>The timebase.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.MemorySize">
            <summary>
            Gets / sets the memory size used to capture waveforms.
            </summary>
            <value>The memory size.</value>
            <remarks>
            The oscilloscope will adapt to the closest valid size according to available channel memory.
            </remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.TriggerDelay">
            <summary>
            Sets the time at which the trigger is to occur.
            </summary>
            <value>The trigger delay.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.IOscilloscope.SampleMode">
            <summary>
            Sets or gets sample mode of oscilloscope
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope">
            <summary>
            LeCroy oscilloscope.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.defaultResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ChannelCount">
            <summary>
            Gets or sets the channel count.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.NoInitialReset">
            <summary>
            Determines if instrument is reset in Init().
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Channels">
            <summary>
            Gets a list of the available channels.
            </summary>
            <value>The channels.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "Oscilloscope")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the Lecroy parameters.
            </summary>
            <param name="parameters">Parameters from the testbench.xml file.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnCreateChannels">
            <summary>
            On create channels
            </summary>
            <returns>The channels</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnInit">
            <summary>
            On init
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.RequestAsync(System.Byte[])">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <param name="request">The request to send.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.RequestAsync(System.String,System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <param name="request">The request to send.</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Request(System.String,System.TimeSpan)">
            <summary>
            Sends the specified request synchron.
            </summary>
            <param name="text">The text to send.</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Send(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnInternalSend(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSend(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequest(System.String)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="text">The text to send.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequest(System.Byte[])">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="request">The binary request.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.DeviceIdentification">
            <summary>
            Get device identification string.
            </summary>
            <value>The device identification string.</value>
            <remarks>Returns <c>null</c> if an error occurred.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestDeviceIdentification">
            <summary>
            Requests device identification
            </summary>
            <returns>Device identification</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Reset">
            <summary>
            Resets the power supply.
            </summary>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnReset">
            <summary>
            Resets the power supply.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.GridStyle">
            <summary>
            Gets or sets the grid style.
            </summary>
            <value>The grid style.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestGridStyle">
            <summary>
            Get OsciGridStyle.
            </summary>
            <returns>Returns OsciGridStyle</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetGridStyle(ET.FW.Hal.Instruments.OsciGridStyle)">
            <summary>
            Set OsciGridStyle.
            </summary>
            <param name="style">Style to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.TriggerMode">
            <summary>
            Gets or sets the trigger mode.
            </summary>
            <value>The trigger mode.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestTriggerMode">
            <summary>
            Get TriggerMode.
            </summary>
            <returns>Returns TriggerMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetTriggerMode(ET.FW.Hal.Instruments.OsciTriggerMode)">
            <summary>
            Set TriggerMode.
            </summary>
            <param name="mode">TriggerMode to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ClearSweeps">
            <summary>
            Restarts the cumulative processing functions.
            </summary>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnClearSweeps">
            <summary>
            Clears Sweeps.
            </summary>
            <returns><value><c>true</c> if successful; otherwise, <c>false</c>.</value></returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.AutoCalibration">
            <summary>
            Gets / sets the auto calibration flag
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestAutoCalibration">
            <summary>
            Get AutoCalibration.
            </summary>
            <returns>Returns AutoCalibration</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetAutoCalibration(System.Boolean)">
            <summary>
            Set AutoCalibration.
            </summary>
            <param name="value">AutoCalibration to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Calibrate">
            <summary>
            Calibrates the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnCalibrate">
            <summary>
            Calibrates the oscilloscope.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.DeviceDependentRegister">
            <summary>
            Returns the device dependent register of the instrument. The bits have the following meaning:
            8192  Timebase hardware failure detected
            4096 : Trigger hardware failure detected
            2048 : Channel 4 hardware failure detected
            1024 : Channel 3 hardware failure detected
            512 : Channel 2 hardware failure detected
            256 : Channel 1 hardware failure detected
            128 : External input overload condition detected
            6...4 : Reserved
            8 : Channel 4 overload condition detected
            4 : Channel 3 overload condition detected
            2 : Channel 2 overload condition detected
            1 : Channel 1 overload condition detected
            </summary>
            <value>The device dependent register. Returns null in case of error.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestDeviceDependentRegister">
            <summary>
            Get DeviceDependentRegister.
            </summary>
            <returns>Returns DeviceDependentRegister</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.CommandErrorRegister">
            <summary>
            Gets the value of the Command Error Register:
            1 Unrecognized command/query header
            2 Illegal header path
            3 Illegal number
            4 Illegal number suffix
            5 Unrecognized keyword
            6 String error
            7 GET embedded in another message
            10 Arbitrary data block expected
            11 Non-digit character in byte count field of arbitrary data block
            12 EOI detected during definite length data block transfer
            13 Extra bytes detected during definite length data block transfer
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestCommandErrorRegister">
            <summary>
            Get CommandErrorRegister.
            </summary>
            <returns>Returns CommandErrorRegister</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.EventStatusRegister">
            <summary>
            Sets / gets the event status register. The bits have the following meanings:
            15...8 : Reserved by IEEE 488.2
            128 PON : Power off-to-ON transition has occurred 1.
            64 URQ : not used 2.
            32 CME : CoMmand parser Error has been detected 3.
            16 EXE : EXecution Error detected 4.
            8 DDE : Device Dependent (specific) Error occurred 5.
            4 QYE : QuerY Error occurred 6.
            2 RQC : Oscilloscope never ReQuests bus Control 7.
            1 OPC : OPeration Complete bit not used 8.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestEventStatusRegister">
            <summary>
            Get EventStatusRegister.
            </summary>
            <returns>Returns EventStatusRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetEventStatusRegister(System.Nullable{System.Byte})">
            <summary>
            Set EventStatusRegister.
            </summary>
            <param name="value">EventStatusRegister to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ExtensionErrorRegister">
            <summary>
            Gets the extension error register. Meanings:
            21 Permission error. The command cannot be executed in local mode.
            22 Environment error. The oscilloscope is not configured to correctly process a command. For
               instance, the oscilloscope cannot be set to RIS at a slow timebase.
            23 Option error. The command applies to an option which has not been installed.
            24 Unresolved parsing error.
            25 Parameter error. Too many parameters specified.
            26 Non-implemented command.
            27 Parameter missing. A parameter was expected by the command.
            30 Hex data error. A non-hexadecimal character has been detected in a hex data block.
            31 Waveform error. The amount of data received does not correspond to descriptor indicators.
            32 Waveform descriptor error. An invalid waveform descriptor has been detected.
            33 Waveform text error. A corrupted waveform user text has been detected.
            34 Waveform time error. Invalid RIS or TRIG time data has been detected.
            35 Waveform data error. Invalid waveform data have been detected.
            36 Panel setup error. An invalid panel setup data block has been detected.
            50 No mass storage present when user attempted to access it. *
            51 Mass storage not formatted when user attempted to access it. *
            53 Mass storage was write protected when user attempted to create a file, to delete a file, or to format
               the device. *
            54 Bad mass storage detected during formatting. *
            55 Mass storage root directory full. Cannot add directory. *
            56 Mass storage full when user attempted to write to it. *
            57 Mass storage file sequence numbers exhausted (999 reached). *
            58 Mass storage file not found. *
            59 Requested directory not found. *
            61 Mass storage filename not DOS compatible, or illegal filename. *
            62 Cannot write on mass storage because filename already exists. *
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestExtensionErrorRegister">
            <summary>
            Get ExtensionErrorRegister.
            </summary>
            <returns>Returns ExtensionErrorRegister</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ArmAcquisition">
            <summary>
            arm the acquisition of data in LeCroy
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnArmAcquisition">
            <summary>
            arm the acquisition of data in LeCroy
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.RecallSetup(System.String)">
            <summary>
            Recalls a front panel setup from mass storage.
            </summary>
            <param name="pathfile">Path of file</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRecallSetup(System.String)">
            <summary>
            Recalls a front panel setup from mass storage.
            </summary>
            <param name="pathfile">Path of file</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ForceTrigger">
            <summary>
            Forces the instrument to make one acquisition.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnForceTrigger">
            <summary>
            Forces the instrument to make one acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.StopAcquisition">
            <summary>
            Immediately stops signal acquisition.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnStopAcquisition">
            <summary>
            Immediately stops signal acquisition.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.WaitUntilReady">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.WaitUntilReady(System.TimeSpan)">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <param name="timeout">Timeout to wait</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnWaitUntilReady(System.TimeSpan)">
            <summary>
            Wait until oscilloscope is ready.
            </summary>
            <param name="timeout">Timeout to wait</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.ClearStatus">
            <summary>
            Clears the status register
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnClearStatus">
            <summary>
            Clears the status register
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.AutoSetup">
            <summary>
            Perform an auto setup 
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnAutoSetup">
            <summary>
            Perform an auto setup 
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.GetDate">
            <summary>
            Get the current date of the device.
            </summary>
            <returns>Date as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnGetDate">
            <summary>
            Get the current date of the device.
            </summary>
            <returns>Date as string</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.SetDate(System.DateTime)">
            <summary>
            Set the current date of the device.
            </summary>
            <param name="date">The date</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetDate(System.DateTime)">
            <summary>
            Set the current date of the device.
            </summary>
            <param name="date">The date</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.DottedLines">
            <summary>
            Switch dotted lines on or off
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestDottedLines">
            <summary>
            Get DottedLines.
            </summary>
            <returns>Returns DottedLines</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetDottedLines(System.Boolean)">
            <summary>
            Set DottedLines.
            </summary>
            <param name="value">DottedLines to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Display">
            <summary>
            Switches the display on or off
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestDisplay">
            <summary>
            Get Display.
            </summary>
            <returns>Returns Display</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetDisplay(System.Boolean)">
            <summary>
            Set Display.
            </summary>
            <param name="value">Display to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Timebase">
            <summary>
            Sets the timebase.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestTimebase">
            <summary>
            Get Timebase.
            </summary>
            <returns>Returns Timebase</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetTimebase(System.Nullable{System.Double})">
            <summary>
            Set Timebase.
            </summary>
            <param name="value">Timebase to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.MemorySize">
            <summary>
            Gets / sets the memory size used to capture waveforms.
            </summary>
            <value>The memory size.</value>
            <remarks>
            The oscilloscope will adapt to the closest valid size according to available channel memory.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestMemorySize">
            <summary>
            Get MemorySize.
            </summary>
            <returns>Returns MemorySize</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetMemorySize(System.Nullable{System.Int32})">
            <summary>
            Set MemorySize.
            </summary>
            <param name="value">MemorySize to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.SampleMode">
            <summary>
            Sets or gets sample mode of oscilloscope
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestSampleMode">
            <summary>
            Get SampleMode.
            </summary>
            <returns>Returns SampleMode</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetSampleMode(ET.FW.Hal.Instruments.OsciSampleMode)">
            <summary>
            Set SampleMode.
            </summary>
            <param name="value">SampleMode to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.TriggerDelay">
            <summary>
            Sets the time at which the trigger is to occur.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestTriggerDelay">
            <summary>
            Get TriggerDelay.
            </summary>
            <returns>Returns TriggerDelay</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetTriggerDelay(System.Nullable{System.Double})">
            <summary>
            Set TriggerDelay.
            </summary>
            <param name="value">TriggerDelay to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.GridIntensity">
            <summary>
            Gets / sets the grid intensity in percent (0..100).
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestGridIntensity">
            <summary>
            Get GridIntensity.
            </summary>
            <returns>Returns GridIntensity</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnSetGridIntensity(System.Nullable{System.Int32})">
            <summary>
            Set GridIntensity.
            </summary>
            <param name="value">GridIntensity to set</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.TraceIntensity">
            <summary>
            Gets the Trace-Intensity, should be always 100
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.OnRequestTraceIntensity">
            <summary>
            Get TraceIntensity.
            </summary>
            <returns>Returns TraceIntensity</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.FormatResponseValue(System.String,System.Single@,System.String@)">
            <summary>
            Formats a response string of the LeCroy and returns the result and the unit.
            </summary>
            <param name="response">response string</param>
            <param name="value">returned value</param>
            <param name="unit">returned unit</param>
            <returns>true: no error; false: error</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.AddSystemError(System.String)">
            <summary>
            Add system error
            </summary>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Oscilloscope.Oscilloscope.Convert10Potenz(System.String)">
            <summary>
            Converts a 1000 in 1k 
            </summary>
            <param name="value">The value.</param>
            <returns>return the string with K or M</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.MostMatrix">
            <summary>
            MostMatrix external device.
            </summary>
            <remarks>
            RS232 parameters :
            9600 Baud
            7 Databits
            even parity
            1 stop bit
            </remarks>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.NoVersionQuery">
            <summary>
            Determines if version is queried in Init().
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.acknowledge">
            <summary>
            Acknowledge flag, set in busProtocol_UplinkOutput.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.response">
            <summary>
            Received response string from MostMatrix.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.portAssignment">
            <summary>
            Contains the device/port assigments.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.MostMatrix.portsConnected">
            <summary>
            Ordered list of the connected ports.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.#ctor(System.String,ET.FW.Core.Common.ParameterCollection)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
            <param name="parameter">Parameter from the xml file containing device/port assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the MostMatrix parameters.
            </summary>
            <param name="parameters">Parameter from the xml file containing FirstPortNumber, LastPortNumber and port/device assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.ReadSoftwareVersion">
            <summary>
            Reads Software Version
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.FirstPortNumber">
            <summary>
            Gets or sets the first port number.
            </summary>
            <value>The first port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.LastPortNumber">
            <summary>
            Gets or sets the last port number.
            </summary>
            <value>The last port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.PortNames">
            <summary>
            Gets or sets the list of port names.
            This is a comma separated list of pairs of port number and port name.
            The port number and the port name are separated by a ':'
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.GetPortName(System.Int32)">
            <summary>
            Gets port name
            </summary>
            <param name="index">Port index</param>
            <returns>Port name</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.SetPortName(System.Int32,System.String)">
            <summary>
            Sets port name
            </summary>
            <param name="index">Port index</param>
            <param name="name">Port name</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port01Name">
            <summary>
            Gets or sets the port 1 name.
            </summary>
            <value>The port 1 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port02Name">
            <summary>
            Gets or sets the port 2 name.
            </summary>
            <value>The port 2 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port03Name">
            <summary>
            Gets or sets the port 3 name.
            </summary>
            <value>The port 3 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port04Name">
            <summary>
            Gets or sets the port 4 name.
            </summary>
            <value>The port 4 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port05Name">
            <summary>
            Gets or sets the port 5 name.
            </summary>
            <value>The port 5 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port06Name">
            <summary>
            Gets or sets the port 6 name.
            </summary>
            <value>The port 6 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port07Name">
            <summary>
            Gets or sets the port 7 name.
            </summary>
            <value>The port 7 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port08Name">
            <summary>
            Gets or sets the port 8 name.
            </summary>
            <value>The port 8 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port09Name">
            <summary>
            Gets or sets the port 9 name.
            </summary>
            <value>The port 9 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port10Name">
            <summary>
            Gets or sets the port 10 name.
            </summary>
            <value>The port 10 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port11Name">
            <summary>
            Gets or sets the port 11 name.
            </summary>
            <value>The port 11 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.MostMatrix.Port12Name">
            <summary>
            Gets or sets the port 12 name.
            </summary>
            <value>The port 12 name.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Reset">
            <summary>
            Resets the MostMatrix.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.TestModeOn(System.Int32)">
            <summary>
            Starts the test mode.
            </summary>
            <param name="port">The port to test.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.PortNumberOk(System.Int32)">
            <summary>
            Checks the port number.
            </summary>
            <param name="port">The port.</param>
            <returns><c>true</c> if port number is inside port range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.TestModeOn(System.String)">
            <summary>
            Starts the test mode.
            </summary>
            <param name="device">The name of the device to test.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.TestModeOff">
            <summary>
            Stops the test mode.
            </summary>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.ByPass(System.Int32)">
            <summary>
            Bypass the given port by removing its connections and direct connecting of previous and following ring port.
            </summary>
            <param name="port">The port to bypass.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.ByPass(System.String)">
            <summary>
            Bypass the given device by removing its connections and direct connecting of previous and following ring device.
            </summary>
            <param name="device">The name of the device to bypass.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.PortFromDevice(System.String)">
            <summary>
            Get matrix port of the given device.
            </summary>
            <param name="device">name of the MOST device</param>
            <returns>port number of the device or -1 if device is not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.DeviceFromPort(System.Int32)">
            <summary>
            Get device name at the given matrix port.
            </summary>
            <param name="port">The port number.</param>
            <returns>
            Name of the device, 'port' if no device is assigned to this port
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Connect(System.Collections.IList)">
            <summary>
            Connects the specified ports in list order.
            </summary>
            <param name="portList">Ordered list of ports (int) or devices (string).</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.ConnectedPorts">
            <summary>
            Returns the currently connected ports.
            </summary>
            <returns>Dictionary of the connected ports</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.ConnectedDevices">
            <summary>
            Returns the currently connected devices.
            </summary>
            <returns>Dictionary of the connected devices</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Connect(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Connects the specified ports in list order.
            </summary>
            <param name="portList">The ordered list of ports.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Connect(System.Collections.Generic.IList{System.String})">
            <summary>
            Connects the specified devices in list order.
            </summary>
            <param name="devices">Ordered list of devices.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Connect(System.Int32,System.Int32)">
            <summary>
            Connects the specified ports.
            </summary>
            <param name="portIn">The input port.</param>
            <param name="portOut">The output port.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Connect(System.String,System.String)">
            <summary>
            Connects the specified devices.
            </summary>
            <param name="deviceIn">Name of the in-device.</param>
            <param name="deviceOut">Name of the out-device.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Burst(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Burst mode between 2 ports.
            </summary>
            <param name="portIn">Number of the in-port.</param>
            <param name="portOut">Number of the out-port.</param>
            <param name="disconnected">Disconnected timespan in 100us.</param>
            <param name="connected">Connected timespan in 100us.</param>
            <param name="connectCycles">Amount of disconnect/connect cycles.</param>
            <param name="pause">Pause timespan in 100us (connected).</param>
            <param name="repeatFactor">Repeat factor.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Burst(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Burst mode between 2 devices.
            </summary>
            <param name="deviceIn">Name of the in-device.</param>
            <param name="deviceOut">Name of the out-device.</param>
            <param name="disconnected">Disconnected timespan in 100us.</param>
            <param name="connected">Connected timespan in 100us.</param>
            <param name="connectCycles">Amount of disconnect/connect cycles.</param>
            <param name="pause">Pause timespan in 100us (connected).</param>
            <param name="repeatFactor">Repeat factor.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.MostMatrix.Send(System.String)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.NativeStructSerializer">
            <summary>
            String descriptor
            (See 9.6.7)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.NativeStructSerializer.RawSerialize(System.Object)">
            <summary>
            Serializes native structs to array of bytes
            </summary>
            <param name="anything">any string</param>
            <returns>BYte array</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.NativeStructSerializer.RawDeserialize``1(System.Byte[])">
            <summary>
            Converts a byte array back to a native struct
            </summary>
            <typeparam name="T">Type of return</typeparam>
            <param name="rawData">Byte array</param>
            <returns>Value with Type T</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.PowerMatrix">
            <summary>
            PowerMatrix external device.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.NoInitialReset">
            <summary>
            Determines if Reset() is called in Init().
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.SerialNumber">
            <summary>
            The serial number of the device.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.DeviceIndex">
            <summary>
            Index of this device.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMatrix.usbI2c">
            <summary>
            usbi2cio.dll support.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMatrix.portAssignment">
            <summary>
            Contains the port/device assigments.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.PowerMatrix.relayAssignment">
            <summary>
            Contains the port/relay assigments.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.#ctor(System.String,ET.FW.Core.Common.ParameterCollection)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
            <param name="parameter">Parameter from the xml file containing device/port assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetParameters(ET.FW.Core.Common.ParameterCollection)">
            <summary>
            Sets the PowerMatrix parameters.
            </summary>
            <param name="parameters">Parameter from the xml file containing FirstPortNumber, LastPortNumber and port/device assignment</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.FirstPortNumber">
            <summary>
            Gets or sets the first port number.
            </summary>
            <value>The first port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.LastPortNumber">
            <summary>
            Gets or sets the last port number.
            </summary>
            <value>The last port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.FirstRelayPortNumber">
            <summary>
            Gets or sets the first relay port number.
            </summary>
            <value>The first relay port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.LastRelayPortNumber">
            <summary>
            Gets or sets the last relay port number.
            </summary>
            <value>The last relay port number.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.PortNames">
            <summary>
            Gets or sets the list of port names.
            This is a comma separated list of pairs of port number and port name.
            The port number and the port name are separated by a ':'
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port01Name">
            <summary>
            Gets or sets the port 1 name.
            </summary>
            <value>The port 1 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port02Name">
            <summary>
            Gets or sets the port 2 name.
            </summary>
            <value>The port 2 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port03Name">
            <summary>
            Gets or sets the port 3 name.
            </summary>
            <value>The port 3 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port04Name">
            <summary>
            Gets or sets the port 4 name.
            </summary>
            <value>The port 4 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port05Name">
            <summary>
            Gets or sets the port 5 name.
            </summary>
            <value>The port 5 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port06Name">
            <summary>
            Gets or sets the port 6 name.
            </summary>
            <value>The port 6 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port07Name">
            <summary>
            Gets or sets the port 7 name.
            </summary>
            <value>The port 7 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port08Name">
            <summary>
            Gets or sets the port 8 name.
            </summary>
            <value>The port 8 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port09Name">
            <summary>
            Gets or sets the port 9 name.
            </summary>
            <value>The port 9 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port10Name">
            <summary>
            Gets or sets the port 10 name.
            </summary>
            <value>The port 10 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port11Name">
            <summary>
            Gets or sets the port 11 name.
            </summary>
            <value>The port 11 name.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.PowerMatrix.Port12Name">
            <summary>
            Gets or sets the port 12 name.
            </summary>
            <value>The port 12 name.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.GetPortName(System.Int32)">
            <summary>
            Gets port name
            </summary>
            <param name="index">Port index</param>
            <returns>Port name</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPortName(System.Int32,System.String)">
            <summary>
            Sets Port name
            </summary>
            <param name="index">Port index</param>
            <param name="name">Port name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.Reset">
            <summary>
            Resets the PowerMatrix.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPower(System.Int32,ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="mode">The new power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.GetPower(System.Int32,ET.FW.Hal.Instruments.PowerMode@)">
            <summary>
            Gets the power mode of the given port.
            </summary>
            <param name="port">The port to read (1..12).</param>
            <param name="mode">The current power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPower(System.String,ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="mode">The new power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPowerAll(ET.FW.Hal.Instruments.PowerMode)">
            <summary>
            Sets the power mode of all ports.
            </summary>
            <param name="mode">The new power mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetWakeupLine(System.Int32,System.Boolean)">
            <summary>
            Sets the wakeup line of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.GetWakeupLine(System.Int32,System.Boolean@)">
            <summary>
            Gets the wakeup line of the given port.
            </summary>
            <param name="port">The port to read (1..12).</param>
            <param name="on">Current wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetWakeupLine(System.String,System.Boolean)">
            <summary>
            Sets the wakeup line of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="on">New wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetWakeupLineAll(System.Boolean)">
            <summary>
            Sets the wakeup line of all ports.
            </summary>
            <param name="on">New wakeup line state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPowerRelay(System.Int32,System.Boolean)">
            <summary>
            Sets the power relay of the given port.
            </summary>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPowerRelay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the power relay of the given port.
            </summary>
            <param name="moduleIndex">Index of the relay module.</param>
            <param name="port">The port to change (1..12).</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPowerRelay(System.String,System.Boolean)">
            <summary>
            Sets the power relay of the given device.
            </summary>
            <param name="device">The device to change.</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.SetPowerRelay(System.Int32,System.String,System.Boolean)">
            <summary>
            Sets the power relay of the given device.
            </summary>
            <param name="moduleIndex">Index of the relay module.</param>
            <param name="device">The device to change.</param>
            <param name="on">New power relay state.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.PortFromDevice(System.String)">
            <summary>
            Get matrix port of the given device.
            </summary>
            <param name="device">name of the device</param>
            <returns>port number of the device or -1 if device is not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.DeviceFromPort(System.Int32)">
            <summary>
            Get device name at the given matrix port.
            </summary>
            <param name="port">The port number.</param>
            <returns>
            Name of the device, 'port' if no device is assigned to this port
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.PortFromRelay(System.String)">
            <summary>
            Get the relay port of the given relay name.
            </summary>
            <param name="relay">name of the relay</param>
            <returns>port number of the relay or -1 if relay is not found</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.PortNumberOk(System.Int32)">
            <summary>
            Checks the port number.
            </summary>
            <param name="port">The port.</param>
            <returns><c>true</c> if port number is inside port range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.PowerMatrix.RelayPortNumberOk(System.Int32)">
            <summary>
            Checks the relay number.
            </summary>
            <param name="port">The relay port.</param>
            <returns><c>true</c> if relay port number is inside relay port range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.RDSGenerator">
            <summary>
            RDSGenerator external device.
            </summary>
            <remarks>
            RS232 parameters :
            9600 Baud
            7 Databits
            even parity
            1 stop bit
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.RDSGenerator.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.RDSGenerator.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
            <remarks>This implementation supports exactly one downlink protocol which is copied to Downlink property</remarks>
        </member>
        <member name="P:ET.FW.Hal.Instruments.RDSGenerator.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.RDSGenerator.Send(System.String)">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.SynchronizedDevice">
            <summary>
            Abstract class implementing base functionality external device with synchronized call methodes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of device</param>
        </member>
        <member name="E:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedStatusEvent">
            <summary>
            Event to notified device busy or not available 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.RaiseSynchronizedStatusEvent(System.Boolean)">
            <summary>
            Raises SynchronizedStatusEvent
            </summary>
            <param name="busy">True if device is busy, otherwise device is not available</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedDevice.IsBusy">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.Core.Hal.IExternalDevice"/> is busy on operating.
            </summary>
            <value><c>true</c> if busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedDevice.IsDeviceAvailable">
            <summary>
            Checks if device available. If not available a error message will be logged.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedCheckAndSetBusy(System.Boolean)">
            <summary>
            Checks busy flag and set busy if not busy
            </summary>
            <param name="busy">True to set to busy</param>
            <returns>True if checking and setting was successful</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedDevice.IsAvailableCheckAndSetBusy">
            <summary>
            Checks device available and not busy, then sets busy
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.OnSynchronizedStarted">
            <summary>
            On SynchronizedStarted
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.OnSynchronizedEnded">
            <summary>
            On SynchronizedEnded
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedGetProperty``1(System.Func{``0})">
            <summary>
            Synchronized Get Property
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="funcGet">Get function</param>
            <returns>Value of property</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedSetProperty``1(System.Action{``0},``0)">
            <summary>
            Synchronized Set Property
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="funcSet">Set function</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``1(System.Func{``0})">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``2(System.Func{``0,``1},``0)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam">Type of Parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param">The parameter</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TParam4">Type of Parameter4</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <param name="param4">The parameter4</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCall``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TParam4">Type of Parameter4</typeparam>
            <typeparam name="TParam5">Type of Parameter5</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <param name="param4">The parameter4</param>
            <param name="param5">The parameter5</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCallAsync``1(System.Func{``0},System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Get function</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.OnCallAndResetBusy``1(System.Func{``0})">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">The Function to call.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCallAsync``2(System.Func{``0,``1},``0,System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TParam">Type of Parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param">The parameter</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.OnCallAndResetBusy``2(System.Func{``0,``1},``0)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <typeparam name="TParam">Type of Parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">The Function to call.</param>
            <param name="param">The parameter</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.SynchronizedOnCallAsync``3(System.Func{``0,``1,``2},``0,``1,System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedDevice.OnCallAndResetBusy``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">The Function to call.</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.SynchronizedRetryDevice">
            <summary>
            
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of device</param>
        </member>
        <member name="E:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedStatusEvent">
            <summary>
            Event to notified device busy or not available 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.RaiseSynchronizedStatusEvent(System.Boolean)">
            <summary>
            Raises SynchronizedStatusEvent
            </summary>
            <param name="busy">True if device is busy, otherwise device is not available</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedRetryDevice.IsAvailableCheckAndSetBusy">
            <summary>
            Checks device available and not busy, then sets busy
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedRetryDevice.IsBusy">
            <summary>
            Gets a value indicating whether this <see cref="T:ET.FW.Core.Hal.IExternalDevice"/> is busy on operating.
            </summary>
            <value><c>true</c> if busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedGetProperty``1(System.Func{``0})">
            <summary>
            Synchronized Get Property
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="funcGet">Get function</param>
            <returns>Value of property</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.OnSynchronizedStarted">
            <summary>
            On SynchronizedStarted
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.OnSynchronizedEnded">
            <summary>
            On SynchronizedEnded
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedCheckAndSetBusy(System.Boolean)">
            <summary>
            Checks busy flag and set busy if not busy
            </summary>
            <param name="busy">True to set to busy</param>
            <returns>True if checking and setting was successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedSetProperty``1(System.Action{``0},``0)">
            <summary>
            Synchronized Set Property
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="funcSet">Set function</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``1(System.Func{``0})">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``2(System.Func{``0,``1},``0)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam">Type of Parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param">The parameter</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TParam4">Type of Parameter4</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <param name="param4">The parameter4</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCall``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Synchronized On call
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TParam3">Type of Parameter3</typeparam>
            <typeparam name="TParam4">Type of Parameter4</typeparam>
            <typeparam name="TParam5">Type of Parameter5</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="param3">The parameter3</param>
            <param name="param4">The parameter4</param>
            <param name="param5">The parameter5</param>
            <returns>Value of result</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCallAsync``1(System.Func{``0},System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Get function</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCallAsync``2(System.Func{``0,``1},``0,System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TParam">Type of Parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param">The parameter</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.OnCallAndResetBusy``1(System.Func{``0})">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">The Function to call.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.SynchronizedOnCallAsync``3(System.Func{``0,``1,``2},``0,``1,System.TimeSpan)">
            <summary>
            Sends the specified request.
            The Result of the RequestJob contains the answer.
            </summary>
            <typeparam name="TParam1">Type of Parameter1</typeparam>
            <typeparam name="TParam2">Type of Parameter2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="funcCall">Call function</param>
            <param name="param1">The parameter1</param>
            <param name="param2">The parameter2</param>
            <param name="timeout">The timeout for the request.</param>
            <returns>
            The job containing the answer of the device.
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.SynchronizedRetryDevice.IsDeviceAvailable">
            <summary>
            Checks if device available. If not available a error message will be logged.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.SynchronizedRetryDevice.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            
            </summary>
            <param name="downlinks"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ET.FW.Hal.Instruments.TemperatureChamber">
            <summary>
            TemperatureChamber external device.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.TemperatureChamber.ResponseTimeout">
            <summary>
            Timeout for responses in milliseconds.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.TemperatureChamber.Address">
            <summary>
            Address of the TemperatureChamber.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.TemperatureChamber.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.TemperatureChamber.acknowledge">
            <summary>
            Acknowledge flag, set in busProtocol_UplinkOutput.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.TemperatureChamber.response">
            <summary>
            Decoded response.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TemperatureChamber.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.DownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Messaging.IBinaryMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.DecodeResponse(System.Byte[],System.Collections.Generic.List{System.Byte}@)">
            <summary>
            Decodes the responseString.
            </summary>
            <param name="originalResponse">The received response.</param>
            <param name="decodedResponse">The response as decoded byte list.</param>
            <returns>Tur if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.SwitchOn">
            <summary>
            Switches the TemperatureChamber on.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.SwitchOff">
            <summary>
            Switches the TemperatureChamber off.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.SetTime(System.DateTime)">
            <summary>
            Sets the time.
            </summary>
            <param name="time">The new time.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.GetTime">
            <summary>
            Gets the time.
            </summary>
            <returns>
            The time of the TemperatureChamber or null in case of an error.
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TemperatureChamber.SetpointTemperature">
            <summary>
            Gets / sets the setpoint temperature.
            </summary>
            <value>The setpoint temperature or null in case of an error (get).</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TemperatureChamber.CurrentTemperature1">
            <summary>
            Gets the current temperature of sensor 1.
            </summary>
            <value>The current temperature or null in case of an error.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TemperatureChamber.CurrentTemperature2">
            <summary>
            Gets the current temperature of sensor 2.
            </summary>
            <value>The current temperature or null in case of an error.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.StartProgram(System.Int32)">
            <summary>
            Starts the program with the given number.
            </summary>
            <param name="programNumber">The number of the program to start.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TemperatureChamber.ProgramRunning">
            <summary>
            Gets the number of the running program.
            </summary>
            <value>
            1 - 99	Number of the running program.
            0			No program is running.
            null		Error occurred while retrieving the program number.
            </value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.StopProgram">
            <summary>
            Stops the currently runnning program.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.Send(System.Collections.Generic.List{System.Byte})">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.CheckSum(System.Collections.Generic.List{System.Byte})">
            <summary>
            gets Checksum
            </summary>
            <param name="bytes">Byte array</param>
            <returns>The Checksum of bytes</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.ConvertFromAscii(System.Byte)">
            <summary>
            Converts byte from ascii
            </summary>
            <param name="ascii">Ascii byte</param>
            <returns>byte value of ascii byte</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TemperatureChamber.ConvertToAscii(System.Int32)">
            <summary>
            Converts byte to ascii byte
            </summary>
            <param name="value">Value byte</param>
            <returns>Ascii byte</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.StringArgs">
            <summary>
            Event argument containing single string
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.StringArgs.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.StringArgs.Text">
            <summary>
            Event text
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.TextInstrument">
            <summary>
            Dummy instrument for direct sending of text messages (etc. via COM Port)
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextInstrument.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">instrument name</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextInstrument.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initialize instrument
            </summary>
            <param name="downlinks">downlink protocol(s)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextInstrument.Dispose">
            <summary>
            Clean up
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextInstrument.Available">
            <summary>
            Check if instrument is configured.
            Derived classes should check connection to HW
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextInstrument.Send(System.String)">
            <summary>
            Send given text (separator ist automatically appended)
            </summary>
            <param name="text">text to send</param>
        </member>
        <member name="E:ET.FW.Hal.Instruments.TextInstrument.Received">
            <summary>
            Received event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextInstrument.DownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Handle sent/received data
            </summary>
            <param name="sender">event source / downlink</param>
            <param name="e">event args containig the message</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextInstrument.Downlink">
            <summary>
            Protocol used to transport the texts
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.TextMessageDevice">
            <summary>
            Base class for external device with downlink of text and binary messages.
            </summary>
            <remarks>Downlink for binary message is optional</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name (e.g. "PowerSupply")</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextMessageDevice.TextDownlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextMessageDevice.BinaryDownlink">
            <summary>
            Gets or sets the binary downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.TextDownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.BinaryDownlinkOutput(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Messaging.IBinaryMessage})">
            <summary>
            Receives the output of the connected binary downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The BinaryMessage instance containing the event data.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextMessageDevice.RequestTimeout">
            <summary>
            Timeout for requests
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSend(System.String)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSend(System.String,ET.FW.Hal.Messaging.SegmentType)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
            <param name="segmentType">Type of the segmented message.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSend(System.Byte[],ET.FW.Hal.Messaging.SegmentType)">
            <summary>
            Sends the specified data.
            </summary>
            <param name="data">The data to send.</param>
            <param name="segmentType">Type of the segmented message.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnRequest(System.String)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="text">The text to send.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnRequest(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="text">The text to send.</param>
            <param name="timeout">The timeout of the request.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnRequest(System.Byte[])">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="request">The binary request.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnRequestNoStatus(System.String)">
            <summary>
            Sends the specified request and returns the response.
            </summary>
            <param name="text">The text to send.</param>
            <returns>The response of the device.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSendNoStatus(System.String)">
            <summary>
            Sends the specified command with no request status.
            </summary>
            <param name="text">The text to send.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSynchronizedStarted">
            <summary>
            On SynchronizedStarted
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnSynchronizedEnded">
            <summary>
            On SynchronizedEnded
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.ClearErrors">
            <summary>
            Clear all errors
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnClearErrors">
            <summary>
            Clear all errors on device
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextMessageDevice.HasErrors">
            <summary>
            Has any errors
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.TextMessageDevice.Errors">
            <summary>
            Queried errors
            </summary>
        </member>
        <member name="E:ET.FW.Hal.Instruments.TextMessageDevice.ErrorsEvent">
            <summary>
            Errors event handler
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.RaiseErrorsEvent">
            <summary>
            Raises errors event
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.AddSystemError(System.String)">
            <summary>
            Add system error
            </summary>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.AddDeviceError(System.String)">
            <summary>
            Add device error
            </summary>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.AddError(ET.FW.Core.Hal.ErrorKind,System.String)">
            <summary>
            Add error
            </summary>
            <param name="kind">Kidn of error</param>
            <param name="message">string message</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.RequestErrors">
            <summary>
            Request errors
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.TextMessageDevice.OnRequestErrors">
            <summary>
            On request error on device
            </summary>
            <returns>True if request successful</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2">
            <summary>
            Class USB2
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2.ResetMode">
            <summary>
            Reset mode
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Usb2.ResetMode.Run">
            <summary>
            Mode run
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Usb2.ResetMode.Hold">
            <summary>
            Mode  Hold
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2.VendorRequest">
            <summary>
            Vendor Request
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2.EZUsbDriverVersion">
            <summary>
            EZ Usb Driver Version
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2.AnchorDownloadControl">
            <summary>
            Anchor Download Control
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Usb2.BulkTransferControl">
            <summary>
            Bulk Transfer Control
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.CtlCode(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Ctl Code
            </summary>
            <param name="deviceType">Device type</param>
            <param name="function">The function</param>
            <param name="method">The methode</param>
            <param name="access">The access</param>
            <returns>The code</returns>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Usb2.Logger">
            <summary>
            Logger for this device.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.Init(System.Byte,System.String)">
            <summary>
            Inits this instance and scans for available devices.
            </summary>
            <param name="number">The device number.</param>
            <param name="name">Name of the device, used for logging.</param>
            <returns>
            Returns <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.Exit">
            <summary>
            Cleaning up.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.DriverVersion(System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Get the driver version.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="buildVersion">The build version.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.Reset(ET.FW.Hal.Instruments.Usb2.ResetMode)">
            <summary>
            Resets the Remote.
            </summary>
            <param name="resetMode">The reset mode.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.WriteBulk(System.Byte[])">
            <summary>
            Writes data to the Remote (USB OUT).
            </summary>
            <param name="data">The data to write.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.DownloadBuffer(System.UInt16,System.Byte[])">
            <summary>
            Downloads a buffer to the EZ-USB RAM.
            </summary>
            <param name="address">Specifies the address within EZ-USB RAM to download to.</param>
            <param name="buffer">Buffer of data to download to EZ-USB RAM.</param>
            <returns>
            	<c>true</c> if successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.IoCtlEzusbVendorRequest">
            <summary>
            IoCtlEzusb Vendor Request
            </summary>
            <returns>The code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.IoCtlEzusbGetDriverVersion">
            <summary>
            IoCtlEzusb Get Driver Version
            </summary>
            <returns>The code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.IoCtlEzusbAnchorDownload">
            <summary>
            IoCtlEzusb Anchor Download
            </summary>
            <returns>The code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.IoCtlEzusbBulkWrite">
            <summary>
            IoCtlEzusb Bulk Write
            </summary>
            <returns>The code</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Usb2.OpenDevice(System.String)">
            <summary>
            Opde device
            </summary>
            <param name="name">Device name</param>
            <returns>Device Ptr</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.DeviceInfo">
            <summary>
            DeviceInfo contains all infos for one device found via usbi2cio.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbI2cIo">
            <summary>
            UsbI2c Io
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_GetDllVersion">
            <summary>
            The GetDllVersion function is used to obtain the revision information for the API dll file.
            </summary>
            <returns>
            A ushort containing the revision value formatted in binary coded decimal.
            High byte = major revision, low byte = minor revision.
            A returned value of 0x0201 would represent version 2.01.
            </returns>
            <remarks>
            This function provide a simple method for an application to obtain the version of the installed API dll file.
            This information can be useful for determining compatibility and for troubleshooting.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_OpenDeviceInstance(System.String,System.Byte)">
            <summary>
            The OpenDeviceInstance function is used to obtain a handle to a specific instance of a device driver.
            </summary>
            <param name="devName">A long pointer to a string, which contains the symbolic name of the device’s driver. For the generic USB I2C/IO device driver the symbolic name is “UsbI2cIo”.</param>
            <param name="devInstance">A byte representing the device instance. The first device attached is usually device instance 0, the 2nd is usally 1, etc.</param>
            <returns>A IntPtr to the specified device instance. The handle should always be compared to the value IntPtr.Zero to determine if a valid handle was obtained.</returns>
            <remarks>Custom versions of the USB I2C/IO device driver will have different symbolic names.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_CloseDeviceInstance(System.IntPtr)">
            <summary>
            The CloseDeviceInstance function is used to close a handle to a device driver instance.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <returns>Returns a non-zero value to indicate success, zero to indicate failure.</returns>
            <remarks>Applications should close all open device handles before exiting.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_DetectDevice(System.IntPtr)">
            <summary>
            The DetectDevice function is used to determine if a previously opened device is still attached.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <returns>A int indicating whether the device is still attached ( != 0 when device is attached).</returns>
            <remarks>This function provides a fast mechanism for monitoring device connection/disconnection. It generates a call to the device driver, but does not generate any USB traffic.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_GetDeviceCount(System.String)">
            <summary>
            The GetDeviceCount function is used to determine how many USB I2C/IO devices are currently attached.
            </summary>
            <param name="devName">A string, which contains the symbolic name of the device’s driver. For the generic USB I2C/IO device driver the symbolic name is “UsbI2cIo”.</param>
            <returns>A byte representing the number of attached devices.</returns>
            <remarks>Custom versions of the USB I2C/IO device driver will have different symbolic names.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_GetSerialId(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            The GetSerialId function is used to obtain a devices Serial ID string. The Serial ID uniquely identifies individual USB I2C/IO devices.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <param name="devSerialId">A string, which will be used to store the Serial ID string obtained from the specified device. USB I2C/IO Serial ID strings are 9 bytes long, including the null termination.</param>
            <returns>A int indicating whether a Serial ID was successfully obtained from the specified device.</returns>
            <remarks>The Serial ID string provides a mechanism for applications to identify, remember, and communicate with uniquely identified USB I2C/IO devices.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_ConfigIoPorts(System.IntPtr,System.UInt32)">
            <summary>
            The ConfigIoPorts function is used to configure the I/O port bits as inputs or outputs.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <param name="ioPortConfig">
            An uint specifying the desired configuration for the I/O port bits.
            The bit mapping is a follows:
            0x000CBBAA
            Where C, B, and A correspond to the port bits
            byte[0] bits 7..0 = Port A bits 7..0 configuration value
            byte[1] bits 7..0 = Port B bits 7..0 configuration value
            byte[2] bits 3..0 = Port C bits 7..4 configuration value (Port C bits 3..0 are reserved)
            byte[2] bits 7..4 = reserved
            byte[3] bits 7..0 = reserved
            For all bits, a 1 indicates configuration as Input, a 0 indicates configuration as Output
            </param>
            <returns>Returns a non-zero value to indicate success, zero to indicate failure.</returns>
            <remarks>A valid device instance handle must be obtained prior to calling ConfigIoPorts.</remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_WriteIoPorts(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The WriteIoPorts function is used to write to the I/O port pins which are configured as outputs.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <param name="ioPortData">
            A uint specifying the data to write to the I/O ports.
            The bit mapping for the write data is as follows:
            0x000CBBAA
            Where C, B, and A correspond to the port bits
            byte[0] bits 7..0 = Port A bits 7..0 data value
            byte[1] bits 7..0 = Port B bits 7..0 data value
            byte[2] bits 3..0 = Port C bits 7..4 data value (Port C bits 3..0 are reserved)
            byte[2] bits 7..4 = reserved
            byte[3] bits 7..0 = reserved
            </param>
            <param name="ioPortMask">
            An uint specifying the data mask to use when modifying the I/O ports outputs. The mask value allows a Read-Modify-Write operation to occur at the firmware level, which frees the application software from having to maintain an image of the ports, and reduces USB traffic.
            The bit mapping for the mask is as follows:
            0x000CBBAA
            Where C, B, and A correspond to the port bits
            byte[0] bits 7..0 = Port A bits 7..0 mask value
            byte[1] bits 7..0 = Port B bits 7..0 mask value
            byte[2] bits 3..0 = Port C bits 7..4 mask value (Port C bits 3..0 are reserved)
            byte[2] bits 7..4 = reserved
            byte[3] bits 7..0 = reserved
            </param>
            <returns>Returns a non-zero value to indicate success, zero to indicate failure.</returns>
            <remarks>
            A valid device instance handle must be obtained prior to calling WriteIoPorts.
            Only port bits which were previously configured as outputs are written.
            If you are confused by the “ulIoPortMASK” parameter, you can simply set it to 0xFFFFFFFF and always modify the value of all pins which are configured as outputs.
            All of the I/O pins default to inputs upon power-up and “float”. This makes it possible to set a “default state” for any pins that will eventually be used as outputs, by simply connecting a pull-up or pull-down resistor.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_ReadI2c(System.IntPtr,ET.FW.Hal.Instruments.I2cTrans)">
            <summary>
            The ReadI2c function is used to execute an I2C read transaction.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <param name="transI2C">A I2cTrans structure. The I2cTrans structure is used to specify the details of an I2C transaction (device address, number of bytes, etc.).</param>
            <returns>On success, returns the number of bytes successfully read from the specified I2C device. On failure, returns a negative number.</returns>
            <remarks>
            A valid device instance handle must be obtained prior to calling the ReadI2c function.
            The read data is written to the transI2c.Data buffer.
            The maximum number of bytes per transfer is currently limited to 64, not 256 as implied by the definition of the I2cTrans structure.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2cIo.DAPI_WriteI2c(System.IntPtr,ET.FW.Hal.Instruments.I2cTrans)">
            <summary>
            The WriteI2c function is used to execute an I2C write transaction.
            </summary>
            <param name="hDevInstance">A IntPtr to a device instance. Specifies which USB I2C/IO device instance.</param>
            <param name="transI2C">
            A pointer to an I2cTrans structure. The I2cTrans structure is used to specify the details of an I2C transaction (device address, number of bytes, etc.).
            The I2cTrans structure is defined in the dll header file as follows:
            typedef struct I2cTrans {
            	BYTE byTransType;
            	BYTE bySlvDevAddr;
            	WORD wMemoryAddr;
            	WORD wCount;
            	BYTE Data[256];
            };
            </param>
            <returns>
            On success, returns the number of bytes successfully written to the specified I2C device.
            On failure, returns a negative number.
            </returns>
            <remarks>
            A valid device instance handle must be obtained prior to calling the WriteI2c function.
            The write data is obtained from the TransI2c.Data buffer.
            The maximum number of bytes per transfer is currently limited to 64, not 256 as implied by the definition of the I2C_TRANS structure.
            </remarks>
        </member>
        <member name="T:ET.FW.Hal.Instruments.I2cTrans">
            <summary>
            Data structure needed for communication with usbi2cio.dll.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.I2cTransType">
            <summary>
            Supported transaction types.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.I2cTransType.I2cTransNoAdr">
            <summary>
            Read or write with no address cycle.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.I2cTransType.I2cTrans8Adr">
            <summary>
            	Read or write with 8 bit address cycle.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.I2cTransType.I2cTrans16Adr">
            <summary>
            Read or write with 16 bit address cycle.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.I2cTransType.I2cTransNoAdrNoStop">
            <summary>
            Read or write with no address cycle, stop signaling suppressed.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbI2c">
            <summary>
            Helper class for communication between PowerMatrix and usbi2cio.dll .
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.UsbI2c.DeviceCount">
            <summary>
            Gets or sets the device count.
            </summary>
            <value>The device count.</value>
        </member>
        <member name="P:ET.FW.Hal.Instruments.UsbI2c.Logger">
            <summary>
            Logger for this device.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.Init(System.String)">
            <summary>
            Inits this instance and scans for available devices.
            </summary>
            <param name="name">Name of the device, used for logging.</param>
            <returns>
            Returns <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.ScanI2CDevices(System.Int32)">
            <summary>
            Scans the connected I2C devices.
            </summary>
            <param name="index">The device index.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.GetDeviceIndex(System.String)">
            <summary>
            Gets the index of the device with the given serial id.
            </summary>
            <param name="serialId">The serial id.</param>
            <returns>The device index</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.GetDllVersion">
            <summary>
            GetDllVersion is used to obtain the revision information for the API dll file.
            </summary>
            <returns>
            A ushort containing the revision value formatted in binary coded decimal.
            High byte = major revision, low byte = minor revision.
            A returned value of 0x0201 would represent version 2.01.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.ReadI2c(System.Int32,ET.FW.Hal.Instruments.I2cTrans)">
            <summary>
            The ReadI2c function is used to execute an I2C read transaction.
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="transI2c">A I2cTrans structure. The I2cTrans structure is used to specify the details of an I2C transaction (device address, number of bytes, etc.).</param>
            <returns>
            On success, returns the number of bytes successfully read from the specified I2C device. On failure, returns a negative number.
            </returns>
            <remarks>
            A valid device instance handle must be obtained prior to calling the ReadI2c function.
            The read data is written to the transI2c.Data buffer.
            The maximum number of bytes per transfer is currently limited to 64, not 256 as implied by the definition of the I2cTrans structure.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.WriteI2c(System.Int32,ET.FW.Hal.Instruments.I2cTrans)">
            <summary>
            The WriteI2c function is used to execute an I2C write transaction.
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="transI2c">
            A pointer to an I2cTrans structure. The I2cTrans structure is used to specify the details of an I2C transaction (device address, number of bytes, etc.).
            The I2cTrans structure is defined in the dll header file as follows:
            typedef struct I2cTrans {
            	BYTE byTransType;
            	BYTE bySlvDevAddr;
            	WORD wMemoryAddr;
            	WORD wCount;
            	BYTE Data[256];
            };
            </param>
            <returns>
            On success, returns the number of bytes successfully written to the specified I2C device.
            On failure, returns a negative number.
            </returns>
            <remarks>
            A valid device instance handle must be obtained prior to calling the WriteI2c function.
            The write data is obtained from the TransI2c.Data buffer.
            The maximum number of bytes per transfer is currently limited to 64, not 256 as implied by the definition of the I2C_TRANS structure.
            </remarks>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.SetPowerMask(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the power mask for CONST, VAR or OFF for the specified port (ports 1..12).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="port">The port to change.</param>
            <param name="mask">The power mask.</param>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.GetPowerMask(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the power mask for CONST, VAR or OFF for the specified port (ports 1..12).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="port">The port to change.</param>
            <param name="mask">The power mask of the given port.</param>
            <returns>
            Returns <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.SetWakeupLine(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the wakeup line.
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="port">The port to change.</param>
            <param name="value">if set to <c>true</c> wakeup line is set.</param>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.GetWakeupLine(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the wakeup line.
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="port">The port to read.</param>
            <param name="value">if set to <c>true</c> wakeup line is set.</param>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.HasExpander(System.Int32)">
            <summary>
            Determines whether the specified device has an expander (relay).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <returns>
            	<c>true</c> if the specified device has one or more expanders; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.HasExpander(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified device has an expander (relay).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="moduleIndex">Index of the relay module.</param>
            <returns>
            	<c>true</c> if the specified device has one or more expanders; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.ExpanderCount(System.Int32)">
            <summary>
            Determines the amount of expanders (relays).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <returns>Amount of expanders.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.SetRelay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the given relay (1..4 = high, 5..8 = low).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="port">The relay port to change.</param>
            <param name="value">if set to <c>true</c> the relay is energized.</param>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbI2c.SetRelay(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the given relay (1..4 = high, 5..8 = low).
            </summary>
            <param name="deviceIndex">Index of the device.</param>
            <param name="moduleIndex">Index of the relay module (0..7).</param>
            <param name="port">The relay port to change.</param>
            <param name="value">if set to <c>true</c> the relay is energized.</param>
            <returns>Returns <c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280">
            <summary>
            UsbLowLevelNc2280 external device.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.irqStat1Strings">
            <summary>
            Get a user friendly description for IRQSTAT1 status bit
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.#ctor(System.String)">
            <summary>
            The Constructor.
            </summary>
            <param name="name">Configured device name</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.MaxPacketSize">
            <summary>
            Max. Packet Size
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>
            	<c>true</c> if successfull; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.DeinitUsb">
            <summary>
            Deinit Usb
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.InitUsb">
            <summary>
            init usb device. 
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.Dispose">
            <summary>
            Dispose device, may be overriden by derived classes
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.SetBit(System.UInt32)">
            <summary>
            Sets bit
            </summary>
            <param name="bit">Bit poisition</param>
            <returns>Value with setted bit</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.Reset">
            <summary>
            Reset chip
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.IRQDisable">
            <summary>
            Disable all IRQs
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.IRQEnable">
            <summary>
            Enable IRQs
            <br/>
             Enable Setup Packet and Endpoint 0 interrupts.
            - If a Setup Packet is pending, the NET2280 will interrupt.
            - For Endpoint 0 to interrupt, appropriate bits in EP_IRQENB must also be set.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.UsbEnable">
            <summary>
            Enable USB 
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.UsbDisable">
            <summary>
            Disable USB
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.SetAddress(System.UInt32)">
            <summary>
            Set address
            </summary>
            <param name="addr">The address</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.HandleInterrupt(System.UInt32,ET.FW.Hal.Instruments.SetupHandler,ET.FW.Hal.Instruments.EpHandler)">
            <summary>
            Handles Interrupt
            </summary>
            <param name="timeout">The timeout</param>
            <param name="setupHandler">Setup Handler</param>
            <param name="epHandler">EP Handler</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.HandleEpIrq(System.UInt32,ET.FW.Hal.Instruments.EpHandler)">
            <summary>
            Handle Endpoint interrupt 
            </summary>
            <param name="irqStat0">irq Stat0</param>
            <param name="handler">EP handler</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.HandleSetupIrq(ET.FW.Hal.Instruments.SetupHandler)">
            <summary>
            Is called to request a setup packet
            </summary>
            <param name="handler">Setup Handler</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.HandleStatusIrq(System.UInt32)">
            <summary>
            Handles status interrupts
            </summary>
            <param name="irqStat1">irq Stat1</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.Ep0Send(System.Byte[],System.Int32)">
            <summary>
            Transmit packets on Endpoint Zero (Control Read data phase)
            - The host may start the status phase ANY TIME after reading a data 
              phase packet
            - A Control Read status phase starts with an OUT token (See USB 8.5.3)
            - Status phase OUT tokens cause Endpoint Zero to switch to an OUT 
              Endpoint. Endpoint zero registers may therefore read back unexpected 
              OUT endpoint content!
            - Because of the status phase switch, after the final byte of the 
              Control Read is written to the endpoint (or validated, if not a Max 
              Packet Multiple) endpoint registers should not be written or read 
              (they may read confounding values!)
            </summary>
            <param name="txBuf">Tx Buffer</param>
            <param name="bytesToSend">Bytes To Send</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.StatusPhase">
            <summary>
            Status phase
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.ResetDataEp">
            <summary>
            Reset all endpoints
            <br/>
            - Effectively undoes EpCreate() for all endpoints
            - Deprograms all endpoints and endpoint state information
            - Expected to be called on initialization, USB reset and de-configuration        
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpIrqEnable">
            <summary>
            Enable interrupts for endpoints
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpCreate(System.UInt32,ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbEndpointDescriptor)">
            <summary>
            Initialize an endpoint's Endpoint Object
             - Most values are extracted from the Endpoint Descriptor
             - A physical endpoint is initialized along with the Endpoint Object
             - Does not apply to Endpoint Zero
            </summary>
            <param name="logicalEp">Logical Ep</param>
            <param name="epDesc">EP Description</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpXRecv(System.UInt32,System.UInt32)">
            <summary>
            Reads data from an endpoint.
            </summary>
            <param name="logicalEp">specifies the endpoint to receive from</param>
            <param name="bytesRamining">tells how much bytes to receive</param>
            <returns>array of bytes read</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpXSend(System.UInt32,System.Byte[])">
            <summary>
            Transfer data to fifo for sending
            </summary>
            <param name="logicalEp">logical Ep</param>
            <param name="txBuf">Tx Buffer</param>
            <returns>Byte count</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpXStart(System.UInt32)">
            <summary>
            Start EP transfer 
            This function will enable the interrupts for sending data 
            </summary>
            <param name="logicalEp">logical Ep</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.UsbLowLevel.UsbLowLevelNc2280.EpXFinish(System.UInt32)">
            <summary>
            Check if transfer is complete and disable interrupts
            </summary>
            <param name="logicalEp">Logical Ep</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs">
            <summary>
            UsbStd Defs
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.GET_STATUS">
            Standard Request Codes (in bRequest)
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.GET_DEVICE_ID">
            Device Class Specific Request Codes 
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.DEVICE_DESC">
            Descriptor Types (in wValue) (See USB 1.1, Table 9-5)
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.CLASS_USE_INFO_IN_INF_DESC">
            USB Class Codes (See http://www.usb.org/developers/defined_class)
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.DEVICE_REMOTE_WAKEUP">
            Feature selectors (in wValue) (See USB 2.0: 9.4.5)
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.USB_TEST_J">
            Test mode selectors (in wIndex) (See USB 2.0: 9.4.9)
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.HOST_TO_DEVICE">
            bmRequestType bits (in bmRequestType)
            - See USB 2.0: 9.3.1, Table 9-2
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.CTRL">
            Transfer type (in bmAttributes of Endpoint Descriptors)
             - Maps to matching in NetChip endpoint configuration register
             - See USB 2.0: Table 9-13
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.EP_OUT">
            Endpoint direction (usually OR'd with bEndpointAddress in bits 3-0)
             - Note: Not to be confused with endpoint direction programming in chip
             - See USB 2.0: Table 9-13
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.MAX_DATA_ENDPOINTS_PER_DIRECTION">
            Endpoint counts
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.ENDPOINT_ADDRESS_MASK">
            Endpoint address mask
            - Use to isolate endpoint address from endpoint direction in 
              bEndpointAddress
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.CONFIG_SELF_POWERED">
            bmAttribute bits in Configuration Descriptor
            - USB 2.0 9.6.3 (bmAttributes in Table 9-10): Bit 7 is reserved, and always
              set to one
        </member>
        <member name="F:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.VENDOR_SPECIFIC">
            Vendor-specific type
             - Vendor specific device, class, subclass and protocols are all 0xff
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbSetupPacket">
            <summary>
            USB Device requests (Setup packets)
            - See USB 2.0: 9.3
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbDeviceDescriptor">
            <summary>
            USB descriptors
            - Based on USB 2.0: 9.6
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbConfigurationDescriptor">
            <summary>
            A USB configuration is packed with these standard USB descriptors 
            (See USB 2.0: 9.6.3):
             - One Configuration Descriptor
             - One (or more) Interface Descriptors
             - An interface may be packed with zero or more Endpoint Descriptors
             - Non-standard descriptors may be interleaved with standard descriptors
            Structures and packing tip: Care must be taken to ensure that the compiler
            packs descriptors (which are defined as structures) to be "Byte aligned":
             - The entire configuration, with all its packed descriptors, is 
               returned to the host as a single USB transfer. There can be no 
               gaps beween descriptors due to the compiler's structure packing 
               and alignment strategy
             - Compilers supporting zero-length arrays in structures may apply
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbInterfaceDescriptor">
            <summary>
            A USB interface is packed with zero or more Endpoint Descriptors
             - Structures and packing tip: See discussion for USB configurations
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbEndpointDescriptor">
            <summary>
            USB Endpoint Descriptor
             - See USB 2.0: 9.6.6
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbStringDescriptor">
            <summary>
            USB String Descriptor
             - See USB 2.0: 9.6.7
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbDeviceQualifierDescriptor">
            <summary>
            USB descriptors added based on USB 2.00 Specification
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbCommonDescriptor">
            <summary>
             Common header for all USB descriptors
             - Can be applied to parsing any USB descriptor
             - Can be applied to non-standard USB descriptors
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbHidDescriptor">
            <summary>
            HID Descriptor (used for mouse, keyboard ...)
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoIadDescriptor">
            <summary>
            UsbVideoIad Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoControlDescriptor">
            <summary>
            UsbVideoControl Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoInputTerminalDescriptor">
            <summary>
            UsbVideoInputTerminal Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoOutputTerminalDescriptor">
            <summary>
            UsbVideoOutputTerminal Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoSelectorDescriptor">
            <summary>
            UsbVideoSelector Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoProcessingDescriptor">
            <summary>
            UsbVideoProcessing Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoVsInterfaceDesccriptor">
            <summary>
            UsbVideoVsInterface Desccriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoVsFormatDescriptor">
            <summary>
            UsbVideoVsFormat Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoVSFrameDescriptor">
            <summary>
            UsbVideoVSFrame Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbVideoIsochEpDescriptor">
            <summary>
            UsbVideoIsochEp Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioAcInterfaceDescriptor">
            <summary>
            UsbAudioAcInterface Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioInputTerminalDescriptor">
            <summary>
            UsbAudioInputTerminal Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioOutputTerminalDescriptor">
            <summary>
            UsbAudioOutputTerminal Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioAsInterfaceDescriptor">
            <summary>
            UsbAudioAsInterface Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioFormatDescriptor">
            <summary>
            UsbAudioFormat Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioEpDescriptor">
            <summary>
            UsbAudioEp Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbAudioIsochEpDescriptor">
            <summary>
            UsbAudioIsochEp Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbSmartCardDescriptor">
            <summary>
            UsbSmartCard Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbCdcHeaderDescriptor">
            <summary>
            UsbCdcHeader Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbCdcEthFuncDescriptor">
            <summary>
            UsbCdcEthFunc Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.UsbLowLevel.UsbStdDefs.UsbCdcUnionDescriptor">
            <summary>
            UsbCdcUnion Descriptor
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.IUSBSwitchBox">
            <summary>
             USBSwitchBox interface
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.IUSBSwitchBox.Send(System.String,System.Boolean)">
            <summary>
            Sends the specified text.
            </summary>
            <param name="text">The text to send.</param>
            <param name="request">TRUE in case of expecting a response.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox">
            <summary>
            Implements the USB Switching Box
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.Decoupler">
            <summary>
            IEventDecoupling implementation: provide IDecoupler as property
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.#ctor(System.String)">
            <summary>
            Create the instance with specified name.
            </summary>
            <param name="name">Device name.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device.
            </summary>
            <param name="downlinks">list of downlink protocols</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.Dispose">
            <summary>
            Disposing the device
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.USBSwitchBox.USBSwitchBox.Send(System.String,System.Boolean)">
            <summary>
            Sends a string to the Comport.
            </summary>
            <param name="command">Comport string.</param>
            <param name="request">TRUE in case of expecting a response.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.CommonVisaCommands">
            <summary>
            Provides predefined common VISA commands.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.ResetTimeout">
            <summary>
            The timeout used for the reset command.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.Idenitifcation">
            <summary>
            Requests the device identification.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.OperationComplete">
            <summary>
            Waits until all operations are completed and then returns "1".
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.Reset">
            <summary>
            RESET sets the device to a defined default status. The command has the same effect
            as pressing the PRESET key. The default is stated in the description of the
            commands.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">
            <summary>
            Exception to report if an VISA operation should be executed, but the instrument isn't available. The instrument isn't available
            if it is not initializes or already disposed.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.IVisaInstrument">
            <summary>
            VISA instrument operational interface.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Name">
            <summary>
            The name of the instrument.
            </summary>
            <seealso cref="P:ET.FW.Hal.Instruments.ExternalDevice.Name"/>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Available">
            <summary>
            Indicates if the instrument is available.
            </summary>
            <seealso cref="P:ET.FW.Hal.Instruments.ExternalDevice.Available"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.CheckedRead``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Performs a read and checks if the response is as expected.
            </summary>
            <typeparam name="T">The expected type of the read value.</typeparam>
            <param name="command">The command.</param>
            <param name="expectedResponse">The expected response.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.CheckedSynchronizedWrite``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Writes the given value using the given command, and then checks the value with an read.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a parametrized read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <param name="parameter">The read parameter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.SynchronizedCall(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a synchronized call command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrument.SynchronizedWrite(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a synchronized write command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.IVisaInstrumentControl">
            <summary>
            Common VISA instrument control, which provides instrument depended operations.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.IVisaInstrumentControl.Identification">
            <summary>
            The instrument identification.
            </summary>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.VisaOperationException">In case of an error.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrumentControl.Reset">
            <summary>
            Resets the instrument. Sets the instrument dependent default settings.
            </summary>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.VisaOperationException">In case of an error.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrumentControl.SetDefaults">
            <summary>
            Sets the control dependent default settings.
            </summary>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.VisaOperationException">In case of an error.</exception>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger">
            <summary>
            Interface of VISA instrument operation loggers.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.LoggingEnabled">
            <summary>
            Indicates if logging is enables or not.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.Log">
            <summary>
            Log of the successful operations.
            <br/>
            Note: Operations, which fail with an exception won't be logged.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.ClearLog">
            <summary>
            Clears the log.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">
            <summary>
            Exception to report failed operations.
            </summary>
            <seealso cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.OperationFailedException.#ctor(System.String)">
            <summary>
            Initializes the exception with an message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.OperationFailedException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with an generic command and a message.
            </summary>
            <param name="operationType">The operation type (e.g. Call, Read, Write ...)</param>
            <param name="commandDescription">The command decription.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.OperationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">
            <summary>
            Exception to report responses, which can#t be converted to the expected type.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.ResponseConvertionException.#ctor(ET.FW.Hal.Instruments.Visa.VisaCommand,System.String,System.Type)">
            <summary>
            Initializes the exception with an read command, the response string and the target type.
            </summary>
            <param name="command">The command.</param>
            <param name="response">The response string.</param>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.ResponseConvertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.TimeoutException">
            <summary>
            Exception to report timed out operations.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.TimeoutException.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.TimeoutException.#ctor(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Initializes the exception with an read command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">
            <summary>
            Exception to report unexpected responses.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException.#ctor(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object,System.Object)">
            <summary>
            Initializes the exception with an read command, the received value and the expected value.
            </summary>
            <param name="command">The command.</param>
            <param name="response">The received value.</param>
            <param name="expectedResponse">The expected value.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaCommand">
            <summary>
            Represents a VISA command.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaCommand.StandardTimeout">
            <summary>
            The standard timeout in milliseconds, which is used to initialize the commands, if no other timeout is provided.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier">
            <summary>
            Defines the different access modifiers for commands.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier.Readable">
            <summary>
            Indicates, that the command is readable.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier.Writable">
            <summary>
            Indicates, that the command is writable.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier.ReadWritable">
            <summary>
            Indicates, that the command is read and writable.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.Command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.Description">
            <summary>
            The command description.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.Timeout">
            <summary>
            The timeout of the command.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.IsReadable">
            <summary>
            Indicates if an value can be read using this command.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.IsWritable">
            <summary>
            Indicates if an value can be written using this command.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaCommand.#ctor(System.String,System.String,ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier)">
            <summary>
            Initializes a new VISA command with the given parameters and the standard timeout.
            </summary>
            <param name="command">The command string.</param>
            <param name="description">The command description.</param>
            <param name="accessModifier">The access modifier.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaCommand.#ctor(System.String,System.String,ET.FW.Hal.Instruments.Visa.VisaCommand.AccessModifier,System.Int32)">
            <summary>
            Initializes a new VISA command with the given parameters.
            </summary>
            <param name="command">The command string.</param>
            <param name="description">The command description.</param>
            <param name="accessModifier">The access modifier.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaCommand.ReadCommandString">
            <summary>
            Creates a read command string and returns it. A read command requests a value from the instrument.
            </summary>
            <returns>The created read command string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaCommand.GetParametrizedReadCommandString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Creates a parametrized read command string and returns it. A read command requests a value from the instrument.
            </summary>
            <param name="value">The read parameter.</param>
            <param name="instrumentCulture">The instrument culture.</param>
            <returns>The created parametrized read command string.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaCommand.GetSynchronizedWriteCommandString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Creates a synchronized write command. The command is synchronized by attaching the "operation complete" read command at the end.
            A write command sends a value to the instrument.
            </summary>
            <param name="value">The value, which should be written.</param>
            <param name="instrumentCulture">The culture info, which is used for value formating..</param>
            <returns>The reated write command.</returns>
            <seealso cref="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.OperationComplete"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaCommand.GetSynchronizedCallCommandString">
            <summary>
            Creates a synchronized call command. The command is synchronized by attaching the "operation complete" read command at the end.
            A call command is just the command without an additional value.
            </summary>
            <returns>The command call command.</returns>
            <seealso cref="F:ET.FW.Hal.Instruments.Visa.CommonVisaCommands.OperationComplete"/>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaInstrument">
            <summary>
            Implementation of a VISA instrument. Provides common read and write operations.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.InstrumentCultureInfo">
            <summary>
            The culture info of the instrument.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.CallOperation">
            <summary>
            Call operation string.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.ReadOperation">
            <summary>
            Read operation string.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.WriteOperation">
            <summary>
            Write operation string.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.RequestTimeout">
            <summary>
            Timeout for entering the request mutex.
            <br/>
            Note: should be higher than all timeouts.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrument.Downlink">
            <summary>
            Gets or sets the downlink used by the device.
            </summary>
            <value>The downlink.</value>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.downlink">
            <summary>
            The dowlink used by the device.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.waitResponse">
            <summary>
            Wait-for-response event.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.requestMutex">
            <summary>
            The mutex to protect the request method.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.commonControl">
            <summary>
            The common visa instrument control.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.responseText">
            <summary>
            String returned after a request.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaInstrument.disposed">
            <summary>
            Indicates if the instrument is disposed.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.#ctor(System.String)">
            <summary>
            Creates the VISA instrument with the given name.
            </summary>
            <param name="name">The given name.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Init(System.Collections.Generic.IList{ET.FW.Core.Messaging.IProtocol})">
            <summary>
            Initializes the device with the given downlinks.
            </summary>
            <param name="downlinks">The downlinks</param>
            <returns>True, if the initialization was successful. Else false.</returns>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Dispose">
            <summary>
            Disposes the VISA instrument.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a parametrized read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <param name="parameter">The read parameter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.CheckedRead``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Performs a read and checks if the response is as expected.
            </summary>
            <typeparam name="T">The expected type of the read value.</typeparam>
            <param name="command">The command.</param>
            <param name="expectedResponse">The expected response.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.SynchronizedWrite(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a synchronized write command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.SynchronizedCall(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a synchronized call command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.CheckedSynchronizedWrite``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Writes the given value using the given command, and then checks the value with an read.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Request(System.String,System.Int32)">
            <summary>
            Sends the given command string and waits for an response until the timeout is reached.
            </summary>
            <param name="command">The command string.</param>
            <param name="timeout">The timeout.</param>
            <returns>Request string</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">If the timeout is reached and no response is available.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the send failes.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument is not available.</exception>
            <seealso cref="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Send(System.String,System.Int32)"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.Send(System.String,System.Int32)">
            <summary>
            Sends the given VISA request command string.
            </summary>
            <param name="command">The command string.</param>
            <param name="timeout">The timeout for the message send.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the send fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrument.downlink_Output(System.Object,ET.FW.Core.Messaging.MessageEventArgs{ET.FW.Hal.Text.ITextMessage})">
            <summary>
            Receives the output of the connected downlink.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The TextMessage instance containing the event data.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl">
            <summary>
            Implements the common VISA instrument control. Also though as base class for instrument specific control implementations.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.Instrument">
            <summary>
            The associated VISA instrument.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.Logger">
            <summary>
            Provides the logger for this instrument.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.#ctor(ET.FW.Hal.Instruments.Visa.IVisaInstrument)">
            <summary>
            Intitializes the VISA instrument control with its interface.
            </summary>
            <param name="instrument">The instrument.</param>
            <exception cref="T:System.ArgumentNullException">If the given instrument is null.</exception>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.Identification">
            <summary>
            See interface description.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.Reset">
            <summary>
            See interface description.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.SetDefaults">
            <summary>
            See interface description.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.CheckInstrumentAvaiability">
            <summary>
            Checks if the associated instrument is available.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentControl.Dispose">
            <summary>
            See interface description.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger">
            <summary>
            Provides the possibility to log successful operations of an encapsulated VISA instrument. By default the logging is disabled, 
            because the log is hold in the memory. If the logging should be enabled, the LoggingEnabled property has to be set to true. It
            is recommend to clear and disable the logger after usage.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Instrument">
            <summary>
            The functional instrument implementation.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.#ctor(ET.FW.Hal.Instruments.Visa.IVisaInstrument)">
            <summary>
            Initializes the operation logger with the functional instrument implementation.
            </summary>
            <param name="instrument">The functional instrument implementation.</param>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.LoggingEnabled">
            <summary>
            See interface description.
            </summary>
            <see cref="P:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.LoggingEnabled"/>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Log">
            <summary>
            See interface description.
            </summary>
            <see cref="P:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.Log"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.ClearLog">
            <summary>
            See interface description.
            </summary>
            <see cref="M:ET.FW.Hal.Instruments.Visa.IVisaInstrumentOperationLogger.ClearLog"/>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Name">
            <summary>
            See interface description.
            </summary>
            <see cref="P:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Name"/>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Available">
            <summary>
            See interface description.
            </summary>
            <see cref="P:ET.FW.Hal.Instruments.Visa.IVisaInstrument.Available"/>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.CheckedRead``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Performs a read and checks if the response is as expected.
            </summary>
            <typeparam name="T">The expected type of the read value.</typeparam>
            <param name="command">The command.</param>
            <param name="expectedResponse">The expected response.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.CheckedSynchronizedWrite``1(ET.FW.Hal.Instruments.Visa.VisaCommand,``0)">
            <summary>
            Writes the given value using the given command, and then checks the value with an read.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.UnexpectedResponseException">If the response is not as expected.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a parametrized read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <param name="parameter">The read parameter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Read``1(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a read command and converts the result to the given target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="command">The command.</param>
            <returns>The converted value.</returns>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.ResponseConvertionException">If the convertion of the response fails.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.SynchronizedCall(ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Performs a synchronized call command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.SynchronizedWrite(ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object)">
            <summary>
            Performs a synchronized write command and checks if the operation was complete.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.TimeoutException">In case of an timeout.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.OperationFailedException">If the operation failed.</exception>
            <exception cref="T:ET.FW.Hal.Instruments.Visa.InstrumentNotAvailableException">If the instrument isn't available.</exception>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.Dispose">
            <summary>
            Releases the resources of the operation logger.
            <br/>
            Note: The encapsulated instrument will not be disposed.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationLogger.AddLogEntry(ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry)">
            <summary>
            Adds an entry to the log if logging is enabled.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaInstrumentOperationProvider">
            <summary>
            Attribute to mark an interface as VISA control.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaOperationException">
            <summary>
            Exception to report VISA instrument operation failures.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationException.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationException.#ctor(System.String)">
            <summary>
            Initializes the exception with an message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes the exception with an message and an inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization contructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry">
            <summary>
            Represents an VISA operation in an operation log.
            </summary>
        </member>
        <member name="T:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType.Read">
            <summary>
            Read operation.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType.Write">
            <summary>
            Write operation.
            </summary>
        </member>
        <member name="F:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType.Call">
            <summary>
            Call operation.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OpType">
            <summary>
            The operation type.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.Command">
            <summary>
            The VISA command.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.Parameters">
            <summary>
            The parameters or null.
            </summary>
        </member>
        <member name="P:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.Value">
            <summary>
            The value or null
            </summary>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.#ctor(ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType,ET.FW.Hal.Instruments.Visa.VisaCommand)">
            <summary>
            Log entry for a parameter less call.
            </summary>
            <param name="operationType">The operation type.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.#ctor(ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType,ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object[])">
            <summary>
            Log entry for a parametrized call.
            </summary>
            <param name="operationType">The operation type.</param>
            <param name="command">The command.</param>
            <param name="parameters">The command parameters.</param>
        </member>
        <member name="M:ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.#ctor(ET.FW.Hal.Instruments.Visa.VisaOperationLogEntry.OperationType,ET.FW.Hal.Instruments.Visa.VisaCommand,System.Object[],System.Object)">
            <summary>
            Log entry for a parametrized read or write.
            </summary>
            <param name="operationType">The operation type.</param>
            <param name="command">The command.</param>
            <param name="parameters">The command parameters.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>
